// This file was generated on Wed Dec 28, 2022 14:22 (UTC) by REx v5.55 which is Copyright (c) 1979-2022 by Gunther Rademacher <grd@gmx.net>
// REx command line: MaiaScript.ebnf -backtrack -javascript -tree

function MaiaScript(string, parsingEventHandler)
{
  init(string, parsingEventHandler);

  var thisParser = this;

  this.ParseException = function(b, e, s, o, x)
  {
    var begin = b;
    var end = e;
    var state = s;
    var offending = o;
    var expected = x;

    this.getBegin = function() {return begin;};
    this.getEnd = function() {return end;};
    this.getState = function() {return state;};
    this.getExpected = function() {return expected;};
    this.getOffending = function() {return offending;};
    this.isAmbiguousInput = function() {return false;};

    this.getMessage = function()
    {
      return offending < 0
           ? "lexical analysis failed"
           : "syntax error";
    };
  };

  function init(source, parsingEventHandler)
  {
    eventHandler = parsingEventHandler;
    input = source;
    size = source.length;
    reset(0, 0, 0);
  }

  this.getInput = function()
  {
    return input;
  };

  this.getTokenOffset = function()
  {
    return b0;
  };

  this.getTokenEnd = function()
  {
    return e0;
  };

  function reset(l, b, e)
  {
            b0 = b; e0 = b;
    l1 = l; b1 = b; e1 = e;
    l2 = 0; b2 = 0; e2 = 0;
    l3 = 0; b3 = 0; e3 = 0;
    end = e;
    ex = -1;
    memo = {};
    eventHandler.reset(input);
  }

  this.reset = function(l, b, e)
  {
    reset(l, b, e);
  };

  this.getOffendingToken = function(e)
  {
    var o = e.getOffending();
    return o >= 0 ? MaiaScript.TOKEN[o] : null;
  };

  this.getExpectedTokenSet = function(e)
  {
    var expected;
    if (e.getExpected() < 0)
    {
      expected = MaiaScript.getTokenSet(- e.getState());
    }
    else
    {
      expected = [MaiaScript.TOKEN[e.getExpected()]];
    }
    return expected;
  };

  this.getErrorMessage = function(e)
  {
    var message = e.getMessage();
    var found = this.getOffendingToken(e);
    var tokenSet = this.getExpectedTokenSet(e);
    var size = e.getEnd() - e.getBegin();
    message += (found == null ? "" : ", found " + found)
            + "\nwhile expecting "
            + (tokenSet.length == 1 ? tokenSet[0] : ("[" + tokenSet.join(", ") + "]"))
            + "\n"
            + (size == 0 || found != null ? "" : "after successfully scanning " + size + " characters beginning ");
    var prefix = input.substring(0, e.getBegin());
    var lines = prefix.split("\n");
    var line = lines.length;
    var column = lines[line - 1].length + 1;
    return message
         + "at line " + line + ", column " + column + ":\n..."
         + input.substring(e.getBegin(), Math.min(input.length, e.getBegin() + 64))
         + "...";
  };

  this.parse_Program = function()
  {
    eventHandler.startNonterminal("Program", e0);
    lookahead1W(36);                // END | EOF | Identifier | Null | True | False | Character | String | Integer |
                                    // Complex | Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' |
                                    // '--' | ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' |
                                    // 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' |
                                    // 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' |
                                    // '{' | '~'
    switch (l1)
    {
    case 2:                         // EOF
      consume(2);                   // EOF
      break;
    default:
      for (;;)
      {
        lookahead1W(32);            // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        if (l1 == 1)                // END
        {
          break;
        }
        whitespace();
        parse_Expression();
      }
    }
    eventHandler.endNonterminal("Program", e0);
  };

  function parse_Expression()
  {
    eventHandler.startNonterminal("Expression", e0);
    switch (l1)
    {
    case 3:                         // Identifier
      lookahead2W(45);              // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' |
                                    // '.' | '/' | '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' |
                                    // '>' | '>=' | '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' |
                                    // 'case' | 'catch' | 'continue' | 'default' | 'do' | 'else' | 'export' | 'f32' |
                                    // 'f64' | 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' |
                                    // 'include' | 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' |
                                    // 'while' | '{' | '|' | '|=' | '||' | '}' | '~'
      switch (lk)
      {
      case 2947:                    // Identifier '('
        lookahead3W(33);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        break;
      case 4483:                    // Identifier '.'
        lookahead3W(0);             // Identifier | WhiteSpace^token
        break;
      case 10627:                   // Identifier '{'
        lookahead3W(38);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '}' |
                                    // '~'
        break;
      }
      break;
    case 83:                        // '{'
      lookahead2W(38);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '}' |
                                    // '~'
      switch (lk)
      {
      case 467:                     // '{' Identifier
        lookahead3W(43);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' |
                                    // '/' | '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' |
                                    // '>=' | '>>' | '>>=' | '?' | '?=' | '[' | '^' | '^=' | 'break' | 'continue' |
                                    // 'do' | 'export' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' | 'i64' |
                                    // 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' | 'throw' |
                                    // 'try' | 'typeof' | 'while' | '{' | '|' | '|=' | '||' | '}' | '~'
        break;
      case 1107:                    // '{' String
        lookahead3W(42);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' |
                                    // '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' |
                                    // '>>' | '>>=' | '?' | '?=' | '[' | '^' | '^=' | 'break' | 'continue' | 'do' |
                                    // 'export' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' |
                                    // 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' |
                                    // 'typeof' | 'while' | '{' | '|' | '|=' | '||' | '}' | '~'
        break;
      case 6867:                    // '{' '['
        lookahead3W(34);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | ']' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        break;
      case 11219:                   // '{' '}'
        lookahead3W(44);            // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' |
                                    // '/' | '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' |
                                    // '>=' | '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' |
                                    // 'catch' | 'continue' | 'default' | 'do' | 'else' | 'export' | 'f32' | 'f64' |
                                    // 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' |
                                    // 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' |
                                    // '{' | '|' | '|=' | '||' | '}' | '~'
        break;
      case 8403:                    // '{' 'f32'
      case 8531:                    // '{' 'f64'
      case 9043:                    // '{' 'i32'
      case 9171:                    // '{' 'i64'
        lookahead3W(0);             // Identifier | WhiteSpace^token
        break;
      case 1619:                    // '{' Comment
      case 5203:                    // '{' ';'
      case 7379:                    // '{' 'break'
      case 7763:                    // '{' 'continue'
      case 10707:                   // '{' '{'
        lookahead3W(38);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '}' |
                                    // '~'
        break;
      case 2003:                    // '{' '!'
      case 3667:                    // '{' '+'
      case 3795:                    // '{' '++'
      case 4179:                    // '{' '-'
      case 4307:                    // '{' '--'
      case 11347:                   // '{' '~'
        lookahead3W(22);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
        break;
      case 8659:                    // '{' 'for'
      case 8787:                    // '{' 'foreach'
      case 9299:                    // '{' 'if'
      case 9939:                    // '{' 'switch'
      case 10067:                   // '{' 'test'
      case 10579:                   // '{' 'while'
        lookahead3W(3);             // WhiteSpace^token | '('
        break;
      case 595:                     // '{' Null
      case 723:                     // '{' True
      case 851:                     // '{' False
      case 979:                     // '{' Character
      case 1235:                    // '{' Integer
      case 1363:                    // '{' Complex
      case 1491:                    // '{' Real
        lookahead3W(41);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' |
                                    // '/=' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' |
                                    // '>>=' | '?' | '?=' | '[' | '^' | '^=' | 'break' | 'continue' | 'do' | 'export' |
                                    // 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' |
                                    // 'include' | 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' |
                                    // 'while' | '{' | '|' | '|=' | '||' | '}' | '~'
        break;
      case 3027:                    // '{' '('
      case 8019:                    // '{' 'do'
      case 8275:                    // '{' 'export'
      case 8915:                    // '{' 'global'
      case 9427:                    // '{' 'import'
      case 9555:                    // '{' 'include'
      case 9683:                    // '{' 'local'
      case 9811:                    // '{' 'return'
      case 10195:                   // '{' 'throw'
      case 10323:                   // '{' 'try'
      case 10451:                   // '{' 'typeof'
        lookahead3W(29);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        break;
      }
      break;
    case 65:                        // 'f32'
    case 66:                        // 'f64'
    case 70:                        // 'i32'
    case 71:                        // 'i64'
      lookahead2W(0);               // Identifier | WhiteSpace^token
      switch (lk)
      {
      case 449:                     // 'f32' Identifier
      case 450:                     // 'f64' Identifier
      case 454:                     // 'i32' Identifier
      case 455:                     // 'i64' Identifier
        lookahead3W(45);            // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' |
                                    // '.' | '/' | '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' |
                                    // '>' | '>=' | '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' |
                                    // 'case' | 'catch' | 'continue' | 'default' | 'do' | 'else' | 'export' | 'f32' |
                                    // 'f64' | 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' |
                                    // 'include' | 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' |
                                    // 'while' | '{' | '|' | '|=' | '||' | '}' | '~'
        break;
      }
      break;
    default:
      lk = l1;
    }
    if (lk != 4                     // Null
     && lk != 5                     // True
     && lk != 6                     // False
     && lk != 7                     // Character
     && lk != 8                     // String
     && lk != 9                     // Integer
     && lk != 10                    // Complex
     && lk != 11                    // Real
     && lk != 12                    // Comment
     && lk != 15                    // '!'
     && lk != 23                    // '('
     && lk != 28                    // '+'
     && lk != 29                    // '++'
     && lk != 32                    // '-'
     && lk != 33                    // '--'
     && lk != 40                    // ';'
     && lk != 53                    // '['
     && lk != 57                    // 'break'
     && lk != 60                    // 'continue'
     && lk != 62                    // 'do'
     && lk != 64                    // 'export'
     && lk != 67                    // 'for'
     && lk != 68                    // 'foreach'
     && lk != 69                    // 'global'
     && lk != 72                    // 'if'
     && lk != 73                    // 'import'
     && lk != 74                    // 'include'
     && lk != 75                    // 'local'
     && lk != 76                    // 'return'
     && lk != 77                    // 'switch'
     && lk != 78                    // 'test'
     && lk != 79                    // 'throw'
     && lk != 80                    // 'try'
     && lk != 81                    // 'typeof'
     && lk != 82                    // 'while'
     && lk != 88                    // '~'
     && lk != 131                   // Identifier END
     && lk != 387                   // Identifier Identifier
     && lk != 515                   // Identifier Null
     && lk != 643                   // Identifier True
     && lk != 771                   // Identifier False
     && lk != 899                   // Identifier Character
     && lk != 1027                  // Identifier String
     && lk != 1155                  // Identifier Integer
     && lk != 1283                  // Identifier Complex
     && lk != 1411                  // Identifier Real
     && lk != 1539                  // Identifier Comment
     && lk != 1923                  // Identifier '!'
     && lk != 2051                  // Identifier '!='
     && lk != 2307                  // Identifier '%'
     && lk != 2435                  // Identifier '%='
     && lk != 2563                  // Identifier '&'
     && lk != 2691                  // Identifier '&&'
     && lk != 2819                  // Identifier '&='
     && lk != 3075                  // Identifier ')'
     && lk != 3203                  // Identifier '*'
     && lk != 3331                  // Identifier '**'
     && lk != 3459                  // Identifier '*='
     && lk != 3587                  // Identifier '+'
     && lk != 3715                  // Identifier '++'
     && lk != 3843                  // Identifier '+='
     && lk != 3971                  // Identifier ','
     && lk != 4051                  // '{' ','
     && lk != 4099                  // Identifier '-'
     && lk != 4227                  // Identifier '--'
     && lk != 4355                  // Identifier '-='
     && lk != 4611                  // Identifier '/'
     && lk != 4739                  // Identifier '/='
     && lk != 4867                  // Identifier ':'
     && lk != 4995                  // Identifier ':='
     && lk != 5123                  // Identifier ';'
     && lk != 5251                  // Identifier '<'
     && lk != 5379                  // Identifier '<<'
     && lk != 5507                  // Identifier '<<='
     && lk != 5635                  // Identifier '<='
     && lk != 5763                  // Identifier '='
     && lk != 5891                  // Identifier '=='
     && lk != 6019                  // Identifier '>'
     && lk != 6147                  // Identifier '>='
     && lk != 6275                  // Identifier '>>'
     && lk != 6403                  // Identifier '>>='
     && lk != 6531                  // Identifier '?'
     && lk != 6659                  // Identifier '?='
     && lk != 6787                  // Identifier '['
     && lk != 6915                  // Identifier ']'
     && lk != 7043                  // Identifier '^'
     && lk != 7171                  // Identifier '^='
     && lk != 7299                  // Identifier 'break'
     && lk != 7427                  // Identifier 'case'
     && lk != 7555                  // Identifier 'catch'
     && lk != 7683                  // Identifier 'continue'
     && lk != 7811                  // Identifier 'default'
     && lk != 7939                  // Identifier 'do'
     && lk != 8067                  // Identifier 'else'
     && lk != 8195                  // Identifier 'export'
     && lk != 8323                  // Identifier 'f32'
     && lk != 8451                  // Identifier 'f64'
     && lk != 8579                  // Identifier 'for'
     && lk != 8707                  // Identifier 'foreach'
     && lk != 8835                  // Identifier 'global'
     && lk != 8963                  // Identifier 'i32'
     && lk != 9091                  // Identifier 'i64'
     && lk != 9219                  // Identifier 'if'
     && lk != 9347                  // Identifier 'import'
     && lk != 9475                  // Identifier 'include'
     && lk != 9603                  // Identifier 'local'
     && lk != 9731                  // Identifier 'return'
     && lk != 9859                  // Identifier 'switch'
     && lk != 9987                  // Identifier 'test'
     && lk != 10115                 // Identifier 'throw'
     && lk != 10243                 // Identifier 'try'
     && lk != 10371                 // Identifier 'typeof'
     && lk != 10499                 // Identifier 'while'
     && lk != 10755                 // Identifier '|'
     && lk != 10883                 // Identifier '|='
     && lk != 11011                 // Identifier '||'
     && lk != 11139                 // Identifier '}'
     && lk != 11267                 // Identifier '~'
     && lk != 16833                 // 'f32' Identifier END
     && lk != 16834                 // 'f64' Identifier END
     && lk != 16838                 // 'i32' Identifier END
     && lk != 16839                 // 'i64' Identifier END
     && lk != 49601                 // 'f32' Identifier Identifier
     && lk != 49602                 // 'f64' Identifier Identifier
     && lk != 49606                 // 'i32' Identifier Identifier
     && lk != 49607                 // 'i64' Identifier Identifier
     && lk != 49619                 // '{' Identifier Identifier
     && lk != 49747                 // '{' Null Identifier
     && lk != 49875                 // '{' True Identifier
     && lk != 50003                 // '{' False Identifier
     && lk != 50131                 // '{' Character Identifier
     && lk != 50259                 // '{' String Identifier
     && lk != 50387                 // '{' Integer Identifier
     && lk != 50515                 // '{' Complex Identifier
     && lk != 50643                 // '{' Real Identifier
     && lk != 50771                 // '{' Comment Identifier
     && lk != 54355                 // '{' ';' Identifier
     && lk != 56531                 // '{' 'break' Identifier
     && lk != 56915                 // '{' 'continue' Identifier
     && lk != 65985                 // 'f32' Identifier Null
     && lk != 65986                 // 'f64' Identifier Null
     && lk != 65990                 // 'i32' Identifier Null
     && lk != 65991                 // 'i64' Identifier Null
     && lk != 66003                 // '{' Identifier Null
     && lk != 66131                 // '{' Null Null
     && lk != 66259                 // '{' True Null
     && lk != 66387                 // '{' False Null
     && lk != 66515                 // '{' Character Null
     && lk != 66643                 // '{' String Null
     && lk != 66771                 // '{' Integer Null
     && lk != 66899                 // '{' Complex Null
     && lk != 67027                 // '{' Real Null
     && lk != 67155                 // '{' Comment Null
     && lk != 70739                 // '{' ';' Null
     && lk != 72915                 // '{' 'break' Null
     && lk != 73299                 // '{' 'continue' Null
     && lk != 82369                 // 'f32' Identifier True
     && lk != 82370                 // 'f64' Identifier True
     && lk != 82374                 // 'i32' Identifier True
     && lk != 82375                 // 'i64' Identifier True
     && lk != 82387                 // '{' Identifier True
     && lk != 82515                 // '{' Null True
     && lk != 82643                 // '{' True True
     && lk != 82771                 // '{' False True
     && lk != 82899                 // '{' Character True
     && lk != 83027                 // '{' String True
     && lk != 83155                 // '{' Integer True
     && lk != 83283                 // '{' Complex True
     && lk != 83411                 // '{' Real True
     && lk != 83539                 // '{' Comment True
     && lk != 87123                 // '{' ';' True
     && lk != 89299                 // '{' 'break' True
     && lk != 89683                 // '{' 'continue' True
     && lk != 98753                 // 'f32' Identifier False
     && lk != 98754                 // 'f64' Identifier False
     && lk != 98758                 // 'i32' Identifier False
     && lk != 98759                 // 'i64' Identifier False
     && lk != 98771                 // '{' Identifier False
     && lk != 98899                 // '{' Null False
     && lk != 99027                 // '{' True False
     && lk != 99155                 // '{' False False
     && lk != 99283                 // '{' Character False
     && lk != 99411                 // '{' String False
     && lk != 99539                 // '{' Integer False
     && lk != 99667                 // '{' Complex False
     && lk != 99795                 // '{' Real False
     && lk != 99923                 // '{' Comment False
     && lk != 103507                // '{' ';' False
     && lk != 105683                // '{' 'break' False
     && lk != 106067                // '{' 'continue' False
     && lk != 115137                // 'f32' Identifier Character
     && lk != 115138                // 'f64' Identifier Character
     && lk != 115142                // 'i32' Identifier Character
     && lk != 115143                // 'i64' Identifier Character
     && lk != 115155                // '{' Identifier Character
     && lk != 115283                // '{' Null Character
     && lk != 115411                // '{' True Character
     && lk != 115539                // '{' False Character
     && lk != 115667                // '{' Character Character
     && lk != 115795                // '{' String Character
     && lk != 115923                // '{' Integer Character
     && lk != 116051                // '{' Complex Character
     && lk != 116179                // '{' Real Character
     && lk != 116307                // '{' Comment Character
     && lk != 119891                // '{' ';' Character
     && lk != 122067                // '{' 'break' Character
     && lk != 122451                // '{' 'continue' Character
     && lk != 131521                // 'f32' Identifier String
     && lk != 131522                // 'f64' Identifier String
     && lk != 131526                // 'i32' Identifier String
     && lk != 131527                // 'i64' Identifier String
     && lk != 131539                // '{' Identifier String
     && lk != 131667                // '{' Null String
     && lk != 131795                // '{' True String
     && lk != 131923                // '{' False String
     && lk != 132051                // '{' Character String
     && lk != 132179                // '{' String String
     && lk != 132307                // '{' Integer String
     && lk != 132435                // '{' Complex String
     && lk != 132563                // '{' Real String
     && lk != 132691                // '{' Comment String
     && lk != 136275                // '{' ';' String
     && lk != 138451                // '{' 'break' String
     && lk != 138835                // '{' 'continue' String
     && lk != 147905                // 'f32' Identifier Integer
     && lk != 147906                // 'f64' Identifier Integer
     && lk != 147910                // 'i32' Identifier Integer
     && lk != 147911                // 'i64' Identifier Integer
     && lk != 147923                // '{' Identifier Integer
     && lk != 148051                // '{' Null Integer
     && lk != 148179                // '{' True Integer
     && lk != 148307                // '{' False Integer
     && lk != 148435                // '{' Character Integer
     && lk != 148563                // '{' String Integer
     && lk != 148691                // '{' Integer Integer
     && lk != 148819                // '{' Complex Integer
     && lk != 148947                // '{' Real Integer
     && lk != 149075                // '{' Comment Integer
     && lk != 152659                // '{' ';' Integer
     && lk != 154835                // '{' 'break' Integer
     && lk != 155219                // '{' 'continue' Integer
     && lk != 164289                // 'f32' Identifier Complex
     && lk != 164290                // 'f64' Identifier Complex
     && lk != 164294                // 'i32' Identifier Complex
     && lk != 164295                // 'i64' Identifier Complex
     && lk != 164307                // '{' Identifier Complex
     && lk != 164435                // '{' Null Complex
     && lk != 164563                // '{' True Complex
     && lk != 164691                // '{' False Complex
     && lk != 164819                // '{' Character Complex
     && lk != 164947                // '{' String Complex
     && lk != 165075                // '{' Integer Complex
     && lk != 165203                // '{' Complex Complex
     && lk != 165331                // '{' Real Complex
     && lk != 165459                // '{' Comment Complex
     && lk != 169043                // '{' ';' Complex
     && lk != 171219                // '{' 'break' Complex
     && lk != 171603                // '{' 'continue' Complex
     && lk != 180673                // 'f32' Identifier Real
     && lk != 180674                // 'f64' Identifier Real
     && lk != 180678                // 'i32' Identifier Real
     && lk != 180679                // 'i64' Identifier Real
     && lk != 180691                // '{' Identifier Real
     && lk != 180819                // '{' Null Real
     && lk != 180947                // '{' True Real
     && lk != 181075                // '{' False Real
     && lk != 181203                // '{' Character Real
     && lk != 181331                // '{' String Real
     && lk != 181459                // '{' Integer Real
     && lk != 181587                // '{' Complex Real
     && lk != 181715                // '{' Real Real
     && lk != 181843                // '{' Comment Real
     && lk != 185427                // '{' ';' Real
     && lk != 187603                // '{' 'break' Real
     && lk != 187987                // '{' 'continue' Real
     && lk != 197057                // 'f32' Identifier Comment
     && lk != 197058                // 'f64' Identifier Comment
     && lk != 197062                // 'i32' Identifier Comment
     && lk != 197063                // 'i64' Identifier Comment
     && lk != 197075                // '{' Identifier Comment
     && lk != 197203                // '{' Null Comment
     && lk != 197331                // '{' True Comment
     && lk != 197459                // '{' False Comment
     && lk != 197587                // '{' Character Comment
     && lk != 197715                // '{' String Comment
     && lk != 197843                // '{' Integer Comment
     && lk != 197971                // '{' Complex Comment
     && lk != 198099                // '{' Real Comment
     && lk != 198227                // '{' Comment Comment
     && lk != 201811                // '{' ';' Comment
     && lk != 203987                // '{' 'break' Comment
     && lk != 204371                // '{' 'continue' Comment
     && lk != 246209                // 'f32' Identifier '!'
     && lk != 246210                // 'f64' Identifier '!'
     && lk != 246214                // 'i32' Identifier '!'
     && lk != 246215                // 'i64' Identifier '!'
     && lk != 246227                // '{' Identifier '!'
     && lk != 246355                // '{' Null '!'
     && lk != 246483                // '{' True '!'
     && lk != 246611                // '{' False '!'
     && lk != 246739                // '{' Character '!'
     && lk != 246867                // '{' String '!'
     && lk != 246995                // '{' Integer '!'
     && lk != 247123                // '{' Complex '!'
     && lk != 247251                // '{' Real '!'
     && lk != 247379                // '{' Comment '!'
     && lk != 250963                // '{' ';' '!'
     && lk != 253139                // '{' 'break' '!'
     && lk != 253523                // '{' 'continue' '!'
     && lk != 262593                // 'f32' Identifier '!='
     && lk != 262594                // 'f64' Identifier '!='
     && lk != 262598                // 'i32' Identifier '!='
     && lk != 262599                // 'i64' Identifier '!='
     && lk != 273363                // '{' '}' '!='
     && lk != 295361                // 'f32' Identifier '%'
     && lk != 295362                // 'f64' Identifier '%'
     && lk != 295366                // 'i32' Identifier '%'
     && lk != 295367                // 'i64' Identifier '%'
     && lk != 306131                // '{' '}' '%'
     && lk != 311745                // 'f32' Identifier '%='
     && lk != 311746                // 'f64' Identifier '%='
     && lk != 311750                // 'i32' Identifier '%='
     && lk != 311751                // 'i64' Identifier '%='
     && lk != 322515                // '{' '}' '%='
     && lk != 328129                // 'f32' Identifier '&'
     && lk != 328130                // 'f64' Identifier '&'
     && lk != 328134                // 'i32' Identifier '&'
     && lk != 328135                // 'i64' Identifier '&'
     && lk != 338899                // '{' '}' '&'
     && lk != 344513                // 'f32' Identifier '&&'
     && lk != 344514                // 'f64' Identifier '&&'
     && lk != 344518                // 'i32' Identifier '&&'
     && lk != 344519                // 'i64' Identifier '&&'
     && lk != 355283                // '{' '}' '&&'
     && lk != 360897                // 'f32' Identifier '&='
     && lk != 360898                // 'f64' Identifier '&='
     && lk != 360902                // 'i32' Identifier '&='
     && lk != 360903                // 'i64' Identifier '&='
     && lk != 371667                // '{' '}' '&='
     && lk != 377427                // '{' Null '('
     && lk != 377555                // '{' True '('
     && lk != 377683                // '{' False '('
     && lk != 377811                // '{' Character '('
     && lk != 377939                // '{' String '('
     && lk != 378067                // '{' Integer '('
     && lk != 378195                // '{' Complex '('
     && lk != 378323                // '{' Real '('
     && lk != 378451                // '{' Comment '('
     && lk != 382035                // '{' ';' '('
     && lk != 384211                // '{' 'break' '('
     && lk != 384595                // '{' 'continue' '('
     && lk != 393665                // 'f32' Identifier ')'
     && lk != 393666                // 'f64' Identifier ')'
     && lk != 393670                // 'i32' Identifier ')'
     && lk != 393671                // 'i64' Identifier ')'
     && lk != 410049                // 'f32' Identifier '*'
     && lk != 410050                // 'f64' Identifier '*'
     && lk != 410054                // 'i32' Identifier '*'
     && lk != 410055                // 'i64' Identifier '*'
     && lk != 420819                // '{' '}' '*'
     && lk != 426433                // 'f32' Identifier '**'
     && lk != 426434                // 'f64' Identifier '**'
     && lk != 426438                // 'i32' Identifier '**'
     && lk != 426439                // 'i64' Identifier '**'
     && lk != 437203                // '{' '}' '**'
     && lk != 442817                // 'f32' Identifier '*='
     && lk != 442818                // 'f64' Identifier '*='
     && lk != 442822                // 'i32' Identifier '*='
     && lk != 442823                // 'i64' Identifier '*='
     && lk != 453587                // '{' '}' '*='
     && lk != 459201                // 'f32' Identifier '+'
     && lk != 459202                // 'f64' Identifier '+'
     && lk != 459206                // 'i32' Identifier '+'
     && lk != 459207                // 'i64' Identifier '+'
     && lk != 460371                // '{' Comment '+'
     && lk != 463955                // '{' ';' '+'
     && lk != 466131                // '{' 'break' '+'
     && lk != 466515                // '{' 'continue' '+'
     && lk != 475585                // 'f32' Identifier '++'
     && lk != 475586                // 'f64' Identifier '++'
     && lk != 475590                // 'i32' Identifier '++'
     && lk != 475591                // 'i64' Identifier '++'
     && lk != 476755                // '{' Comment '++'
     && lk != 480339                // '{' ';' '++'
     && lk != 482515                // '{' 'break' '++'
     && lk != 482899                // '{' 'continue' '++'
     && lk != 491969                // 'f32' Identifier '+='
     && lk != 491970                // 'f64' Identifier '+='
     && lk != 491974                // 'i32' Identifier '+='
     && lk != 491975                // 'i64' Identifier '+='
     && lk != 502739                // '{' '}' '+='
     && lk != 508353                // 'f32' Identifier ','
     && lk != 508354                // 'f64' Identifier ','
     && lk != 508358                // 'i32' Identifier ','
     && lk != 508359                // 'i64' Identifier ','
     && lk != 508371                // '{' Identifier ','
     && lk != 508499                // '{' Null ','
     && lk != 508627                // '{' True ','
     && lk != 508755                // '{' False ','
     && lk != 508883                // '{' Character ','
     && lk != 509011                // '{' String ','
     && lk != 509139                // '{' Integer ','
     && lk != 509267                // '{' Complex ','
     && lk != 509395                // '{' Real ','
     && lk != 509523                // '{' Comment ','
     && lk != 513107                // '{' ';' ','
     && lk != 515283                // '{' 'break' ','
     && lk != 515667                // '{' 'continue' ','
     && lk != 518531                // Identifier '{' ','
     && lk != 524737                // 'f32' Identifier '-'
     && lk != 524738                // 'f64' Identifier '-'
     && lk != 524742                // 'i32' Identifier '-'
     && lk != 524743                // 'i64' Identifier '-'
     && lk != 525907                // '{' Comment '-'
     && lk != 529491                // '{' ';' '-'
     && lk != 531667                // '{' 'break' '-'
     && lk != 532051                // '{' 'continue' '-'
     && lk != 541121                // 'f32' Identifier '--'
     && lk != 541122                // 'f64' Identifier '--'
     && lk != 541126                // 'i32' Identifier '--'
     && lk != 541127                // 'i64' Identifier '--'
     && lk != 542291                // '{' Comment '--'
     && lk != 545875                // '{' ';' '--'
     && lk != 548051                // '{' 'break' '--'
     && lk != 548435                // '{' 'continue' '--'
     && lk != 557505                // 'f32' Identifier '-='
     && lk != 557506                // 'f64' Identifier '-='
     && lk != 557510                // 'i32' Identifier '-='
     && lk != 557511                // 'i64' Identifier '-='
     && lk != 568275                // '{' '}' '-='
     && lk != 590273                // 'f32' Identifier '/'
     && lk != 590274                // 'f64' Identifier '/'
     && lk != 590278                // 'i32' Identifier '/'
     && lk != 590279                // 'i64' Identifier '/'
     && lk != 601043                // '{' '}' '/'
     && lk != 606657                // 'f32' Identifier '/='
     && lk != 606658                // 'f64' Identifier '/='
     && lk != 606662                // 'i32' Identifier '/='
     && lk != 606663                // 'i64' Identifier '/='
     && lk != 617427                // '{' '}' '/='
     && lk != 623041                // 'f32' Identifier ':'
     && lk != 623042                // 'f64' Identifier ':'
     && lk != 623046                // 'i32' Identifier ':'
     && lk != 623047                // 'i64' Identifier ':'
     && lk != 623059                // '{' Identifier ':'
     && lk != 623699                // '{' String ':'
     && lk != 639425                // 'f32' Identifier ':='
     && lk != 639426                // 'f64' Identifier ':='
     && lk != 639430                // 'i32' Identifier ':='
     && lk != 639431                // 'i64' Identifier ':='
     && lk != 650195                // '{' '}' ':='
     && lk != 655809                // 'f32' Identifier ';'
     && lk != 655810                // 'f64' Identifier ';'
     && lk != 655814                // 'i32' Identifier ';'
     && lk != 655815                // 'i64' Identifier ';'
     && lk != 655827                // '{' Identifier ';'
     && lk != 655955                // '{' Null ';'
     && lk != 656083                // '{' True ';'
     && lk != 656211                // '{' False ';'
     && lk != 656339                // '{' Character ';'
     && lk != 656467                // '{' String ';'
     && lk != 656595                // '{' Integer ';'
     && lk != 656723                // '{' Complex ';'
     && lk != 656851                // '{' Real ';'
     && lk != 656979                // '{' Comment ';'
     && lk != 660563                // '{' ';' ';'
     && lk != 662739                // '{' 'break' ';'
     && lk != 663123                // '{' 'continue' ';'
     && lk != 672193                // 'f32' Identifier '<'
     && lk != 672194                // 'f64' Identifier '<'
     && lk != 672198                // 'i32' Identifier '<'
     && lk != 672199                // 'i64' Identifier '<'
     && lk != 682963                // '{' '}' '<'
     && lk != 688577                // 'f32' Identifier '<<'
     && lk != 688578                // 'f64' Identifier '<<'
     && lk != 688582                // 'i32' Identifier '<<'
     && lk != 688583                // 'i64' Identifier '<<'
     && lk != 699347                // '{' '}' '<<'
     && lk != 704961                // 'f32' Identifier '<<='
     && lk != 704962                // 'f64' Identifier '<<='
     && lk != 704966                // 'i32' Identifier '<<='
     && lk != 704967                // 'i64' Identifier '<<='
     && lk != 715731                // '{' '}' '<<='
     && lk != 721345                // 'f32' Identifier '<='
     && lk != 721346                // 'f64' Identifier '<='
     && lk != 721350                // 'i32' Identifier '<='
     && lk != 721351                // 'i64' Identifier '<='
     && lk != 732115                // '{' '}' '<='
     && lk != 737729                // 'f32' Identifier '='
     && lk != 737730                // 'f64' Identifier '='
     && lk != 737734                // 'i32' Identifier '='
     && lk != 737735                // 'i64' Identifier '='
     && lk != 748499                // '{' '}' '='
     && lk != 754113                // 'f32' Identifier '=='
     && lk != 754114                // 'f64' Identifier '=='
     && lk != 754118                // 'i32' Identifier '=='
     && lk != 754119                // 'i64' Identifier '=='
     && lk != 764883                // '{' '}' '=='
     && lk != 770497                // 'f32' Identifier '>'
     && lk != 770498                // 'f64' Identifier '>'
     && lk != 770502                // 'i32' Identifier '>'
     && lk != 770503                // 'i64' Identifier '>'
     && lk != 781267                // '{' '}' '>'
     && lk != 786881                // 'f32' Identifier '>='
     && lk != 786882                // 'f64' Identifier '>='
     && lk != 786886                // 'i32' Identifier '>='
     && lk != 786887                // 'i64' Identifier '>='
     && lk != 797651                // '{' '}' '>='
     && lk != 803265                // 'f32' Identifier '>>'
     && lk != 803266                // 'f64' Identifier '>>'
     && lk != 803270                // 'i32' Identifier '>>'
     && lk != 803271                // 'i64' Identifier '>>'
     && lk != 814035                // '{' '}' '>>'
     && lk != 819649                // 'f32' Identifier '>>='
     && lk != 819650                // 'f64' Identifier '>>='
     && lk != 819654                // 'i32' Identifier '>>='
     && lk != 819655                // 'i64' Identifier '>>='
     && lk != 830419                // '{' '}' '>>='
     && lk != 836033                // 'f32' Identifier '?'
     && lk != 836034                // 'f64' Identifier '?'
     && lk != 836038                // 'i32' Identifier '?'
     && lk != 836039                // 'i64' Identifier '?'
     && lk != 846803                // '{' '}' '?'
     && lk != 852417                // 'f32' Identifier '?='
     && lk != 852418                // 'f64' Identifier '?='
     && lk != 852422                // 'i32' Identifier '?='
     && lk != 852423                // 'i64' Identifier '?='
     && lk != 863187                // '{' '}' '?='
     && lk != 868801                // 'f32' Identifier '['
     && lk != 868802                // 'f64' Identifier '['
     && lk != 868806                // 'i32' Identifier '['
     && lk != 868807                // 'i64' Identifier '['
     && lk != 868947                // '{' Null '['
     && lk != 869075                // '{' True '['
     && lk != 869203                // '{' False '['
     && lk != 869331                // '{' Character '['
     && lk != 869459                // '{' String '['
     && lk != 869587                // '{' Integer '['
     && lk != 869715                // '{' Complex '['
     && lk != 869843                // '{' Real '['
     && lk != 869971                // '{' Comment '['
     && lk != 873555                // '{' ';' '['
     && lk != 875731                // '{' 'break' '['
     && lk != 876115                // '{' 'continue' '['
     && lk != 885185                // 'f32' Identifier ']'
     && lk != 885186                // 'f64' Identifier ']'
     && lk != 885190                // 'i32' Identifier ']'
     && lk != 885191                // 'i64' Identifier ']'
     && lk != 901569                // 'f32' Identifier '^'
     && lk != 901570                // 'f64' Identifier '^'
     && lk != 901574                // 'i32' Identifier '^'
     && lk != 901575                // 'i64' Identifier '^'
     && lk != 912339                // '{' '}' '^'
     && lk != 917953                // 'f32' Identifier '^='
     && lk != 917954                // 'f64' Identifier '^='
     && lk != 917958                // 'i32' Identifier '^='
     && lk != 917959                // 'i64' Identifier '^='
     && lk != 928723                // '{' '}' '^='
     && lk != 934337                // 'f32' Identifier 'break'
     && lk != 934338                // 'f64' Identifier 'break'
     && lk != 934342                // 'i32' Identifier 'break'
     && lk != 934343                // 'i64' Identifier 'break'
     && lk != 934355                // '{' Identifier 'break'
     && lk != 934483                // '{' Null 'break'
     && lk != 934611                // '{' True 'break'
     && lk != 934739                // '{' False 'break'
     && lk != 934867                // '{' Character 'break'
     && lk != 934995                // '{' String 'break'
     && lk != 935123                // '{' Integer 'break'
     && lk != 935251                // '{' Complex 'break'
     && lk != 935379                // '{' Real 'break'
     && lk != 935507                // '{' Comment 'break'
     && lk != 939091                // '{' ';' 'break'
     && lk != 941267                // '{' 'break' 'break'
     && lk != 941651                // '{' 'continue' 'break'
     && lk != 950721                // 'f32' Identifier 'case'
     && lk != 950722                // 'f64' Identifier 'case'
     && lk != 950726                // 'i32' Identifier 'case'
     && lk != 950727                // 'i64' Identifier 'case'
     && lk != 967105                // 'f32' Identifier 'catch'
     && lk != 967106                // 'f64' Identifier 'catch'
     && lk != 967110                // 'i32' Identifier 'catch'
     && lk != 967111                // 'i64' Identifier 'catch'
     && lk != 983489                // 'f32' Identifier 'continue'
     && lk != 983490                // 'f64' Identifier 'continue'
     && lk != 983494                // 'i32' Identifier 'continue'
     && lk != 983495                // 'i64' Identifier 'continue'
     && lk != 983507                // '{' Identifier 'continue'
     && lk != 983635                // '{' Null 'continue'
     && lk != 983763                // '{' True 'continue'
     && lk != 983891                // '{' False 'continue'
     && lk != 984019                // '{' Character 'continue'
     && lk != 984147                // '{' String 'continue'
     && lk != 984275                // '{' Integer 'continue'
     && lk != 984403                // '{' Complex 'continue'
     && lk != 984531                // '{' Real 'continue'
     && lk != 984659                // '{' Comment 'continue'
     && lk != 988243                // '{' ';' 'continue'
     && lk != 990419                // '{' 'break' 'continue'
     && lk != 990803                // '{' 'continue' 'continue'
     && lk != 999873                // 'f32' Identifier 'default'
     && lk != 999874                // 'f64' Identifier 'default'
     && lk != 999878                // 'i32' Identifier 'default'
     && lk != 999879                // 'i64' Identifier 'default'
     && lk != 1016257               // 'f32' Identifier 'do'
     && lk != 1016258               // 'f64' Identifier 'do'
     && lk != 1016262               // 'i32' Identifier 'do'
     && lk != 1016263               // 'i64' Identifier 'do'
     && lk != 1016275               // '{' Identifier 'do'
     && lk != 1016403               // '{' Null 'do'
     && lk != 1016531               // '{' True 'do'
     && lk != 1016659               // '{' False 'do'
     && lk != 1016787               // '{' Character 'do'
     && lk != 1016915               // '{' String 'do'
     && lk != 1017043               // '{' Integer 'do'
     && lk != 1017171               // '{' Complex 'do'
     && lk != 1017299               // '{' Real 'do'
     && lk != 1017427               // '{' Comment 'do'
     && lk != 1021011               // '{' ';' 'do'
     && lk != 1023187               // '{' 'break' 'do'
     && lk != 1023571               // '{' 'continue' 'do'
     && lk != 1032641               // 'f32' Identifier 'else'
     && lk != 1032642               // 'f64' Identifier 'else'
     && lk != 1032646               // 'i32' Identifier 'else'
     && lk != 1032647               // 'i64' Identifier 'else'
     && lk != 1049025               // 'f32' Identifier 'export'
     && lk != 1049026               // 'f64' Identifier 'export'
     && lk != 1049030               // 'i32' Identifier 'export'
     && lk != 1049031               // 'i64' Identifier 'export'
     && lk != 1049043               // '{' Identifier 'export'
     && lk != 1049171               // '{' Null 'export'
     && lk != 1049299               // '{' True 'export'
     && lk != 1049427               // '{' False 'export'
     && lk != 1049555               // '{' Character 'export'
     && lk != 1049683               // '{' String 'export'
     && lk != 1049811               // '{' Integer 'export'
     && lk != 1049939               // '{' Complex 'export'
     && lk != 1050067               // '{' Real 'export'
     && lk != 1050195               // '{' Comment 'export'
     && lk != 1053779               // '{' ';' 'export'
     && lk != 1055955               // '{' 'break' 'export'
     && lk != 1056339               // '{' 'continue' 'export'
     && lk != 1065409               // 'f32' Identifier 'f32'
     && lk != 1065410               // 'f64' Identifier 'f32'
     && lk != 1065414               // 'i32' Identifier 'f32'
     && lk != 1065415               // 'i64' Identifier 'f32'
     && lk != 1065427               // '{' Identifier 'f32'
     && lk != 1065555               // '{' Null 'f32'
     && lk != 1065683               // '{' True 'f32'
     && lk != 1065811               // '{' False 'f32'
     && lk != 1065939               // '{' Character 'f32'
     && lk != 1066067               // '{' String 'f32'
     && lk != 1066195               // '{' Integer 'f32'
     && lk != 1066323               // '{' Complex 'f32'
     && lk != 1066451               // '{' Real 'f32'
     && lk != 1066579               // '{' Comment 'f32'
     && lk != 1070163               // '{' ';' 'f32'
     && lk != 1072339               // '{' 'break' 'f32'
     && lk != 1072723               // '{' 'continue' 'f32'
     && lk != 1081793               // 'f32' Identifier 'f64'
     && lk != 1081794               // 'f64' Identifier 'f64'
     && lk != 1081798               // 'i32' Identifier 'f64'
     && lk != 1081799               // 'i64' Identifier 'f64'
     && lk != 1081811               // '{' Identifier 'f64'
     && lk != 1081939               // '{' Null 'f64'
     && lk != 1082067               // '{' True 'f64'
     && lk != 1082195               // '{' False 'f64'
     && lk != 1082323               // '{' Character 'f64'
     && lk != 1082451               // '{' String 'f64'
     && lk != 1082579               // '{' Integer 'f64'
     && lk != 1082707               // '{' Complex 'f64'
     && lk != 1082835               // '{' Real 'f64'
     && lk != 1082963               // '{' Comment 'f64'
     && lk != 1086547               // '{' ';' 'f64'
     && lk != 1088723               // '{' 'break' 'f64'
     && lk != 1089107               // '{' 'continue' 'f64'
     && lk != 1098177               // 'f32' Identifier 'for'
     && lk != 1098178               // 'f64' Identifier 'for'
     && lk != 1098182               // 'i32' Identifier 'for'
     && lk != 1098183               // 'i64' Identifier 'for'
     && lk != 1098195               // '{' Identifier 'for'
     && lk != 1098323               // '{' Null 'for'
     && lk != 1098451               // '{' True 'for'
     && lk != 1098579               // '{' False 'for'
     && lk != 1098707               // '{' Character 'for'
     && lk != 1098835               // '{' String 'for'
     && lk != 1098963               // '{' Integer 'for'
     && lk != 1099091               // '{' Complex 'for'
     && lk != 1099219               // '{' Real 'for'
     && lk != 1099347               // '{' Comment 'for'
     && lk != 1102931               // '{' ';' 'for'
     && lk != 1105107               // '{' 'break' 'for'
     && lk != 1105491               // '{' 'continue' 'for'
     && lk != 1114561               // 'f32' Identifier 'foreach'
     && lk != 1114562               // 'f64' Identifier 'foreach'
     && lk != 1114566               // 'i32' Identifier 'foreach'
     && lk != 1114567               // 'i64' Identifier 'foreach'
     && lk != 1114579               // '{' Identifier 'foreach'
     && lk != 1114707               // '{' Null 'foreach'
     && lk != 1114835               // '{' True 'foreach'
     && lk != 1114963               // '{' False 'foreach'
     && lk != 1115091               // '{' Character 'foreach'
     && lk != 1115219               // '{' String 'foreach'
     && lk != 1115347               // '{' Integer 'foreach'
     && lk != 1115475               // '{' Complex 'foreach'
     && lk != 1115603               // '{' Real 'foreach'
     && lk != 1115731               // '{' Comment 'foreach'
     && lk != 1119315               // '{' ';' 'foreach'
     && lk != 1121491               // '{' 'break' 'foreach'
     && lk != 1121875               // '{' 'continue' 'foreach'
     && lk != 1130945               // 'f32' Identifier 'global'
     && lk != 1130946               // 'f64' Identifier 'global'
     && lk != 1130950               // 'i32' Identifier 'global'
     && lk != 1130951               // 'i64' Identifier 'global'
     && lk != 1130963               // '{' Identifier 'global'
     && lk != 1131091               // '{' Null 'global'
     && lk != 1131219               // '{' True 'global'
     && lk != 1131347               // '{' False 'global'
     && lk != 1131475               // '{' Character 'global'
     && lk != 1131603               // '{' String 'global'
     && lk != 1131731               // '{' Integer 'global'
     && lk != 1131859               // '{' Complex 'global'
     && lk != 1131987               // '{' Real 'global'
     && lk != 1132115               // '{' Comment 'global'
     && lk != 1135699               // '{' ';' 'global'
     && lk != 1137875               // '{' 'break' 'global'
     && lk != 1138259               // '{' 'continue' 'global'
     && lk != 1147329               // 'f32' Identifier 'i32'
     && lk != 1147330               // 'f64' Identifier 'i32'
     && lk != 1147334               // 'i32' Identifier 'i32'
     && lk != 1147335               // 'i64' Identifier 'i32'
     && lk != 1147347               // '{' Identifier 'i32'
     && lk != 1147475               // '{' Null 'i32'
     && lk != 1147603               // '{' True 'i32'
     && lk != 1147731               // '{' False 'i32'
     && lk != 1147859               // '{' Character 'i32'
     && lk != 1147987               // '{' String 'i32'
     && lk != 1148115               // '{' Integer 'i32'
     && lk != 1148243               // '{' Complex 'i32'
     && lk != 1148371               // '{' Real 'i32'
     && lk != 1148499               // '{' Comment 'i32'
     && lk != 1152083               // '{' ';' 'i32'
     && lk != 1154259               // '{' 'break' 'i32'
     && lk != 1154643               // '{' 'continue' 'i32'
     && lk != 1163713               // 'f32' Identifier 'i64'
     && lk != 1163714               // 'f64' Identifier 'i64'
     && lk != 1163718               // 'i32' Identifier 'i64'
     && lk != 1163719               // 'i64' Identifier 'i64'
     && lk != 1163731               // '{' Identifier 'i64'
     && lk != 1163859               // '{' Null 'i64'
     && lk != 1163987               // '{' True 'i64'
     && lk != 1164115               // '{' False 'i64'
     && lk != 1164243               // '{' Character 'i64'
     && lk != 1164371               // '{' String 'i64'
     && lk != 1164499               // '{' Integer 'i64'
     && lk != 1164627               // '{' Complex 'i64'
     && lk != 1164755               // '{' Real 'i64'
     && lk != 1164883               // '{' Comment 'i64'
     && lk != 1168467               // '{' ';' 'i64'
     && lk != 1170643               // '{' 'break' 'i64'
     && lk != 1171027               // '{' 'continue' 'i64'
     && lk != 1180097               // 'f32' Identifier 'if'
     && lk != 1180098               // 'f64' Identifier 'if'
     && lk != 1180102               // 'i32' Identifier 'if'
     && lk != 1180103               // 'i64' Identifier 'if'
     && lk != 1180115               // '{' Identifier 'if'
     && lk != 1180243               // '{' Null 'if'
     && lk != 1180371               // '{' True 'if'
     && lk != 1180499               // '{' False 'if'
     && lk != 1180627               // '{' Character 'if'
     && lk != 1180755               // '{' String 'if'
     && lk != 1180883               // '{' Integer 'if'
     && lk != 1181011               // '{' Complex 'if'
     && lk != 1181139               // '{' Real 'if'
     && lk != 1181267               // '{' Comment 'if'
     && lk != 1184851               // '{' ';' 'if'
     && lk != 1187027               // '{' 'break' 'if'
     && lk != 1187411               // '{' 'continue' 'if'
     && lk != 1196481               // 'f32' Identifier 'import'
     && lk != 1196482               // 'f64' Identifier 'import'
     && lk != 1196486               // 'i32' Identifier 'import'
     && lk != 1196487               // 'i64' Identifier 'import'
     && lk != 1196499               // '{' Identifier 'import'
     && lk != 1196627               // '{' Null 'import'
     && lk != 1196755               // '{' True 'import'
     && lk != 1196883               // '{' False 'import'
     && lk != 1197011               // '{' Character 'import'
     && lk != 1197139               // '{' String 'import'
     && lk != 1197267               // '{' Integer 'import'
     && lk != 1197395               // '{' Complex 'import'
     && lk != 1197523               // '{' Real 'import'
     && lk != 1197651               // '{' Comment 'import'
     && lk != 1201235               // '{' ';' 'import'
     && lk != 1203411               // '{' 'break' 'import'
     && lk != 1203795               // '{' 'continue' 'import'
     && lk != 1212865               // 'f32' Identifier 'include'
     && lk != 1212866               // 'f64' Identifier 'include'
     && lk != 1212870               // 'i32' Identifier 'include'
     && lk != 1212871               // 'i64' Identifier 'include'
     && lk != 1212883               // '{' Identifier 'include'
     && lk != 1213011               // '{' Null 'include'
     && lk != 1213139               // '{' True 'include'
     && lk != 1213267               // '{' False 'include'
     && lk != 1213395               // '{' Character 'include'
     && lk != 1213523               // '{' String 'include'
     && lk != 1213651               // '{' Integer 'include'
     && lk != 1213779               // '{' Complex 'include'
     && lk != 1213907               // '{' Real 'include'
     && lk != 1214035               // '{' Comment 'include'
     && lk != 1217619               // '{' ';' 'include'
     && lk != 1219795               // '{' 'break' 'include'
     && lk != 1220179               // '{' 'continue' 'include'
     && lk != 1229249               // 'f32' Identifier 'local'
     && lk != 1229250               // 'f64' Identifier 'local'
     && lk != 1229254               // 'i32' Identifier 'local'
     && lk != 1229255               // 'i64' Identifier 'local'
     && lk != 1229267               // '{' Identifier 'local'
     && lk != 1229395               // '{' Null 'local'
     && lk != 1229523               // '{' True 'local'
     && lk != 1229651               // '{' False 'local'
     && lk != 1229779               // '{' Character 'local'
     && lk != 1229907               // '{' String 'local'
     && lk != 1230035               // '{' Integer 'local'
     && lk != 1230163               // '{' Complex 'local'
     && lk != 1230291               // '{' Real 'local'
     && lk != 1230419               // '{' Comment 'local'
     && lk != 1234003               // '{' ';' 'local'
     && lk != 1236179               // '{' 'break' 'local'
     && lk != 1236563               // '{' 'continue' 'local'
     && lk != 1245633               // 'f32' Identifier 'return'
     && lk != 1245634               // 'f64' Identifier 'return'
     && lk != 1245638               // 'i32' Identifier 'return'
     && lk != 1245639               // 'i64' Identifier 'return'
     && lk != 1245651               // '{' Identifier 'return'
     && lk != 1245779               // '{' Null 'return'
     && lk != 1245907               // '{' True 'return'
     && lk != 1246035               // '{' False 'return'
     && lk != 1246163               // '{' Character 'return'
     && lk != 1246291               // '{' String 'return'
     && lk != 1246419               // '{' Integer 'return'
     && lk != 1246547               // '{' Complex 'return'
     && lk != 1246675               // '{' Real 'return'
     && lk != 1246803               // '{' Comment 'return'
     && lk != 1250387               // '{' ';' 'return'
     && lk != 1252563               // '{' 'break' 'return'
     && lk != 1252947               // '{' 'continue' 'return'
     && lk != 1262017               // 'f32' Identifier 'switch'
     && lk != 1262018               // 'f64' Identifier 'switch'
     && lk != 1262022               // 'i32' Identifier 'switch'
     && lk != 1262023               // 'i64' Identifier 'switch'
     && lk != 1262035               // '{' Identifier 'switch'
     && lk != 1262163               // '{' Null 'switch'
     && lk != 1262291               // '{' True 'switch'
     && lk != 1262419               // '{' False 'switch'
     && lk != 1262547               // '{' Character 'switch'
     && lk != 1262675               // '{' String 'switch'
     && lk != 1262803               // '{' Integer 'switch'
     && lk != 1262931               // '{' Complex 'switch'
     && lk != 1263059               // '{' Real 'switch'
     && lk != 1263187               // '{' Comment 'switch'
     && lk != 1266771               // '{' ';' 'switch'
     && lk != 1268947               // '{' 'break' 'switch'
     && lk != 1269331               // '{' 'continue' 'switch'
     && lk != 1278401               // 'f32' Identifier 'test'
     && lk != 1278402               // 'f64' Identifier 'test'
     && lk != 1278406               // 'i32' Identifier 'test'
     && lk != 1278407               // 'i64' Identifier 'test'
     && lk != 1278419               // '{' Identifier 'test'
     && lk != 1278547               // '{' Null 'test'
     && lk != 1278675               // '{' True 'test'
     && lk != 1278803               // '{' False 'test'
     && lk != 1278931               // '{' Character 'test'
     && lk != 1279059               // '{' String 'test'
     && lk != 1279187               // '{' Integer 'test'
     && lk != 1279315               // '{' Complex 'test'
     && lk != 1279443               // '{' Real 'test'
     && lk != 1279571               // '{' Comment 'test'
     && lk != 1283155               // '{' ';' 'test'
     && lk != 1285331               // '{' 'break' 'test'
     && lk != 1285715               // '{' 'continue' 'test'
     && lk != 1294785               // 'f32' Identifier 'throw'
     && lk != 1294786               // 'f64' Identifier 'throw'
     && lk != 1294790               // 'i32' Identifier 'throw'
     && lk != 1294791               // 'i64' Identifier 'throw'
     && lk != 1294803               // '{' Identifier 'throw'
     && lk != 1294931               // '{' Null 'throw'
     && lk != 1295059               // '{' True 'throw'
     && lk != 1295187               // '{' False 'throw'
     && lk != 1295315               // '{' Character 'throw'
     && lk != 1295443               // '{' String 'throw'
     && lk != 1295571               // '{' Integer 'throw'
     && lk != 1295699               // '{' Complex 'throw'
     && lk != 1295827               // '{' Real 'throw'
     && lk != 1295955               // '{' Comment 'throw'
     && lk != 1299539               // '{' ';' 'throw'
     && lk != 1301715               // '{' 'break' 'throw'
     && lk != 1302099               // '{' 'continue' 'throw'
     && lk != 1311169               // 'f32' Identifier 'try'
     && lk != 1311170               // 'f64' Identifier 'try'
     && lk != 1311174               // 'i32' Identifier 'try'
     && lk != 1311175               // 'i64' Identifier 'try'
     && lk != 1311187               // '{' Identifier 'try'
     && lk != 1311315               // '{' Null 'try'
     && lk != 1311443               // '{' True 'try'
     && lk != 1311571               // '{' False 'try'
     && lk != 1311699               // '{' Character 'try'
     && lk != 1311827               // '{' String 'try'
     && lk != 1311955               // '{' Integer 'try'
     && lk != 1312083               // '{' Complex 'try'
     && lk != 1312211               // '{' Real 'try'
     && lk != 1312339               // '{' Comment 'try'
     && lk != 1315923               // '{' ';' 'try'
     && lk != 1318099               // '{' 'break' 'try'
     && lk != 1318483               // '{' 'continue' 'try'
     && lk != 1327553               // 'f32' Identifier 'typeof'
     && lk != 1327554               // 'f64' Identifier 'typeof'
     && lk != 1327558               // 'i32' Identifier 'typeof'
     && lk != 1327559               // 'i64' Identifier 'typeof'
     && lk != 1327571               // '{' Identifier 'typeof'
     && lk != 1327699               // '{' Null 'typeof'
     && lk != 1327827               // '{' True 'typeof'
     && lk != 1327955               // '{' False 'typeof'
     && lk != 1328083               // '{' Character 'typeof'
     && lk != 1328211               // '{' String 'typeof'
     && lk != 1328339               // '{' Integer 'typeof'
     && lk != 1328467               // '{' Complex 'typeof'
     && lk != 1328595               // '{' Real 'typeof'
     && lk != 1328723               // '{' Comment 'typeof'
     && lk != 1332307               // '{' ';' 'typeof'
     && lk != 1334483               // '{' 'break' 'typeof'
     && lk != 1334867               // '{' 'continue' 'typeof'
     && lk != 1343937               // 'f32' Identifier 'while'
     && lk != 1343938               // 'f64' Identifier 'while'
     && lk != 1343942               // 'i32' Identifier 'while'
     && lk != 1343943               // 'i64' Identifier 'while'
     && lk != 1343955               // '{' Identifier 'while'
     && lk != 1344083               // '{' Null 'while'
     && lk != 1344211               // '{' True 'while'
     && lk != 1344339               // '{' False 'while'
     && lk != 1344467               // '{' Character 'while'
     && lk != 1344595               // '{' String 'while'
     && lk != 1344723               // '{' Integer 'while'
     && lk != 1344851               // '{' Complex 'while'
     && lk != 1344979               // '{' Real 'while'
     && lk != 1345107               // '{' Comment 'while'
     && lk != 1348691               // '{' ';' 'while'
     && lk != 1350867               // '{' 'break' 'while'
     && lk != 1351251               // '{' 'continue' 'while'
     && lk != 1360321               // 'f32' Identifier '{'
     && lk != 1360322               // 'f64' Identifier '{'
     && lk != 1360326               // 'i32' Identifier '{'
     && lk != 1360327               // 'i64' Identifier '{'
     && lk != 1360467               // '{' Null '{'
     && lk != 1360595               // '{' True '{'
     && lk != 1360723               // '{' False '{'
     && lk != 1360851               // '{' Character '{'
     && lk != 1360979               // '{' String '{'
     && lk != 1361107               // '{' Integer '{'
     && lk != 1361235               // '{' Complex '{'
     && lk != 1361363               // '{' Real '{'
     && lk != 1361491               // '{' Comment '{'
     && lk != 1365075               // '{' ';' '{'
     && lk != 1367251               // '{' 'break' '{'
     && lk != 1367635               // '{' 'continue' '{'
     && lk != 1376705               // 'f32' Identifier '|'
     && lk != 1376706               // 'f64' Identifier '|'
     && lk != 1376710               // 'i32' Identifier '|'
     && lk != 1376711               // 'i64' Identifier '|'
     && lk != 1387475               // '{' '}' '|'
     && lk != 1393089               // 'f32' Identifier '|='
     && lk != 1393090               // 'f64' Identifier '|='
     && lk != 1393094               // 'i32' Identifier '|='
     && lk != 1393095               // 'i64' Identifier '|='
     && lk != 1403859               // '{' '}' '|='
     && lk != 1409473               // 'f32' Identifier '||'
     && lk != 1409474               // 'f64' Identifier '||'
     && lk != 1409478               // 'i32' Identifier '||'
     && lk != 1409479               // 'i64' Identifier '||'
     && lk != 1420243               // '{' '}' '||'
     && lk != 1425857               // 'f32' Identifier '}'
     && lk != 1425858               // 'f64' Identifier '}'
     && lk != 1425862               // 'i32' Identifier '}'
     && lk != 1425863               // 'i64' Identifier '}'
     && lk != 1442241               // 'f32' Identifier '~'
     && lk != 1442242               // 'f64' Identifier '~'
     && lk != 1442246               // 'i32' Identifier '~'
     && lk != 1442247               // 'i64' Identifier '~'
     && lk != 1442259               // '{' Identifier '~'
     && lk != 1442387               // '{' Null '~'
     && lk != 1442515               // '{' True '~'
     && lk != 1442643               // '{' False '~'
     && lk != 1442771               // '{' Character '~'
     && lk != 1442899               // '{' String '~'
     && lk != 1443027               // '{' Integer '~'
     && lk != 1443155               // '{' Complex '~'
     && lk != 1443283               // '{' Real '~'
     && lk != 1443411               // '{' Comment '~'
     && lk != 1446995               // '{' ';' '~'
     && lk != 1449171               // '{' 'break' '~'
     && lk != 1449555)              // '{' 'continue' '~'
    {
      lk = memoized(0, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2; var l3A = l3;
        var b3A = b3; var e3A = e3;
        try
        {
          try_Block();
          lk = -2;
        }
        catch (p2A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
            b3 = b3A; e3 = e3A; end = e3A; }}}
            try_Statement();
            lk = -3;
          }
          catch (p3A)
          {
            lk = -4;
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
        b3 = b3A; e3 = e3A; end = e3A; }}}
        memoize(0, e0, lk);
      }
    }
    switch (lk)
    {
    case 12:                        // Comment
      consume(12);                  // Comment
      break;
    case -3:
    case 40:                        // ';'
    case 57:                        // 'break'
    case 60:                        // 'continue'
    case 62:                        // 'do'
    case 64:                        // 'export'
    case 67:                        // 'for'
    case 68:                        // 'foreach'
    case 69:                        // 'global'
    case 72:                        // 'if'
    case 73:                        // 'import'
    case 74:                        // 'include'
    case 75:                        // 'local'
    case 76:                        // 'return'
    case 77:                        // 'switch'
    case 78:                        // 'test'
    case 79:                        // 'throw'
    case 80:                        // 'try'
    case 81:                        // 'typeof'
    case 82:                        // 'while'
      parse_Statement();
      break;
    case -4:
    case 4:                         // Null
    case 5:                         // True
    case 6:                         // False
    case 7:                         // Character
    case 8:                         // String
    case 9:                         // Integer
    case 10:                        // Complex
    case 11:                        // Real
    case 15:                        // '!'
    case 23:                        // '('
    case 28:                        // '+'
    case 29:                        // '++'
    case 32:                        // '-'
    case 33:                        // '--'
    case 53:                        // '['
    case 88:                        // '~'
    case 131:                       // Identifier END
    case 387:                       // Identifier Identifier
    case 515:                       // Identifier Null
    case 643:                       // Identifier True
    case 771:                       // Identifier False
    case 899:                       // Identifier Character
    case 1027:                      // Identifier String
    case 1155:                      // Identifier Integer
    case 1283:                      // Identifier Complex
    case 1411:                      // Identifier Real
    case 1539:                      // Identifier Comment
    case 1923:                      // Identifier '!'
    case 2051:                      // Identifier '!='
    case 2307:                      // Identifier '%'
    case 2435:                      // Identifier '%='
    case 2563:                      // Identifier '&'
    case 2691:                      // Identifier '&&'
    case 2819:                      // Identifier '&='
    case 3075:                      // Identifier ')'
    case 3203:                      // Identifier '*'
    case 3331:                      // Identifier '**'
    case 3459:                      // Identifier '*='
    case 3587:                      // Identifier '+'
    case 3715:                      // Identifier '++'
    case 3843:                      // Identifier '+='
    case 3971:                      // Identifier ','
    case 4051:                      // '{' ','
    case 4099:                      // Identifier '-'
    case 4227:                      // Identifier '--'
    case 4355:                      // Identifier '-='
    case 4611:                      // Identifier '/'
    case 4739:                      // Identifier '/='
    case 4867:                      // Identifier ':'
    case 4995:                      // Identifier ':='
    case 5123:                      // Identifier ';'
    case 5251:                      // Identifier '<'
    case 5379:                      // Identifier '<<'
    case 5507:                      // Identifier '<<='
    case 5635:                      // Identifier '<='
    case 5763:                      // Identifier '='
    case 5891:                      // Identifier '=='
    case 6019:                      // Identifier '>'
    case 6147:                      // Identifier '>='
    case 6275:                      // Identifier '>>'
    case 6403:                      // Identifier '>>='
    case 6531:                      // Identifier '?'
    case 6659:                      // Identifier '?='
    case 6787:                      // Identifier '['
    case 6915:                      // Identifier ']'
    case 7043:                      // Identifier '^'
    case 7171:                      // Identifier '^='
    case 7299:                      // Identifier 'break'
    case 7427:                      // Identifier 'case'
    case 7555:                      // Identifier 'catch'
    case 7683:                      // Identifier 'continue'
    case 7811:                      // Identifier 'default'
    case 7939:                      // Identifier 'do'
    case 8067:                      // Identifier 'else'
    case 8195:                      // Identifier 'export'
    case 8323:                      // Identifier 'f32'
    case 8451:                      // Identifier 'f64'
    case 8579:                      // Identifier 'for'
    case 8707:                      // Identifier 'foreach'
    case 8835:                      // Identifier 'global'
    case 8963:                      // Identifier 'i32'
    case 9091:                      // Identifier 'i64'
    case 9219:                      // Identifier 'if'
    case 9347:                      // Identifier 'import'
    case 9475:                      // Identifier 'include'
    case 9603:                      // Identifier 'local'
    case 9731:                      // Identifier 'return'
    case 9859:                      // Identifier 'switch'
    case 9987:                      // Identifier 'test'
    case 10115:                     // Identifier 'throw'
    case 10243:                     // Identifier 'try'
    case 10371:                     // Identifier 'typeof'
    case 10499:                     // Identifier 'while'
    case 10755:                     // Identifier '|'
    case 10883:                     // Identifier '|='
    case 11011:                     // Identifier '||'
    case 11139:                     // Identifier '}'
    case 11267:                     // Identifier '~'
    case 16833:                     // 'f32' Identifier END
    case 16834:                     // 'f64' Identifier END
    case 16838:                     // 'i32' Identifier END
    case 16839:                     // 'i64' Identifier END
    case 49601:                     // 'f32' Identifier Identifier
    case 49602:                     // 'f64' Identifier Identifier
    case 49606:                     // 'i32' Identifier Identifier
    case 49607:                     // 'i64' Identifier Identifier
    case 65985:                     // 'f32' Identifier Null
    case 65986:                     // 'f64' Identifier Null
    case 65990:                     // 'i32' Identifier Null
    case 65991:                     // 'i64' Identifier Null
    case 82369:                     // 'f32' Identifier True
    case 82370:                     // 'f64' Identifier True
    case 82374:                     // 'i32' Identifier True
    case 82375:                     // 'i64' Identifier True
    case 98753:                     // 'f32' Identifier False
    case 98754:                     // 'f64' Identifier False
    case 98758:                     // 'i32' Identifier False
    case 98759:                     // 'i64' Identifier False
    case 115137:                    // 'f32' Identifier Character
    case 115138:                    // 'f64' Identifier Character
    case 115142:                    // 'i32' Identifier Character
    case 115143:                    // 'i64' Identifier Character
    case 131521:                    // 'f32' Identifier String
    case 131522:                    // 'f64' Identifier String
    case 131526:                    // 'i32' Identifier String
    case 131527:                    // 'i64' Identifier String
    case 147905:                    // 'f32' Identifier Integer
    case 147906:                    // 'f64' Identifier Integer
    case 147910:                    // 'i32' Identifier Integer
    case 147911:                    // 'i64' Identifier Integer
    case 164289:                    // 'f32' Identifier Complex
    case 164290:                    // 'f64' Identifier Complex
    case 164294:                    // 'i32' Identifier Complex
    case 164295:                    // 'i64' Identifier Complex
    case 180673:                    // 'f32' Identifier Real
    case 180674:                    // 'f64' Identifier Real
    case 180678:                    // 'i32' Identifier Real
    case 180679:                    // 'i64' Identifier Real
    case 197057:                    // 'f32' Identifier Comment
    case 197058:                    // 'f64' Identifier Comment
    case 197062:                    // 'i32' Identifier Comment
    case 197063:                    // 'i64' Identifier Comment
    case 246209:                    // 'f32' Identifier '!'
    case 246210:                    // 'f64' Identifier '!'
    case 246214:                    // 'i32' Identifier '!'
    case 246215:                    // 'i64' Identifier '!'
    case 262593:                    // 'f32' Identifier '!='
    case 262594:                    // 'f64' Identifier '!='
    case 262598:                    // 'i32' Identifier '!='
    case 262599:                    // 'i64' Identifier '!='
    case 273363:                    // '{' '}' '!='
    case 295361:                    // 'f32' Identifier '%'
    case 295362:                    // 'f64' Identifier '%'
    case 295366:                    // 'i32' Identifier '%'
    case 295367:                    // 'i64' Identifier '%'
    case 306131:                    // '{' '}' '%'
    case 311745:                    // 'f32' Identifier '%='
    case 311746:                    // 'f64' Identifier '%='
    case 311750:                    // 'i32' Identifier '%='
    case 311751:                    // 'i64' Identifier '%='
    case 322515:                    // '{' '}' '%='
    case 328129:                    // 'f32' Identifier '&'
    case 328130:                    // 'f64' Identifier '&'
    case 328134:                    // 'i32' Identifier '&'
    case 328135:                    // 'i64' Identifier '&'
    case 338899:                    // '{' '}' '&'
    case 344513:                    // 'f32' Identifier '&&'
    case 344514:                    // 'f64' Identifier '&&'
    case 344518:                    // 'i32' Identifier '&&'
    case 344519:                    // 'i64' Identifier '&&'
    case 355283:                    // '{' '}' '&&'
    case 360897:                    // 'f32' Identifier '&='
    case 360898:                    // 'f64' Identifier '&='
    case 360902:                    // 'i32' Identifier '&='
    case 360903:                    // 'i64' Identifier '&='
    case 371667:                    // '{' '}' '&='
    case 393665:                    // 'f32' Identifier ')'
    case 393666:                    // 'f64' Identifier ')'
    case 393670:                    // 'i32' Identifier ')'
    case 393671:                    // 'i64' Identifier ')'
    case 410049:                    // 'f32' Identifier '*'
    case 410050:                    // 'f64' Identifier '*'
    case 410054:                    // 'i32' Identifier '*'
    case 410055:                    // 'i64' Identifier '*'
    case 420819:                    // '{' '}' '*'
    case 426433:                    // 'f32' Identifier '**'
    case 426434:                    // 'f64' Identifier '**'
    case 426438:                    // 'i32' Identifier '**'
    case 426439:                    // 'i64' Identifier '**'
    case 437203:                    // '{' '}' '**'
    case 442817:                    // 'f32' Identifier '*='
    case 442818:                    // 'f64' Identifier '*='
    case 442822:                    // 'i32' Identifier '*='
    case 442823:                    // 'i64' Identifier '*='
    case 453587:                    // '{' '}' '*='
    case 459201:                    // 'f32' Identifier '+'
    case 459202:                    // 'f64' Identifier '+'
    case 459206:                    // 'i32' Identifier '+'
    case 459207:                    // 'i64' Identifier '+'
    case 475585:                    // 'f32' Identifier '++'
    case 475586:                    // 'f64' Identifier '++'
    case 475590:                    // 'i32' Identifier '++'
    case 475591:                    // 'i64' Identifier '++'
    case 491969:                    // 'f32' Identifier '+='
    case 491970:                    // 'f64' Identifier '+='
    case 491974:                    // 'i32' Identifier '+='
    case 491975:                    // 'i64' Identifier '+='
    case 502739:                    // '{' '}' '+='
    case 508353:                    // 'f32' Identifier ','
    case 508354:                    // 'f64' Identifier ','
    case 508358:                    // 'i32' Identifier ','
    case 508359:                    // 'i64' Identifier ','
    case 508371:                    // '{' Identifier ','
    case 508499:                    // '{' Null ','
    case 508627:                    // '{' True ','
    case 508755:                    // '{' False ','
    case 508883:                    // '{' Character ','
    case 509011:                    // '{' String ','
    case 509139:                    // '{' Integer ','
    case 509267:                    // '{' Complex ','
    case 509395:                    // '{' Real ','
    case 509523:                    // '{' Comment ','
    case 513107:                    // '{' ';' ','
    case 515283:                    // '{' 'break' ','
    case 515667:                    // '{' 'continue' ','
    case 518531:                    // Identifier '{' ','
    case 524737:                    // 'f32' Identifier '-'
    case 524738:                    // 'f64' Identifier '-'
    case 524742:                    // 'i32' Identifier '-'
    case 524743:                    // 'i64' Identifier '-'
    case 541121:                    // 'f32' Identifier '--'
    case 541122:                    // 'f64' Identifier '--'
    case 541126:                    // 'i32' Identifier '--'
    case 541127:                    // 'i64' Identifier '--'
    case 557505:                    // 'f32' Identifier '-='
    case 557506:                    // 'f64' Identifier '-='
    case 557510:                    // 'i32' Identifier '-='
    case 557511:                    // 'i64' Identifier '-='
    case 568275:                    // '{' '}' '-='
    case 590273:                    // 'f32' Identifier '/'
    case 590274:                    // 'f64' Identifier '/'
    case 590278:                    // 'i32' Identifier '/'
    case 590279:                    // 'i64' Identifier '/'
    case 601043:                    // '{' '}' '/'
    case 606657:                    // 'f32' Identifier '/='
    case 606658:                    // 'f64' Identifier '/='
    case 606662:                    // 'i32' Identifier '/='
    case 606663:                    // 'i64' Identifier '/='
    case 617427:                    // '{' '}' '/='
    case 623041:                    // 'f32' Identifier ':'
    case 623042:                    // 'f64' Identifier ':'
    case 623046:                    // 'i32' Identifier ':'
    case 623047:                    // 'i64' Identifier ':'
    case 623059:                    // '{' Identifier ':'
    case 623699:                    // '{' String ':'
    case 639425:                    // 'f32' Identifier ':='
    case 639426:                    // 'f64' Identifier ':='
    case 639430:                    // 'i32' Identifier ':='
    case 639431:                    // 'i64' Identifier ':='
    case 650195:                    // '{' '}' ':='
    case 655809:                    // 'f32' Identifier ';'
    case 655810:                    // 'f64' Identifier ';'
    case 655814:                    // 'i32' Identifier ';'
    case 655815:                    // 'i64' Identifier ';'
    case 672193:                    // 'f32' Identifier '<'
    case 672194:                    // 'f64' Identifier '<'
    case 672198:                    // 'i32' Identifier '<'
    case 672199:                    // 'i64' Identifier '<'
    case 682963:                    // '{' '}' '<'
    case 688577:                    // 'f32' Identifier '<<'
    case 688578:                    // 'f64' Identifier '<<'
    case 688582:                    // 'i32' Identifier '<<'
    case 688583:                    // 'i64' Identifier '<<'
    case 699347:                    // '{' '}' '<<'
    case 704961:                    // 'f32' Identifier '<<='
    case 704962:                    // 'f64' Identifier '<<='
    case 704966:                    // 'i32' Identifier '<<='
    case 704967:                    // 'i64' Identifier '<<='
    case 715731:                    // '{' '}' '<<='
    case 721345:                    // 'f32' Identifier '<='
    case 721346:                    // 'f64' Identifier '<='
    case 721350:                    // 'i32' Identifier '<='
    case 721351:                    // 'i64' Identifier '<='
    case 732115:                    // '{' '}' '<='
    case 737729:                    // 'f32' Identifier '='
    case 737730:                    // 'f64' Identifier '='
    case 737734:                    // 'i32' Identifier '='
    case 737735:                    // 'i64' Identifier '='
    case 748499:                    // '{' '}' '='
    case 754113:                    // 'f32' Identifier '=='
    case 754114:                    // 'f64' Identifier '=='
    case 754118:                    // 'i32' Identifier '=='
    case 754119:                    // 'i64' Identifier '=='
    case 764883:                    // '{' '}' '=='
    case 770497:                    // 'f32' Identifier '>'
    case 770498:                    // 'f64' Identifier '>'
    case 770502:                    // 'i32' Identifier '>'
    case 770503:                    // 'i64' Identifier '>'
    case 781267:                    // '{' '}' '>'
    case 786881:                    // 'f32' Identifier '>='
    case 786882:                    // 'f64' Identifier '>='
    case 786886:                    // 'i32' Identifier '>='
    case 786887:                    // 'i64' Identifier '>='
    case 797651:                    // '{' '}' '>='
    case 803265:                    // 'f32' Identifier '>>'
    case 803266:                    // 'f64' Identifier '>>'
    case 803270:                    // 'i32' Identifier '>>'
    case 803271:                    // 'i64' Identifier '>>'
    case 814035:                    // '{' '}' '>>'
    case 819649:                    // 'f32' Identifier '>>='
    case 819650:                    // 'f64' Identifier '>>='
    case 819654:                    // 'i32' Identifier '>>='
    case 819655:                    // 'i64' Identifier '>>='
    case 830419:                    // '{' '}' '>>='
    case 836033:                    // 'f32' Identifier '?'
    case 836034:                    // 'f64' Identifier '?'
    case 836038:                    // 'i32' Identifier '?'
    case 836039:                    // 'i64' Identifier '?'
    case 846803:                    // '{' '}' '?'
    case 852417:                    // 'f32' Identifier '?='
    case 852418:                    // 'f64' Identifier '?='
    case 852422:                    // 'i32' Identifier '?='
    case 852423:                    // 'i64' Identifier '?='
    case 863187:                    // '{' '}' '?='
    case 868801:                    // 'f32' Identifier '['
    case 868802:                    // 'f64' Identifier '['
    case 868806:                    // 'i32' Identifier '['
    case 868807:                    // 'i64' Identifier '['
    case 885185:                    // 'f32' Identifier ']'
    case 885186:                    // 'f64' Identifier ']'
    case 885190:                    // 'i32' Identifier ']'
    case 885191:                    // 'i64' Identifier ']'
    case 901569:                    // 'f32' Identifier '^'
    case 901570:                    // 'f64' Identifier '^'
    case 901574:                    // 'i32' Identifier '^'
    case 901575:                    // 'i64' Identifier '^'
    case 912339:                    // '{' '}' '^'
    case 917953:                    // 'f32' Identifier '^='
    case 917954:                    // 'f64' Identifier '^='
    case 917958:                    // 'i32' Identifier '^='
    case 917959:                    // 'i64' Identifier '^='
    case 928723:                    // '{' '}' '^='
    case 934337:                    // 'f32' Identifier 'break'
    case 934338:                    // 'f64' Identifier 'break'
    case 934342:                    // 'i32' Identifier 'break'
    case 934343:                    // 'i64' Identifier 'break'
    case 950721:                    // 'f32' Identifier 'case'
    case 950722:                    // 'f64' Identifier 'case'
    case 950726:                    // 'i32' Identifier 'case'
    case 950727:                    // 'i64' Identifier 'case'
    case 967105:                    // 'f32' Identifier 'catch'
    case 967106:                    // 'f64' Identifier 'catch'
    case 967110:                    // 'i32' Identifier 'catch'
    case 967111:                    // 'i64' Identifier 'catch'
    case 983489:                    // 'f32' Identifier 'continue'
    case 983490:                    // 'f64' Identifier 'continue'
    case 983494:                    // 'i32' Identifier 'continue'
    case 983495:                    // 'i64' Identifier 'continue'
    case 999873:                    // 'f32' Identifier 'default'
    case 999874:                    // 'f64' Identifier 'default'
    case 999878:                    // 'i32' Identifier 'default'
    case 999879:                    // 'i64' Identifier 'default'
    case 1016257:                   // 'f32' Identifier 'do'
    case 1016258:                   // 'f64' Identifier 'do'
    case 1016262:                   // 'i32' Identifier 'do'
    case 1016263:                   // 'i64' Identifier 'do'
    case 1032641:                   // 'f32' Identifier 'else'
    case 1032642:                   // 'f64' Identifier 'else'
    case 1032646:                   // 'i32' Identifier 'else'
    case 1032647:                   // 'i64' Identifier 'else'
    case 1049025:                   // 'f32' Identifier 'export'
    case 1049026:                   // 'f64' Identifier 'export'
    case 1049030:                   // 'i32' Identifier 'export'
    case 1049031:                   // 'i64' Identifier 'export'
    case 1065409:                   // 'f32' Identifier 'f32'
    case 1065410:                   // 'f64' Identifier 'f32'
    case 1065414:                   // 'i32' Identifier 'f32'
    case 1065415:                   // 'i64' Identifier 'f32'
    case 1081793:                   // 'f32' Identifier 'f64'
    case 1081794:                   // 'f64' Identifier 'f64'
    case 1081798:                   // 'i32' Identifier 'f64'
    case 1081799:                   // 'i64' Identifier 'f64'
    case 1098177:                   // 'f32' Identifier 'for'
    case 1098178:                   // 'f64' Identifier 'for'
    case 1098182:                   // 'i32' Identifier 'for'
    case 1098183:                   // 'i64' Identifier 'for'
    case 1114561:                   // 'f32' Identifier 'foreach'
    case 1114562:                   // 'f64' Identifier 'foreach'
    case 1114566:                   // 'i32' Identifier 'foreach'
    case 1114567:                   // 'i64' Identifier 'foreach'
    case 1130945:                   // 'f32' Identifier 'global'
    case 1130946:                   // 'f64' Identifier 'global'
    case 1130950:                   // 'i32' Identifier 'global'
    case 1130951:                   // 'i64' Identifier 'global'
    case 1147329:                   // 'f32' Identifier 'i32'
    case 1147330:                   // 'f64' Identifier 'i32'
    case 1147334:                   // 'i32' Identifier 'i32'
    case 1147335:                   // 'i64' Identifier 'i32'
    case 1163713:                   // 'f32' Identifier 'i64'
    case 1163714:                   // 'f64' Identifier 'i64'
    case 1163718:                   // 'i32' Identifier 'i64'
    case 1163719:                   // 'i64' Identifier 'i64'
    case 1180097:                   // 'f32' Identifier 'if'
    case 1180098:                   // 'f64' Identifier 'if'
    case 1180102:                   // 'i32' Identifier 'if'
    case 1180103:                   // 'i64' Identifier 'if'
    case 1196481:                   // 'f32' Identifier 'import'
    case 1196482:                   // 'f64' Identifier 'import'
    case 1196486:                   // 'i32' Identifier 'import'
    case 1196487:                   // 'i64' Identifier 'import'
    case 1212865:                   // 'f32' Identifier 'include'
    case 1212866:                   // 'f64' Identifier 'include'
    case 1212870:                   // 'i32' Identifier 'include'
    case 1212871:                   // 'i64' Identifier 'include'
    case 1229249:                   // 'f32' Identifier 'local'
    case 1229250:                   // 'f64' Identifier 'local'
    case 1229254:                   // 'i32' Identifier 'local'
    case 1229255:                   // 'i64' Identifier 'local'
    case 1245633:                   // 'f32' Identifier 'return'
    case 1245634:                   // 'f64' Identifier 'return'
    case 1245638:                   // 'i32' Identifier 'return'
    case 1245639:                   // 'i64' Identifier 'return'
    case 1262017:                   // 'f32' Identifier 'switch'
    case 1262018:                   // 'f64' Identifier 'switch'
    case 1262022:                   // 'i32' Identifier 'switch'
    case 1262023:                   // 'i64' Identifier 'switch'
    case 1278401:                   // 'f32' Identifier 'test'
    case 1278402:                   // 'f64' Identifier 'test'
    case 1278406:                   // 'i32' Identifier 'test'
    case 1278407:                   // 'i64' Identifier 'test'
    case 1294785:                   // 'f32' Identifier 'throw'
    case 1294786:                   // 'f64' Identifier 'throw'
    case 1294790:                   // 'i32' Identifier 'throw'
    case 1294791:                   // 'i64' Identifier 'throw'
    case 1311169:                   // 'f32' Identifier 'try'
    case 1311170:                   // 'f64' Identifier 'try'
    case 1311174:                   // 'i32' Identifier 'try'
    case 1311175:                   // 'i64' Identifier 'try'
    case 1327553:                   // 'f32' Identifier 'typeof'
    case 1327554:                   // 'f64' Identifier 'typeof'
    case 1327558:                   // 'i32' Identifier 'typeof'
    case 1327559:                   // 'i64' Identifier 'typeof'
    case 1343937:                   // 'f32' Identifier 'while'
    case 1343938:                   // 'f64' Identifier 'while'
    case 1343942:                   // 'i32' Identifier 'while'
    case 1343943:                   // 'i64' Identifier 'while'
    case 1360321:                   // 'f32' Identifier '{'
    case 1360322:                   // 'f64' Identifier '{'
    case 1360326:                   // 'i32' Identifier '{'
    case 1360327:                   // 'i64' Identifier '{'
    case 1376705:                   // 'f32' Identifier '|'
    case 1376706:                   // 'f64' Identifier '|'
    case 1376710:                   // 'i32' Identifier '|'
    case 1376711:                   // 'i64' Identifier '|'
    case 1387475:                   // '{' '}' '|'
    case 1393089:                   // 'f32' Identifier '|='
    case 1393090:                   // 'f64' Identifier '|='
    case 1393094:                   // 'i32' Identifier '|='
    case 1393095:                   // 'i64' Identifier '|='
    case 1403859:                   // '{' '}' '|='
    case 1409473:                   // 'f32' Identifier '||'
    case 1409474:                   // 'f64' Identifier '||'
    case 1409478:                   // 'i32' Identifier '||'
    case 1409479:                   // 'i64' Identifier '||'
    case 1420243:                   // '{' '}' '||'
    case 1425857:                   // 'f32' Identifier '}'
    case 1425858:                   // 'f64' Identifier '}'
    case 1425862:                   // 'i32' Identifier '}'
    case 1425863:                   // 'i64' Identifier '}'
    case 1442241:                   // 'f32' Identifier '~'
    case 1442242:                   // 'f64' Identifier '~'
    case 1442246:                   // 'i32' Identifier '~'
    case 1442247:                   // 'i64' Identifier '~'
      parse_Operation();
      break;
    default:
      parse_Block();
    }
    eventHandler.endNonterminal("Expression", e0);
  }

  function try_Expression()
  {
    switch (l1)
    {
    case 3:                         // Identifier
      lookahead2W(45);              // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' |
                                    // '.' | '/' | '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' |
                                    // '>' | '>=' | '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' |
                                    // 'case' | 'catch' | 'continue' | 'default' | 'do' | 'else' | 'export' | 'f32' |
                                    // 'f64' | 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' |
                                    // 'include' | 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' |
                                    // 'while' | '{' | '|' | '|=' | '||' | '}' | '~'
      switch (lk)
      {
      case 2947:                    // Identifier '('
        lookahead3W(33);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        break;
      case 4483:                    // Identifier '.'
        lookahead3W(0);             // Identifier | WhiteSpace^token
        break;
      case 10627:                   // Identifier '{'
        lookahead3W(38);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '}' |
                                    // '~'
        break;
      }
      break;
    case 83:                        // '{'
      lookahead2W(38);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '}' |
                                    // '~'
      switch (lk)
      {
      case 467:                     // '{' Identifier
        lookahead3W(43);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' |
                                    // '/' | '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' |
                                    // '>=' | '>>' | '>>=' | '?' | '?=' | '[' | '^' | '^=' | 'break' | 'continue' |
                                    // 'do' | 'export' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' | 'i64' |
                                    // 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' | 'throw' |
                                    // 'try' | 'typeof' | 'while' | '{' | '|' | '|=' | '||' | '}' | '~'
        break;
      case 1107:                    // '{' String
        lookahead3W(42);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' |
                                    // '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' |
                                    // '>>' | '>>=' | '?' | '?=' | '[' | '^' | '^=' | 'break' | 'continue' | 'do' |
                                    // 'export' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' |
                                    // 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' |
                                    // 'typeof' | 'while' | '{' | '|' | '|=' | '||' | '}' | '~'
        break;
      case 6867:                    // '{' '['
        lookahead3W(34);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | ']' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        break;
      case 11219:                   // '{' '}'
        lookahead3W(44);            // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' |
                                    // '/' | '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' |
                                    // '>=' | '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' |
                                    // 'catch' | 'continue' | 'default' | 'do' | 'else' | 'export' | 'f32' | 'f64' |
                                    // 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' |
                                    // 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' |
                                    // '{' | '|' | '|=' | '||' | '}' | '~'
        break;
      case 8403:                    // '{' 'f32'
      case 8531:                    // '{' 'f64'
      case 9043:                    // '{' 'i32'
      case 9171:                    // '{' 'i64'
        lookahead3W(0);             // Identifier | WhiteSpace^token
        break;
      case 1619:                    // '{' Comment
      case 5203:                    // '{' ';'
      case 7379:                    // '{' 'break'
      case 7763:                    // '{' 'continue'
      case 10707:                   // '{' '{'
        lookahead3W(38);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '}' |
                                    // '~'
        break;
      case 2003:                    // '{' '!'
      case 3667:                    // '{' '+'
      case 3795:                    // '{' '++'
      case 4179:                    // '{' '-'
      case 4307:                    // '{' '--'
      case 11347:                   // '{' '~'
        lookahead3W(22);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
        break;
      case 8659:                    // '{' 'for'
      case 8787:                    // '{' 'foreach'
      case 9299:                    // '{' 'if'
      case 9939:                    // '{' 'switch'
      case 10067:                   // '{' 'test'
      case 10579:                   // '{' 'while'
        lookahead3W(3);             // WhiteSpace^token | '('
        break;
      case 595:                     // '{' Null
      case 723:                     // '{' True
      case 851:                     // '{' False
      case 979:                     // '{' Character
      case 1235:                    // '{' Integer
      case 1363:                    // '{' Complex
      case 1491:                    // '{' Real
        lookahead3W(41);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' |
                                    // '/=' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' |
                                    // '>>=' | '?' | '?=' | '[' | '^' | '^=' | 'break' | 'continue' | 'do' | 'export' |
                                    // 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' |
                                    // 'include' | 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' |
                                    // 'while' | '{' | '|' | '|=' | '||' | '}' | '~'
        break;
      case 3027:                    // '{' '('
      case 8019:                    // '{' 'do'
      case 8275:                    // '{' 'export'
      case 8915:                    // '{' 'global'
      case 9427:                    // '{' 'import'
      case 9555:                    // '{' 'include'
      case 9683:                    // '{' 'local'
      case 9811:                    // '{' 'return'
      case 10195:                   // '{' 'throw'
      case 10323:                   // '{' 'try'
      case 10451:                   // '{' 'typeof'
        lookahead3W(29);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        break;
      }
      break;
    case 65:                        // 'f32'
    case 66:                        // 'f64'
    case 70:                        // 'i32'
    case 71:                        // 'i64'
      lookahead2W(0);               // Identifier | WhiteSpace^token
      switch (lk)
      {
      case 449:                     // 'f32' Identifier
      case 450:                     // 'f64' Identifier
      case 454:                     // 'i32' Identifier
      case 455:                     // 'i64' Identifier
        lookahead3W(45);            // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' |
                                    // '.' | '/' | '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' |
                                    // '>' | '>=' | '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' |
                                    // 'case' | 'catch' | 'continue' | 'default' | 'do' | 'else' | 'export' | 'f32' |
                                    // 'f64' | 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' |
                                    // 'include' | 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' |
                                    // 'while' | '{' | '|' | '|=' | '||' | '}' | '~'
        break;
      }
      break;
    default:
      lk = l1;
    }
    if (lk != 4                     // Null
     && lk != 5                     // True
     && lk != 6                     // False
     && lk != 7                     // Character
     && lk != 8                     // String
     && lk != 9                     // Integer
     && lk != 10                    // Complex
     && lk != 11                    // Real
     && lk != 12                    // Comment
     && lk != 15                    // '!'
     && lk != 23                    // '('
     && lk != 28                    // '+'
     && lk != 29                    // '++'
     && lk != 32                    // '-'
     && lk != 33                    // '--'
     && lk != 40                    // ';'
     && lk != 53                    // '['
     && lk != 57                    // 'break'
     && lk != 60                    // 'continue'
     && lk != 62                    // 'do'
     && lk != 64                    // 'export'
     && lk != 67                    // 'for'
     && lk != 68                    // 'foreach'
     && lk != 69                    // 'global'
     && lk != 72                    // 'if'
     && lk != 73                    // 'import'
     && lk != 74                    // 'include'
     && lk != 75                    // 'local'
     && lk != 76                    // 'return'
     && lk != 77                    // 'switch'
     && lk != 78                    // 'test'
     && lk != 79                    // 'throw'
     && lk != 80                    // 'try'
     && lk != 81                    // 'typeof'
     && lk != 82                    // 'while'
     && lk != 88                    // '~'
     && lk != 131                   // Identifier END
     && lk != 387                   // Identifier Identifier
     && lk != 515                   // Identifier Null
     && lk != 643                   // Identifier True
     && lk != 771                   // Identifier False
     && lk != 899                   // Identifier Character
     && lk != 1027                  // Identifier String
     && lk != 1155                  // Identifier Integer
     && lk != 1283                  // Identifier Complex
     && lk != 1411                  // Identifier Real
     && lk != 1539                  // Identifier Comment
     && lk != 1923                  // Identifier '!'
     && lk != 2051                  // Identifier '!='
     && lk != 2307                  // Identifier '%'
     && lk != 2435                  // Identifier '%='
     && lk != 2563                  // Identifier '&'
     && lk != 2691                  // Identifier '&&'
     && lk != 2819                  // Identifier '&='
     && lk != 3075                  // Identifier ')'
     && lk != 3203                  // Identifier '*'
     && lk != 3331                  // Identifier '**'
     && lk != 3459                  // Identifier '*='
     && lk != 3587                  // Identifier '+'
     && lk != 3715                  // Identifier '++'
     && lk != 3843                  // Identifier '+='
     && lk != 3971                  // Identifier ','
     && lk != 4051                  // '{' ','
     && lk != 4099                  // Identifier '-'
     && lk != 4227                  // Identifier '--'
     && lk != 4355                  // Identifier '-='
     && lk != 4611                  // Identifier '/'
     && lk != 4739                  // Identifier '/='
     && lk != 4867                  // Identifier ':'
     && lk != 4995                  // Identifier ':='
     && lk != 5123                  // Identifier ';'
     && lk != 5251                  // Identifier '<'
     && lk != 5379                  // Identifier '<<'
     && lk != 5507                  // Identifier '<<='
     && lk != 5635                  // Identifier '<='
     && lk != 5763                  // Identifier '='
     && lk != 5891                  // Identifier '=='
     && lk != 6019                  // Identifier '>'
     && lk != 6147                  // Identifier '>='
     && lk != 6275                  // Identifier '>>'
     && lk != 6403                  // Identifier '>>='
     && lk != 6531                  // Identifier '?'
     && lk != 6659                  // Identifier '?='
     && lk != 6787                  // Identifier '['
     && lk != 6915                  // Identifier ']'
     && lk != 7043                  // Identifier '^'
     && lk != 7171                  // Identifier '^='
     && lk != 7299                  // Identifier 'break'
     && lk != 7427                  // Identifier 'case'
     && lk != 7555                  // Identifier 'catch'
     && lk != 7683                  // Identifier 'continue'
     && lk != 7811                  // Identifier 'default'
     && lk != 7939                  // Identifier 'do'
     && lk != 8067                  // Identifier 'else'
     && lk != 8195                  // Identifier 'export'
     && lk != 8323                  // Identifier 'f32'
     && lk != 8451                  // Identifier 'f64'
     && lk != 8579                  // Identifier 'for'
     && lk != 8707                  // Identifier 'foreach'
     && lk != 8835                  // Identifier 'global'
     && lk != 8963                  // Identifier 'i32'
     && lk != 9091                  // Identifier 'i64'
     && lk != 9219                  // Identifier 'if'
     && lk != 9347                  // Identifier 'import'
     && lk != 9475                  // Identifier 'include'
     && lk != 9603                  // Identifier 'local'
     && lk != 9731                  // Identifier 'return'
     && lk != 9859                  // Identifier 'switch'
     && lk != 9987                  // Identifier 'test'
     && lk != 10115                 // Identifier 'throw'
     && lk != 10243                 // Identifier 'try'
     && lk != 10371                 // Identifier 'typeof'
     && lk != 10499                 // Identifier 'while'
     && lk != 10755                 // Identifier '|'
     && lk != 10883                 // Identifier '|='
     && lk != 11011                 // Identifier '||'
     && lk != 11139                 // Identifier '}'
     && lk != 11267                 // Identifier '~'
     && lk != 16833                 // 'f32' Identifier END
     && lk != 16834                 // 'f64' Identifier END
     && lk != 16838                 // 'i32' Identifier END
     && lk != 16839                 // 'i64' Identifier END
     && lk != 49601                 // 'f32' Identifier Identifier
     && lk != 49602                 // 'f64' Identifier Identifier
     && lk != 49606                 // 'i32' Identifier Identifier
     && lk != 49607                 // 'i64' Identifier Identifier
     && lk != 49619                 // '{' Identifier Identifier
     && lk != 49747                 // '{' Null Identifier
     && lk != 49875                 // '{' True Identifier
     && lk != 50003                 // '{' False Identifier
     && lk != 50131                 // '{' Character Identifier
     && lk != 50259                 // '{' String Identifier
     && lk != 50387                 // '{' Integer Identifier
     && lk != 50515                 // '{' Complex Identifier
     && lk != 50643                 // '{' Real Identifier
     && lk != 50771                 // '{' Comment Identifier
     && lk != 54355                 // '{' ';' Identifier
     && lk != 56531                 // '{' 'break' Identifier
     && lk != 56915                 // '{' 'continue' Identifier
     && lk != 65985                 // 'f32' Identifier Null
     && lk != 65986                 // 'f64' Identifier Null
     && lk != 65990                 // 'i32' Identifier Null
     && lk != 65991                 // 'i64' Identifier Null
     && lk != 66003                 // '{' Identifier Null
     && lk != 66131                 // '{' Null Null
     && lk != 66259                 // '{' True Null
     && lk != 66387                 // '{' False Null
     && lk != 66515                 // '{' Character Null
     && lk != 66643                 // '{' String Null
     && lk != 66771                 // '{' Integer Null
     && lk != 66899                 // '{' Complex Null
     && lk != 67027                 // '{' Real Null
     && lk != 67155                 // '{' Comment Null
     && lk != 70739                 // '{' ';' Null
     && lk != 72915                 // '{' 'break' Null
     && lk != 73299                 // '{' 'continue' Null
     && lk != 82369                 // 'f32' Identifier True
     && lk != 82370                 // 'f64' Identifier True
     && lk != 82374                 // 'i32' Identifier True
     && lk != 82375                 // 'i64' Identifier True
     && lk != 82387                 // '{' Identifier True
     && lk != 82515                 // '{' Null True
     && lk != 82643                 // '{' True True
     && lk != 82771                 // '{' False True
     && lk != 82899                 // '{' Character True
     && lk != 83027                 // '{' String True
     && lk != 83155                 // '{' Integer True
     && lk != 83283                 // '{' Complex True
     && lk != 83411                 // '{' Real True
     && lk != 83539                 // '{' Comment True
     && lk != 87123                 // '{' ';' True
     && lk != 89299                 // '{' 'break' True
     && lk != 89683                 // '{' 'continue' True
     && lk != 98753                 // 'f32' Identifier False
     && lk != 98754                 // 'f64' Identifier False
     && lk != 98758                 // 'i32' Identifier False
     && lk != 98759                 // 'i64' Identifier False
     && lk != 98771                 // '{' Identifier False
     && lk != 98899                 // '{' Null False
     && lk != 99027                 // '{' True False
     && lk != 99155                 // '{' False False
     && lk != 99283                 // '{' Character False
     && lk != 99411                 // '{' String False
     && lk != 99539                 // '{' Integer False
     && lk != 99667                 // '{' Complex False
     && lk != 99795                 // '{' Real False
     && lk != 99923                 // '{' Comment False
     && lk != 103507                // '{' ';' False
     && lk != 105683                // '{' 'break' False
     && lk != 106067                // '{' 'continue' False
     && lk != 115137                // 'f32' Identifier Character
     && lk != 115138                // 'f64' Identifier Character
     && lk != 115142                // 'i32' Identifier Character
     && lk != 115143                // 'i64' Identifier Character
     && lk != 115155                // '{' Identifier Character
     && lk != 115283                // '{' Null Character
     && lk != 115411                // '{' True Character
     && lk != 115539                // '{' False Character
     && lk != 115667                // '{' Character Character
     && lk != 115795                // '{' String Character
     && lk != 115923                // '{' Integer Character
     && lk != 116051                // '{' Complex Character
     && lk != 116179                // '{' Real Character
     && lk != 116307                // '{' Comment Character
     && lk != 119891                // '{' ';' Character
     && lk != 122067                // '{' 'break' Character
     && lk != 122451                // '{' 'continue' Character
     && lk != 131521                // 'f32' Identifier String
     && lk != 131522                // 'f64' Identifier String
     && lk != 131526                // 'i32' Identifier String
     && lk != 131527                // 'i64' Identifier String
     && lk != 131539                // '{' Identifier String
     && lk != 131667                // '{' Null String
     && lk != 131795                // '{' True String
     && lk != 131923                // '{' False String
     && lk != 132051                // '{' Character String
     && lk != 132179                // '{' String String
     && lk != 132307                // '{' Integer String
     && lk != 132435                // '{' Complex String
     && lk != 132563                // '{' Real String
     && lk != 132691                // '{' Comment String
     && lk != 136275                // '{' ';' String
     && lk != 138451                // '{' 'break' String
     && lk != 138835                // '{' 'continue' String
     && lk != 147905                // 'f32' Identifier Integer
     && lk != 147906                // 'f64' Identifier Integer
     && lk != 147910                // 'i32' Identifier Integer
     && lk != 147911                // 'i64' Identifier Integer
     && lk != 147923                // '{' Identifier Integer
     && lk != 148051                // '{' Null Integer
     && lk != 148179                // '{' True Integer
     && lk != 148307                // '{' False Integer
     && lk != 148435                // '{' Character Integer
     && lk != 148563                // '{' String Integer
     && lk != 148691                // '{' Integer Integer
     && lk != 148819                // '{' Complex Integer
     && lk != 148947                // '{' Real Integer
     && lk != 149075                // '{' Comment Integer
     && lk != 152659                // '{' ';' Integer
     && lk != 154835                // '{' 'break' Integer
     && lk != 155219                // '{' 'continue' Integer
     && lk != 164289                // 'f32' Identifier Complex
     && lk != 164290                // 'f64' Identifier Complex
     && lk != 164294                // 'i32' Identifier Complex
     && lk != 164295                // 'i64' Identifier Complex
     && lk != 164307                // '{' Identifier Complex
     && lk != 164435                // '{' Null Complex
     && lk != 164563                // '{' True Complex
     && lk != 164691                // '{' False Complex
     && lk != 164819                // '{' Character Complex
     && lk != 164947                // '{' String Complex
     && lk != 165075                // '{' Integer Complex
     && lk != 165203                // '{' Complex Complex
     && lk != 165331                // '{' Real Complex
     && lk != 165459                // '{' Comment Complex
     && lk != 169043                // '{' ';' Complex
     && lk != 171219                // '{' 'break' Complex
     && lk != 171603                // '{' 'continue' Complex
     && lk != 180673                // 'f32' Identifier Real
     && lk != 180674                // 'f64' Identifier Real
     && lk != 180678                // 'i32' Identifier Real
     && lk != 180679                // 'i64' Identifier Real
     && lk != 180691                // '{' Identifier Real
     && lk != 180819                // '{' Null Real
     && lk != 180947                // '{' True Real
     && lk != 181075                // '{' False Real
     && lk != 181203                // '{' Character Real
     && lk != 181331                // '{' String Real
     && lk != 181459                // '{' Integer Real
     && lk != 181587                // '{' Complex Real
     && lk != 181715                // '{' Real Real
     && lk != 181843                // '{' Comment Real
     && lk != 185427                // '{' ';' Real
     && lk != 187603                // '{' 'break' Real
     && lk != 187987                // '{' 'continue' Real
     && lk != 197057                // 'f32' Identifier Comment
     && lk != 197058                // 'f64' Identifier Comment
     && lk != 197062                // 'i32' Identifier Comment
     && lk != 197063                // 'i64' Identifier Comment
     && lk != 197075                // '{' Identifier Comment
     && lk != 197203                // '{' Null Comment
     && lk != 197331                // '{' True Comment
     && lk != 197459                // '{' False Comment
     && lk != 197587                // '{' Character Comment
     && lk != 197715                // '{' String Comment
     && lk != 197843                // '{' Integer Comment
     && lk != 197971                // '{' Complex Comment
     && lk != 198099                // '{' Real Comment
     && lk != 198227                // '{' Comment Comment
     && lk != 201811                // '{' ';' Comment
     && lk != 203987                // '{' 'break' Comment
     && lk != 204371                // '{' 'continue' Comment
     && lk != 246209                // 'f32' Identifier '!'
     && lk != 246210                // 'f64' Identifier '!'
     && lk != 246214                // 'i32' Identifier '!'
     && lk != 246215                // 'i64' Identifier '!'
     && lk != 246227                // '{' Identifier '!'
     && lk != 246355                // '{' Null '!'
     && lk != 246483                // '{' True '!'
     && lk != 246611                // '{' False '!'
     && lk != 246739                // '{' Character '!'
     && lk != 246867                // '{' String '!'
     && lk != 246995                // '{' Integer '!'
     && lk != 247123                // '{' Complex '!'
     && lk != 247251                // '{' Real '!'
     && lk != 247379                // '{' Comment '!'
     && lk != 250963                // '{' ';' '!'
     && lk != 253139                // '{' 'break' '!'
     && lk != 253523                // '{' 'continue' '!'
     && lk != 262593                // 'f32' Identifier '!='
     && lk != 262594                // 'f64' Identifier '!='
     && lk != 262598                // 'i32' Identifier '!='
     && lk != 262599                // 'i64' Identifier '!='
     && lk != 273363                // '{' '}' '!='
     && lk != 295361                // 'f32' Identifier '%'
     && lk != 295362                // 'f64' Identifier '%'
     && lk != 295366                // 'i32' Identifier '%'
     && lk != 295367                // 'i64' Identifier '%'
     && lk != 306131                // '{' '}' '%'
     && lk != 311745                // 'f32' Identifier '%='
     && lk != 311746                // 'f64' Identifier '%='
     && lk != 311750                // 'i32' Identifier '%='
     && lk != 311751                // 'i64' Identifier '%='
     && lk != 322515                // '{' '}' '%='
     && lk != 328129                // 'f32' Identifier '&'
     && lk != 328130                // 'f64' Identifier '&'
     && lk != 328134                // 'i32' Identifier '&'
     && lk != 328135                // 'i64' Identifier '&'
     && lk != 338899                // '{' '}' '&'
     && lk != 344513                // 'f32' Identifier '&&'
     && lk != 344514                // 'f64' Identifier '&&'
     && lk != 344518                // 'i32' Identifier '&&'
     && lk != 344519                // 'i64' Identifier '&&'
     && lk != 355283                // '{' '}' '&&'
     && lk != 360897                // 'f32' Identifier '&='
     && lk != 360898                // 'f64' Identifier '&='
     && lk != 360902                // 'i32' Identifier '&='
     && lk != 360903                // 'i64' Identifier '&='
     && lk != 371667                // '{' '}' '&='
     && lk != 377427                // '{' Null '('
     && lk != 377555                // '{' True '('
     && lk != 377683                // '{' False '('
     && lk != 377811                // '{' Character '('
     && lk != 377939                // '{' String '('
     && lk != 378067                // '{' Integer '('
     && lk != 378195                // '{' Complex '('
     && lk != 378323                // '{' Real '('
     && lk != 378451                // '{' Comment '('
     && lk != 382035                // '{' ';' '('
     && lk != 384211                // '{' 'break' '('
     && lk != 384595                // '{' 'continue' '('
     && lk != 393665                // 'f32' Identifier ')'
     && lk != 393666                // 'f64' Identifier ')'
     && lk != 393670                // 'i32' Identifier ')'
     && lk != 393671                // 'i64' Identifier ')'
     && lk != 410049                // 'f32' Identifier '*'
     && lk != 410050                // 'f64' Identifier '*'
     && lk != 410054                // 'i32' Identifier '*'
     && lk != 410055                // 'i64' Identifier '*'
     && lk != 420819                // '{' '}' '*'
     && lk != 426433                // 'f32' Identifier '**'
     && lk != 426434                // 'f64' Identifier '**'
     && lk != 426438                // 'i32' Identifier '**'
     && lk != 426439                // 'i64' Identifier '**'
     && lk != 437203                // '{' '}' '**'
     && lk != 442817                // 'f32' Identifier '*='
     && lk != 442818                // 'f64' Identifier '*='
     && lk != 442822                // 'i32' Identifier '*='
     && lk != 442823                // 'i64' Identifier '*='
     && lk != 453587                // '{' '}' '*='
     && lk != 459201                // 'f32' Identifier '+'
     && lk != 459202                // 'f64' Identifier '+'
     && lk != 459206                // 'i32' Identifier '+'
     && lk != 459207                // 'i64' Identifier '+'
     && lk != 460371                // '{' Comment '+'
     && lk != 463955                // '{' ';' '+'
     && lk != 466131                // '{' 'break' '+'
     && lk != 466515                // '{' 'continue' '+'
     && lk != 475585                // 'f32' Identifier '++'
     && lk != 475586                // 'f64' Identifier '++'
     && lk != 475590                // 'i32' Identifier '++'
     && lk != 475591                // 'i64' Identifier '++'
     && lk != 476755                // '{' Comment '++'
     && lk != 480339                // '{' ';' '++'
     && lk != 482515                // '{' 'break' '++'
     && lk != 482899                // '{' 'continue' '++'
     && lk != 491969                // 'f32' Identifier '+='
     && lk != 491970                // 'f64' Identifier '+='
     && lk != 491974                // 'i32' Identifier '+='
     && lk != 491975                // 'i64' Identifier '+='
     && lk != 502739                // '{' '}' '+='
     && lk != 508353                // 'f32' Identifier ','
     && lk != 508354                // 'f64' Identifier ','
     && lk != 508358                // 'i32' Identifier ','
     && lk != 508359                // 'i64' Identifier ','
     && lk != 508371                // '{' Identifier ','
     && lk != 508499                // '{' Null ','
     && lk != 508627                // '{' True ','
     && lk != 508755                // '{' False ','
     && lk != 508883                // '{' Character ','
     && lk != 509011                // '{' String ','
     && lk != 509139                // '{' Integer ','
     && lk != 509267                // '{' Complex ','
     && lk != 509395                // '{' Real ','
     && lk != 509523                // '{' Comment ','
     && lk != 513107                // '{' ';' ','
     && lk != 515283                // '{' 'break' ','
     && lk != 515667                // '{' 'continue' ','
     && lk != 518531                // Identifier '{' ','
     && lk != 524737                // 'f32' Identifier '-'
     && lk != 524738                // 'f64' Identifier '-'
     && lk != 524742                // 'i32' Identifier '-'
     && lk != 524743                // 'i64' Identifier '-'
     && lk != 525907                // '{' Comment '-'
     && lk != 529491                // '{' ';' '-'
     && lk != 531667                // '{' 'break' '-'
     && lk != 532051                // '{' 'continue' '-'
     && lk != 541121                // 'f32' Identifier '--'
     && lk != 541122                // 'f64' Identifier '--'
     && lk != 541126                // 'i32' Identifier '--'
     && lk != 541127                // 'i64' Identifier '--'
     && lk != 542291                // '{' Comment '--'
     && lk != 545875                // '{' ';' '--'
     && lk != 548051                // '{' 'break' '--'
     && lk != 548435                // '{' 'continue' '--'
     && lk != 557505                // 'f32' Identifier '-='
     && lk != 557506                // 'f64' Identifier '-='
     && lk != 557510                // 'i32' Identifier '-='
     && lk != 557511                // 'i64' Identifier '-='
     && lk != 568275                // '{' '}' '-='
     && lk != 590273                // 'f32' Identifier '/'
     && lk != 590274                // 'f64' Identifier '/'
     && lk != 590278                // 'i32' Identifier '/'
     && lk != 590279                // 'i64' Identifier '/'
     && lk != 601043                // '{' '}' '/'
     && lk != 606657                // 'f32' Identifier '/='
     && lk != 606658                // 'f64' Identifier '/='
     && lk != 606662                // 'i32' Identifier '/='
     && lk != 606663                // 'i64' Identifier '/='
     && lk != 617427                // '{' '}' '/='
     && lk != 623041                // 'f32' Identifier ':'
     && lk != 623042                // 'f64' Identifier ':'
     && lk != 623046                // 'i32' Identifier ':'
     && lk != 623047                // 'i64' Identifier ':'
     && lk != 623059                // '{' Identifier ':'
     && lk != 623699                // '{' String ':'
     && lk != 639425                // 'f32' Identifier ':='
     && lk != 639426                // 'f64' Identifier ':='
     && lk != 639430                // 'i32' Identifier ':='
     && lk != 639431                // 'i64' Identifier ':='
     && lk != 650195                // '{' '}' ':='
     && lk != 655809                // 'f32' Identifier ';'
     && lk != 655810                // 'f64' Identifier ';'
     && lk != 655814                // 'i32' Identifier ';'
     && lk != 655815                // 'i64' Identifier ';'
     && lk != 655827                // '{' Identifier ';'
     && lk != 655955                // '{' Null ';'
     && lk != 656083                // '{' True ';'
     && lk != 656211                // '{' False ';'
     && lk != 656339                // '{' Character ';'
     && lk != 656467                // '{' String ';'
     && lk != 656595                // '{' Integer ';'
     && lk != 656723                // '{' Complex ';'
     && lk != 656851                // '{' Real ';'
     && lk != 656979                // '{' Comment ';'
     && lk != 660563                // '{' ';' ';'
     && lk != 662739                // '{' 'break' ';'
     && lk != 663123                // '{' 'continue' ';'
     && lk != 672193                // 'f32' Identifier '<'
     && lk != 672194                // 'f64' Identifier '<'
     && lk != 672198                // 'i32' Identifier '<'
     && lk != 672199                // 'i64' Identifier '<'
     && lk != 682963                // '{' '}' '<'
     && lk != 688577                // 'f32' Identifier '<<'
     && lk != 688578                // 'f64' Identifier '<<'
     && lk != 688582                // 'i32' Identifier '<<'
     && lk != 688583                // 'i64' Identifier '<<'
     && lk != 699347                // '{' '}' '<<'
     && lk != 704961                // 'f32' Identifier '<<='
     && lk != 704962                // 'f64' Identifier '<<='
     && lk != 704966                // 'i32' Identifier '<<='
     && lk != 704967                // 'i64' Identifier '<<='
     && lk != 715731                // '{' '}' '<<='
     && lk != 721345                // 'f32' Identifier '<='
     && lk != 721346                // 'f64' Identifier '<='
     && lk != 721350                // 'i32' Identifier '<='
     && lk != 721351                // 'i64' Identifier '<='
     && lk != 732115                // '{' '}' '<='
     && lk != 737729                // 'f32' Identifier '='
     && lk != 737730                // 'f64' Identifier '='
     && lk != 737734                // 'i32' Identifier '='
     && lk != 737735                // 'i64' Identifier '='
     && lk != 748499                // '{' '}' '='
     && lk != 754113                // 'f32' Identifier '=='
     && lk != 754114                // 'f64' Identifier '=='
     && lk != 754118                // 'i32' Identifier '=='
     && lk != 754119                // 'i64' Identifier '=='
     && lk != 764883                // '{' '}' '=='
     && lk != 770497                // 'f32' Identifier '>'
     && lk != 770498                // 'f64' Identifier '>'
     && lk != 770502                // 'i32' Identifier '>'
     && lk != 770503                // 'i64' Identifier '>'
     && lk != 781267                // '{' '}' '>'
     && lk != 786881                // 'f32' Identifier '>='
     && lk != 786882                // 'f64' Identifier '>='
     && lk != 786886                // 'i32' Identifier '>='
     && lk != 786887                // 'i64' Identifier '>='
     && lk != 797651                // '{' '}' '>='
     && lk != 803265                // 'f32' Identifier '>>'
     && lk != 803266                // 'f64' Identifier '>>'
     && lk != 803270                // 'i32' Identifier '>>'
     && lk != 803271                // 'i64' Identifier '>>'
     && lk != 814035                // '{' '}' '>>'
     && lk != 819649                // 'f32' Identifier '>>='
     && lk != 819650                // 'f64' Identifier '>>='
     && lk != 819654                // 'i32' Identifier '>>='
     && lk != 819655                // 'i64' Identifier '>>='
     && lk != 830419                // '{' '}' '>>='
     && lk != 836033                // 'f32' Identifier '?'
     && lk != 836034                // 'f64' Identifier '?'
     && lk != 836038                // 'i32' Identifier '?'
     && lk != 836039                // 'i64' Identifier '?'
     && lk != 846803                // '{' '}' '?'
     && lk != 852417                // 'f32' Identifier '?='
     && lk != 852418                // 'f64' Identifier '?='
     && lk != 852422                // 'i32' Identifier '?='
     && lk != 852423                // 'i64' Identifier '?='
     && lk != 863187                // '{' '}' '?='
     && lk != 868801                // 'f32' Identifier '['
     && lk != 868802                // 'f64' Identifier '['
     && lk != 868806                // 'i32' Identifier '['
     && lk != 868807                // 'i64' Identifier '['
     && lk != 868947                // '{' Null '['
     && lk != 869075                // '{' True '['
     && lk != 869203                // '{' False '['
     && lk != 869331                // '{' Character '['
     && lk != 869459                // '{' String '['
     && lk != 869587                // '{' Integer '['
     && lk != 869715                // '{' Complex '['
     && lk != 869843                // '{' Real '['
     && lk != 869971                // '{' Comment '['
     && lk != 873555                // '{' ';' '['
     && lk != 875731                // '{' 'break' '['
     && lk != 876115                // '{' 'continue' '['
     && lk != 885185                // 'f32' Identifier ']'
     && lk != 885186                // 'f64' Identifier ']'
     && lk != 885190                // 'i32' Identifier ']'
     && lk != 885191                // 'i64' Identifier ']'
     && lk != 901569                // 'f32' Identifier '^'
     && lk != 901570                // 'f64' Identifier '^'
     && lk != 901574                // 'i32' Identifier '^'
     && lk != 901575                // 'i64' Identifier '^'
     && lk != 912339                // '{' '}' '^'
     && lk != 917953                // 'f32' Identifier '^='
     && lk != 917954                // 'f64' Identifier '^='
     && lk != 917958                // 'i32' Identifier '^='
     && lk != 917959                // 'i64' Identifier '^='
     && lk != 928723                // '{' '}' '^='
     && lk != 934337                // 'f32' Identifier 'break'
     && lk != 934338                // 'f64' Identifier 'break'
     && lk != 934342                // 'i32' Identifier 'break'
     && lk != 934343                // 'i64' Identifier 'break'
     && lk != 934355                // '{' Identifier 'break'
     && lk != 934483                // '{' Null 'break'
     && lk != 934611                // '{' True 'break'
     && lk != 934739                // '{' False 'break'
     && lk != 934867                // '{' Character 'break'
     && lk != 934995                // '{' String 'break'
     && lk != 935123                // '{' Integer 'break'
     && lk != 935251                // '{' Complex 'break'
     && lk != 935379                // '{' Real 'break'
     && lk != 935507                // '{' Comment 'break'
     && lk != 939091                // '{' ';' 'break'
     && lk != 941267                // '{' 'break' 'break'
     && lk != 941651                // '{' 'continue' 'break'
     && lk != 950721                // 'f32' Identifier 'case'
     && lk != 950722                // 'f64' Identifier 'case'
     && lk != 950726                // 'i32' Identifier 'case'
     && lk != 950727                // 'i64' Identifier 'case'
     && lk != 967105                // 'f32' Identifier 'catch'
     && lk != 967106                // 'f64' Identifier 'catch'
     && lk != 967110                // 'i32' Identifier 'catch'
     && lk != 967111                // 'i64' Identifier 'catch'
     && lk != 983489                // 'f32' Identifier 'continue'
     && lk != 983490                // 'f64' Identifier 'continue'
     && lk != 983494                // 'i32' Identifier 'continue'
     && lk != 983495                // 'i64' Identifier 'continue'
     && lk != 983507                // '{' Identifier 'continue'
     && lk != 983635                // '{' Null 'continue'
     && lk != 983763                // '{' True 'continue'
     && lk != 983891                // '{' False 'continue'
     && lk != 984019                // '{' Character 'continue'
     && lk != 984147                // '{' String 'continue'
     && lk != 984275                // '{' Integer 'continue'
     && lk != 984403                // '{' Complex 'continue'
     && lk != 984531                // '{' Real 'continue'
     && lk != 984659                // '{' Comment 'continue'
     && lk != 988243                // '{' ';' 'continue'
     && lk != 990419                // '{' 'break' 'continue'
     && lk != 990803                // '{' 'continue' 'continue'
     && lk != 999873                // 'f32' Identifier 'default'
     && lk != 999874                // 'f64' Identifier 'default'
     && lk != 999878                // 'i32' Identifier 'default'
     && lk != 999879                // 'i64' Identifier 'default'
     && lk != 1016257               // 'f32' Identifier 'do'
     && lk != 1016258               // 'f64' Identifier 'do'
     && lk != 1016262               // 'i32' Identifier 'do'
     && lk != 1016263               // 'i64' Identifier 'do'
     && lk != 1016275               // '{' Identifier 'do'
     && lk != 1016403               // '{' Null 'do'
     && lk != 1016531               // '{' True 'do'
     && lk != 1016659               // '{' False 'do'
     && lk != 1016787               // '{' Character 'do'
     && lk != 1016915               // '{' String 'do'
     && lk != 1017043               // '{' Integer 'do'
     && lk != 1017171               // '{' Complex 'do'
     && lk != 1017299               // '{' Real 'do'
     && lk != 1017427               // '{' Comment 'do'
     && lk != 1021011               // '{' ';' 'do'
     && lk != 1023187               // '{' 'break' 'do'
     && lk != 1023571               // '{' 'continue' 'do'
     && lk != 1032641               // 'f32' Identifier 'else'
     && lk != 1032642               // 'f64' Identifier 'else'
     && lk != 1032646               // 'i32' Identifier 'else'
     && lk != 1032647               // 'i64' Identifier 'else'
     && lk != 1049025               // 'f32' Identifier 'export'
     && lk != 1049026               // 'f64' Identifier 'export'
     && lk != 1049030               // 'i32' Identifier 'export'
     && lk != 1049031               // 'i64' Identifier 'export'
     && lk != 1049043               // '{' Identifier 'export'
     && lk != 1049171               // '{' Null 'export'
     && lk != 1049299               // '{' True 'export'
     && lk != 1049427               // '{' False 'export'
     && lk != 1049555               // '{' Character 'export'
     && lk != 1049683               // '{' String 'export'
     && lk != 1049811               // '{' Integer 'export'
     && lk != 1049939               // '{' Complex 'export'
     && lk != 1050067               // '{' Real 'export'
     && lk != 1050195               // '{' Comment 'export'
     && lk != 1053779               // '{' ';' 'export'
     && lk != 1055955               // '{' 'break' 'export'
     && lk != 1056339               // '{' 'continue' 'export'
     && lk != 1065409               // 'f32' Identifier 'f32'
     && lk != 1065410               // 'f64' Identifier 'f32'
     && lk != 1065414               // 'i32' Identifier 'f32'
     && lk != 1065415               // 'i64' Identifier 'f32'
     && lk != 1065427               // '{' Identifier 'f32'
     && lk != 1065555               // '{' Null 'f32'
     && lk != 1065683               // '{' True 'f32'
     && lk != 1065811               // '{' False 'f32'
     && lk != 1065939               // '{' Character 'f32'
     && lk != 1066067               // '{' String 'f32'
     && lk != 1066195               // '{' Integer 'f32'
     && lk != 1066323               // '{' Complex 'f32'
     && lk != 1066451               // '{' Real 'f32'
     && lk != 1066579               // '{' Comment 'f32'
     && lk != 1070163               // '{' ';' 'f32'
     && lk != 1072339               // '{' 'break' 'f32'
     && lk != 1072723               // '{' 'continue' 'f32'
     && lk != 1081793               // 'f32' Identifier 'f64'
     && lk != 1081794               // 'f64' Identifier 'f64'
     && lk != 1081798               // 'i32' Identifier 'f64'
     && lk != 1081799               // 'i64' Identifier 'f64'
     && lk != 1081811               // '{' Identifier 'f64'
     && lk != 1081939               // '{' Null 'f64'
     && lk != 1082067               // '{' True 'f64'
     && lk != 1082195               // '{' False 'f64'
     && lk != 1082323               // '{' Character 'f64'
     && lk != 1082451               // '{' String 'f64'
     && lk != 1082579               // '{' Integer 'f64'
     && lk != 1082707               // '{' Complex 'f64'
     && lk != 1082835               // '{' Real 'f64'
     && lk != 1082963               // '{' Comment 'f64'
     && lk != 1086547               // '{' ';' 'f64'
     && lk != 1088723               // '{' 'break' 'f64'
     && lk != 1089107               // '{' 'continue' 'f64'
     && lk != 1098177               // 'f32' Identifier 'for'
     && lk != 1098178               // 'f64' Identifier 'for'
     && lk != 1098182               // 'i32' Identifier 'for'
     && lk != 1098183               // 'i64' Identifier 'for'
     && lk != 1098195               // '{' Identifier 'for'
     && lk != 1098323               // '{' Null 'for'
     && lk != 1098451               // '{' True 'for'
     && lk != 1098579               // '{' False 'for'
     && lk != 1098707               // '{' Character 'for'
     && lk != 1098835               // '{' String 'for'
     && lk != 1098963               // '{' Integer 'for'
     && lk != 1099091               // '{' Complex 'for'
     && lk != 1099219               // '{' Real 'for'
     && lk != 1099347               // '{' Comment 'for'
     && lk != 1102931               // '{' ';' 'for'
     && lk != 1105107               // '{' 'break' 'for'
     && lk != 1105491               // '{' 'continue' 'for'
     && lk != 1114561               // 'f32' Identifier 'foreach'
     && lk != 1114562               // 'f64' Identifier 'foreach'
     && lk != 1114566               // 'i32' Identifier 'foreach'
     && lk != 1114567               // 'i64' Identifier 'foreach'
     && lk != 1114579               // '{' Identifier 'foreach'
     && lk != 1114707               // '{' Null 'foreach'
     && lk != 1114835               // '{' True 'foreach'
     && lk != 1114963               // '{' False 'foreach'
     && lk != 1115091               // '{' Character 'foreach'
     && lk != 1115219               // '{' String 'foreach'
     && lk != 1115347               // '{' Integer 'foreach'
     && lk != 1115475               // '{' Complex 'foreach'
     && lk != 1115603               // '{' Real 'foreach'
     && lk != 1115731               // '{' Comment 'foreach'
     && lk != 1119315               // '{' ';' 'foreach'
     && lk != 1121491               // '{' 'break' 'foreach'
     && lk != 1121875               // '{' 'continue' 'foreach'
     && lk != 1130945               // 'f32' Identifier 'global'
     && lk != 1130946               // 'f64' Identifier 'global'
     && lk != 1130950               // 'i32' Identifier 'global'
     && lk != 1130951               // 'i64' Identifier 'global'
     && lk != 1130963               // '{' Identifier 'global'
     && lk != 1131091               // '{' Null 'global'
     && lk != 1131219               // '{' True 'global'
     && lk != 1131347               // '{' False 'global'
     && lk != 1131475               // '{' Character 'global'
     && lk != 1131603               // '{' String 'global'
     && lk != 1131731               // '{' Integer 'global'
     && lk != 1131859               // '{' Complex 'global'
     && lk != 1131987               // '{' Real 'global'
     && lk != 1132115               // '{' Comment 'global'
     && lk != 1135699               // '{' ';' 'global'
     && lk != 1137875               // '{' 'break' 'global'
     && lk != 1138259               // '{' 'continue' 'global'
     && lk != 1147329               // 'f32' Identifier 'i32'
     && lk != 1147330               // 'f64' Identifier 'i32'
     && lk != 1147334               // 'i32' Identifier 'i32'
     && lk != 1147335               // 'i64' Identifier 'i32'
     && lk != 1147347               // '{' Identifier 'i32'
     && lk != 1147475               // '{' Null 'i32'
     && lk != 1147603               // '{' True 'i32'
     && lk != 1147731               // '{' False 'i32'
     && lk != 1147859               // '{' Character 'i32'
     && lk != 1147987               // '{' String 'i32'
     && lk != 1148115               // '{' Integer 'i32'
     && lk != 1148243               // '{' Complex 'i32'
     && lk != 1148371               // '{' Real 'i32'
     && lk != 1148499               // '{' Comment 'i32'
     && lk != 1152083               // '{' ';' 'i32'
     && lk != 1154259               // '{' 'break' 'i32'
     && lk != 1154643               // '{' 'continue' 'i32'
     && lk != 1163713               // 'f32' Identifier 'i64'
     && lk != 1163714               // 'f64' Identifier 'i64'
     && lk != 1163718               // 'i32' Identifier 'i64'
     && lk != 1163719               // 'i64' Identifier 'i64'
     && lk != 1163731               // '{' Identifier 'i64'
     && lk != 1163859               // '{' Null 'i64'
     && lk != 1163987               // '{' True 'i64'
     && lk != 1164115               // '{' False 'i64'
     && lk != 1164243               // '{' Character 'i64'
     && lk != 1164371               // '{' String 'i64'
     && lk != 1164499               // '{' Integer 'i64'
     && lk != 1164627               // '{' Complex 'i64'
     && lk != 1164755               // '{' Real 'i64'
     && lk != 1164883               // '{' Comment 'i64'
     && lk != 1168467               // '{' ';' 'i64'
     && lk != 1170643               // '{' 'break' 'i64'
     && lk != 1171027               // '{' 'continue' 'i64'
     && lk != 1180097               // 'f32' Identifier 'if'
     && lk != 1180098               // 'f64' Identifier 'if'
     && lk != 1180102               // 'i32' Identifier 'if'
     && lk != 1180103               // 'i64' Identifier 'if'
     && lk != 1180115               // '{' Identifier 'if'
     && lk != 1180243               // '{' Null 'if'
     && lk != 1180371               // '{' True 'if'
     && lk != 1180499               // '{' False 'if'
     && lk != 1180627               // '{' Character 'if'
     && lk != 1180755               // '{' String 'if'
     && lk != 1180883               // '{' Integer 'if'
     && lk != 1181011               // '{' Complex 'if'
     && lk != 1181139               // '{' Real 'if'
     && lk != 1181267               // '{' Comment 'if'
     && lk != 1184851               // '{' ';' 'if'
     && lk != 1187027               // '{' 'break' 'if'
     && lk != 1187411               // '{' 'continue' 'if'
     && lk != 1196481               // 'f32' Identifier 'import'
     && lk != 1196482               // 'f64' Identifier 'import'
     && lk != 1196486               // 'i32' Identifier 'import'
     && lk != 1196487               // 'i64' Identifier 'import'
     && lk != 1196499               // '{' Identifier 'import'
     && lk != 1196627               // '{' Null 'import'
     && lk != 1196755               // '{' True 'import'
     && lk != 1196883               // '{' False 'import'
     && lk != 1197011               // '{' Character 'import'
     && lk != 1197139               // '{' String 'import'
     && lk != 1197267               // '{' Integer 'import'
     && lk != 1197395               // '{' Complex 'import'
     && lk != 1197523               // '{' Real 'import'
     && lk != 1197651               // '{' Comment 'import'
     && lk != 1201235               // '{' ';' 'import'
     && lk != 1203411               // '{' 'break' 'import'
     && lk != 1203795               // '{' 'continue' 'import'
     && lk != 1212865               // 'f32' Identifier 'include'
     && lk != 1212866               // 'f64' Identifier 'include'
     && lk != 1212870               // 'i32' Identifier 'include'
     && lk != 1212871               // 'i64' Identifier 'include'
     && lk != 1212883               // '{' Identifier 'include'
     && lk != 1213011               // '{' Null 'include'
     && lk != 1213139               // '{' True 'include'
     && lk != 1213267               // '{' False 'include'
     && lk != 1213395               // '{' Character 'include'
     && lk != 1213523               // '{' String 'include'
     && lk != 1213651               // '{' Integer 'include'
     && lk != 1213779               // '{' Complex 'include'
     && lk != 1213907               // '{' Real 'include'
     && lk != 1214035               // '{' Comment 'include'
     && lk != 1217619               // '{' ';' 'include'
     && lk != 1219795               // '{' 'break' 'include'
     && lk != 1220179               // '{' 'continue' 'include'
     && lk != 1229249               // 'f32' Identifier 'local'
     && lk != 1229250               // 'f64' Identifier 'local'
     && lk != 1229254               // 'i32' Identifier 'local'
     && lk != 1229255               // 'i64' Identifier 'local'
     && lk != 1229267               // '{' Identifier 'local'
     && lk != 1229395               // '{' Null 'local'
     && lk != 1229523               // '{' True 'local'
     && lk != 1229651               // '{' False 'local'
     && lk != 1229779               // '{' Character 'local'
     && lk != 1229907               // '{' String 'local'
     && lk != 1230035               // '{' Integer 'local'
     && lk != 1230163               // '{' Complex 'local'
     && lk != 1230291               // '{' Real 'local'
     && lk != 1230419               // '{' Comment 'local'
     && lk != 1234003               // '{' ';' 'local'
     && lk != 1236179               // '{' 'break' 'local'
     && lk != 1236563               // '{' 'continue' 'local'
     && lk != 1245633               // 'f32' Identifier 'return'
     && lk != 1245634               // 'f64' Identifier 'return'
     && lk != 1245638               // 'i32' Identifier 'return'
     && lk != 1245639               // 'i64' Identifier 'return'
     && lk != 1245651               // '{' Identifier 'return'
     && lk != 1245779               // '{' Null 'return'
     && lk != 1245907               // '{' True 'return'
     && lk != 1246035               // '{' False 'return'
     && lk != 1246163               // '{' Character 'return'
     && lk != 1246291               // '{' String 'return'
     && lk != 1246419               // '{' Integer 'return'
     && lk != 1246547               // '{' Complex 'return'
     && lk != 1246675               // '{' Real 'return'
     && lk != 1246803               // '{' Comment 'return'
     && lk != 1250387               // '{' ';' 'return'
     && lk != 1252563               // '{' 'break' 'return'
     && lk != 1252947               // '{' 'continue' 'return'
     && lk != 1262017               // 'f32' Identifier 'switch'
     && lk != 1262018               // 'f64' Identifier 'switch'
     && lk != 1262022               // 'i32' Identifier 'switch'
     && lk != 1262023               // 'i64' Identifier 'switch'
     && lk != 1262035               // '{' Identifier 'switch'
     && lk != 1262163               // '{' Null 'switch'
     && lk != 1262291               // '{' True 'switch'
     && lk != 1262419               // '{' False 'switch'
     && lk != 1262547               // '{' Character 'switch'
     && lk != 1262675               // '{' String 'switch'
     && lk != 1262803               // '{' Integer 'switch'
     && lk != 1262931               // '{' Complex 'switch'
     && lk != 1263059               // '{' Real 'switch'
     && lk != 1263187               // '{' Comment 'switch'
     && lk != 1266771               // '{' ';' 'switch'
     && lk != 1268947               // '{' 'break' 'switch'
     && lk != 1269331               // '{' 'continue' 'switch'
     && lk != 1278401               // 'f32' Identifier 'test'
     && lk != 1278402               // 'f64' Identifier 'test'
     && lk != 1278406               // 'i32' Identifier 'test'
     && lk != 1278407               // 'i64' Identifier 'test'
     && lk != 1278419               // '{' Identifier 'test'
     && lk != 1278547               // '{' Null 'test'
     && lk != 1278675               // '{' True 'test'
     && lk != 1278803               // '{' False 'test'
     && lk != 1278931               // '{' Character 'test'
     && lk != 1279059               // '{' String 'test'
     && lk != 1279187               // '{' Integer 'test'
     && lk != 1279315               // '{' Complex 'test'
     && lk != 1279443               // '{' Real 'test'
     && lk != 1279571               // '{' Comment 'test'
     && lk != 1283155               // '{' ';' 'test'
     && lk != 1285331               // '{' 'break' 'test'
     && lk != 1285715               // '{' 'continue' 'test'
     && lk != 1294785               // 'f32' Identifier 'throw'
     && lk != 1294786               // 'f64' Identifier 'throw'
     && lk != 1294790               // 'i32' Identifier 'throw'
     && lk != 1294791               // 'i64' Identifier 'throw'
     && lk != 1294803               // '{' Identifier 'throw'
     && lk != 1294931               // '{' Null 'throw'
     && lk != 1295059               // '{' True 'throw'
     && lk != 1295187               // '{' False 'throw'
     && lk != 1295315               // '{' Character 'throw'
     && lk != 1295443               // '{' String 'throw'
     && lk != 1295571               // '{' Integer 'throw'
     && lk != 1295699               // '{' Complex 'throw'
     && lk != 1295827               // '{' Real 'throw'
     && lk != 1295955               // '{' Comment 'throw'
     && lk != 1299539               // '{' ';' 'throw'
     && lk != 1301715               // '{' 'break' 'throw'
     && lk != 1302099               // '{' 'continue' 'throw'
     && lk != 1311169               // 'f32' Identifier 'try'
     && lk != 1311170               // 'f64' Identifier 'try'
     && lk != 1311174               // 'i32' Identifier 'try'
     && lk != 1311175               // 'i64' Identifier 'try'
     && lk != 1311187               // '{' Identifier 'try'
     && lk != 1311315               // '{' Null 'try'
     && lk != 1311443               // '{' True 'try'
     && lk != 1311571               // '{' False 'try'
     && lk != 1311699               // '{' Character 'try'
     && lk != 1311827               // '{' String 'try'
     && lk != 1311955               // '{' Integer 'try'
     && lk != 1312083               // '{' Complex 'try'
     && lk != 1312211               // '{' Real 'try'
     && lk != 1312339               // '{' Comment 'try'
     && lk != 1315923               // '{' ';' 'try'
     && lk != 1318099               // '{' 'break' 'try'
     && lk != 1318483               // '{' 'continue' 'try'
     && lk != 1327553               // 'f32' Identifier 'typeof'
     && lk != 1327554               // 'f64' Identifier 'typeof'
     && lk != 1327558               // 'i32' Identifier 'typeof'
     && lk != 1327559               // 'i64' Identifier 'typeof'
     && lk != 1327571               // '{' Identifier 'typeof'
     && lk != 1327699               // '{' Null 'typeof'
     && lk != 1327827               // '{' True 'typeof'
     && lk != 1327955               // '{' False 'typeof'
     && lk != 1328083               // '{' Character 'typeof'
     && lk != 1328211               // '{' String 'typeof'
     && lk != 1328339               // '{' Integer 'typeof'
     && lk != 1328467               // '{' Complex 'typeof'
     && lk != 1328595               // '{' Real 'typeof'
     && lk != 1328723               // '{' Comment 'typeof'
     && lk != 1332307               // '{' ';' 'typeof'
     && lk != 1334483               // '{' 'break' 'typeof'
     && lk != 1334867               // '{' 'continue' 'typeof'
     && lk != 1343937               // 'f32' Identifier 'while'
     && lk != 1343938               // 'f64' Identifier 'while'
     && lk != 1343942               // 'i32' Identifier 'while'
     && lk != 1343943               // 'i64' Identifier 'while'
     && lk != 1343955               // '{' Identifier 'while'
     && lk != 1344083               // '{' Null 'while'
     && lk != 1344211               // '{' True 'while'
     && lk != 1344339               // '{' False 'while'
     && lk != 1344467               // '{' Character 'while'
     && lk != 1344595               // '{' String 'while'
     && lk != 1344723               // '{' Integer 'while'
     && lk != 1344851               // '{' Complex 'while'
     && lk != 1344979               // '{' Real 'while'
     && lk != 1345107               // '{' Comment 'while'
     && lk != 1348691               // '{' ';' 'while'
     && lk != 1350867               // '{' 'break' 'while'
     && lk != 1351251               // '{' 'continue' 'while'
     && lk != 1360321               // 'f32' Identifier '{'
     && lk != 1360322               // 'f64' Identifier '{'
     && lk != 1360326               // 'i32' Identifier '{'
     && lk != 1360327               // 'i64' Identifier '{'
     && lk != 1360467               // '{' Null '{'
     && lk != 1360595               // '{' True '{'
     && lk != 1360723               // '{' False '{'
     && lk != 1360851               // '{' Character '{'
     && lk != 1360979               // '{' String '{'
     && lk != 1361107               // '{' Integer '{'
     && lk != 1361235               // '{' Complex '{'
     && lk != 1361363               // '{' Real '{'
     && lk != 1361491               // '{' Comment '{'
     && lk != 1365075               // '{' ';' '{'
     && lk != 1367251               // '{' 'break' '{'
     && lk != 1367635               // '{' 'continue' '{'
     && lk != 1376705               // 'f32' Identifier '|'
     && lk != 1376706               // 'f64' Identifier '|'
     && lk != 1376710               // 'i32' Identifier '|'
     && lk != 1376711               // 'i64' Identifier '|'
     && lk != 1387475               // '{' '}' '|'
     && lk != 1393089               // 'f32' Identifier '|='
     && lk != 1393090               // 'f64' Identifier '|='
     && lk != 1393094               // 'i32' Identifier '|='
     && lk != 1393095               // 'i64' Identifier '|='
     && lk != 1403859               // '{' '}' '|='
     && lk != 1409473               // 'f32' Identifier '||'
     && lk != 1409474               // 'f64' Identifier '||'
     && lk != 1409478               // 'i32' Identifier '||'
     && lk != 1409479               // 'i64' Identifier '||'
     && lk != 1420243               // '{' '}' '||'
     && lk != 1425857               // 'f32' Identifier '}'
     && lk != 1425858               // 'f64' Identifier '}'
     && lk != 1425862               // 'i32' Identifier '}'
     && lk != 1425863               // 'i64' Identifier '}'
     && lk != 1442241               // 'f32' Identifier '~'
     && lk != 1442242               // 'f64' Identifier '~'
     && lk != 1442246               // 'i32' Identifier '~'
     && lk != 1442247               // 'i64' Identifier '~'
     && lk != 1442259               // '{' Identifier '~'
     && lk != 1442387               // '{' Null '~'
     && lk != 1442515               // '{' True '~'
     && lk != 1442643               // '{' False '~'
     && lk != 1442771               // '{' Character '~'
     && lk != 1442899               // '{' String '~'
     && lk != 1443027               // '{' Integer '~'
     && lk != 1443155               // '{' Complex '~'
     && lk != 1443283               // '{' Real '~'
     && lk != 1443411               // '{' Comment '~'
     && lk != 1446995               // '{' ';' '~'
     && lk != 1449171               // '{' 'break' '~'
     && lk != 1449555)              // '{' 'continue' '~'
    {
      lk = memoized(0, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2; var l3A = l3;
        var b3A = b3; var e3A = e3;
        try
        {
          try_Block();
          memoize(0, e0A, -2);
          lk = -5;
        }
        catch (p2A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
            b3 = b3A; e3 = e3A; end = e3A; }}}
            try_Statement();
            memoize(0, e0A, -3);
            lk = -5;
          }
          catch (p3A)
          {
            lk = -4;
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
            b3 = b3A; e3 = e3A; end = e3A; }}}
            memoize(0, e0A, -4);
          }
        }
      }
    }
    switch (lk)
    {
    case 12:                        // Comment
      consumeT(12);                 // Comment
      break;
    case -3:
    case 40:                        // ';'
    case 57:                        // 'break'
    case 60:                        // 'continue'
    case 62:                        // 'do'
    case 64:                        // 'export'
    case 67:                        // 'for'
    case 68:                        // 'foreach'
    case 69:                        // 'global'
    case 72:                        // 'if'
    case 73:                        // 'import'
    case 74:                        // 'include'
    case 75:                        // 'local'
    case 76:                        // 'return'
    case 77:                        // 'switch'
    case 78:                        // 'test'
    case 79:                        // 'throw'
    case 80:                        // 'try'
    case 81:                        // 'typeof'
    case 82:                        // 'while'
      try_Statement();
      break;
    case -4:
    case 4:                         // Null
    case 5:                         // True
    case 6:                         // False
    case 7:                         // Character
    case 8:                         // String
    case 9:                         // Integer
    case 10:                        // Complex
    case 11:                        // Real
    case 15:                        // '!'
    case 23:                        // '('
    case 28:                        // '+'
    case 29:                        // '++'
    case 32:                        // '-'
    case 33:                        // '--'
    case 53:                        // '['
    case 88:                        // '~'
    case 131:                       // Identifier END
    case 387:                       // Identifier Identifier
    case 515:                       // Identifier Null
    case 643:                       // Identifier True
    case 771:                       // Identifier False
    case 899:                       // Identifier Character
    case 1027:                      // Identifier String
    case 1155:                      // Identifier Integer
    case 1283:                      // Identifier Complex
    case 1411:                      // Identifier Real
    case 1539:                      // Identifier Comment
    case 1923:                      // Identifier '!'
    case 2051:                      // Identifier '!='
    case 2307:                      // Identifier '%'
    case 2435:                      // Identifier '%='
    case 2563:                      // Identifier '&'
    case 2691:                      // Identifier '&&'
    case 2819:                      // Identifier '&='
    case 3075:                      // Identifier ')'
    case 3203:                      // Identifier '*'
    case 3331:                      // Identifier '**'
    case 3459:                      // Identifier '*='
    case 3587:                      // Identifier '+'
    case 3715:                      // Identifier '++'
    case 3843:                      // Identifier '+='
    case 3971:                      // Identifier ','
    case 4051:                      // '{' ','
    case 4099:                      // Identifier '-'
    case 4227:                      // Identifier '--'
    case 4355:                      // Identifier '-='
    case 4611:                      // Identifier '/'
    case 4739:                      // Identifier '/='
    case 4867:                      // Identifier ':'
    case 4995:                      // Identifier ':='
    case 5123:                      // Identifier ';'
    case 5251:                      // Identifier '<'
    case 5379:                      // Identifier '<<'
    case 5507:                      // Identifier '<<='
    case 5635:                      // Identifier '<='
    case 5763:                      // Identifier '='
    case 5891:                      // Identifier '=='
    case 6019:                      // Identifier '>'
    case 6147:                      // Identifier '>='
    case 6275:                      // Identifier '>>'
    case 6403:                      // Identifier '>>='
    case 6531:                      // Identifier '?'
    case 6659:                      // Identifier '?='
    case 6787:                      // Identifier '['
    case 6915:                      // Identifier ']'
    case 7043:                      // Identifier '^'
    case 7171:                      // Identifier '^='
    case 7299:                      // Identifier 'break'
    case 7427:                      // Identifier 'case'
    case 7555:                      // Identifier 'catch'
    case 7683:                      // Identifier 'continue'
    case 7811:                      // Identifier 'default'
    case 7939:                      // Identifier 'do'
    case 8067:                      // Identifier 'else'
    case 8195:                      // Identifier 'export'
    case 8323:                      // Identifier 'f32'
    case 8451:                      // Identifier 'f64'
    case 8579:                      // Identifier 'for'
    case 8707:                      // Identifier 'foreach'
    case 8835:                      // Identifier 'global'
    case 8963:                      // Identifier 'i32'
    case 9091:                      // Identifier 'i64'
    case 9219:                      // Identifier 'if'
    case 9347:                      // Identifier 'import'
    case 9475:                      // Identifier 'include'
    case 9603:                      // Identifier 'local'
    case 9731:                      // Identifier 'return'
    case 9859:                      // Identifier 'switch'
    case 9987:                      // Identifier 'test'
    case 10115:                     // Identifier 'throw'
    case 10243:                     // Identifier 'try'
    case 10371:                     // Identifier 'typeof'
    case 10499:                     // Identifier 'while'
    case 10755:                     // Identifier '|'
    case 10883:                     // Identifier '|='
    case 11011:                     // Identifier '||'
    case 11139:                     // Identifier '}'
    case 11267:                     // Identifier '~'
    case 16833:                     // 'f32' Identifier END
    case 16834:                     // 'f64' Identifier END
    case 16838:                     // 'i32' Identifier END
    case 16839:                     // 'i64' Identifier END
    case 49601:                     // 'f32' Identifier Identifier
    case 49602:                     // 'f64' Identifier Identifier
    case 49606:                     // 'i32' Identifier Identifier
    case 49607:                     // 'i64' Identifier Identifier
    case 65985:                     // 'f32' Identifier Null
    case 65986:                     // 'f64' Identifier Null
    case 65990:                     // 'i32' Identifier Null
    case 65991:                     // 'i64' Identifier Null
    case 82369:                     // 'f32' Identifier True
    case 82370:                     // 'f64' Identifier True
    case 82374:                     // 'i32' Identifier True
    case 82375:                     // 'i64' Identifier True
    case 98753:                     // 'f32' Identifier False
    case 98754:                     // 'f64' Identifier False
    case 98758:                     // 'i32' Identifier False
    case 98759:                     // 'i64' Identifier False
    case 115137:                    // 'f32' Identifier Character
    case 115138:                    // 'f64' Identifier Character
    case 115142:                    // 'i32' Identifier Character
    case 115143:                    // 'i64' Identifier Character
    case 131521:                    // 'f32' Identifier String
    case 131522:                    // 'f64' Identifier String
    case 131526:                    // 'i32' Identifier String
    case 131527:                    // 'i64' Identifier String
    case 147905:                    // 'f32' Identifier Integer
    case 147906:                    // 'f64' Identifier Integer
    case 147910:                    // 'i32' Identifier Integer
    case 147911:                    // 'i64' Identifier Integer
    case 164289:                    // 'f32' Identifier Complex
    case 164290:                    // 'f64' Identifier Complex
    case 164294:                    // 'i32' Identifier Complex
    case 164295:                    // 'i64' Identifier Complex
    case 180673:                    // 'f32' Identifier Real
    case 180674:                    // 'f64' Identifier Real
    case 180678:                    // 'i32' Identifier Real
    case 180679:                    // 'i64' Identifier Real
    case 197057:                    // 'f32' Identifier Comment
    case 197058:                    // 'f64' Identifier Comment
    case 197062:                    // 'i32' Identifier Comment
    case 197063:                    // 'i64' Identifier Comment
    case 246209:                    // 'f32' Identifier '!'
    case 246210:                    // 'f64' Identifier '!'
    case 246214:                    // 'i32' Identifier '!'
    case 246215:                    // 'i64' Identifier '!'
    case 262593:                    // 'f32' Identifier '!='
    case 262594:                    // 'f64' Identifier '!='
    case 262598:                    // 'i32' Identifier '!='
    case 262599:                    // 'i64' Identifier '!='
    case 273363:                    // '{' '}' '!='
    case 295361:                    // 'f32' Identifier '%'
    case 295362:                    // 'f64' Identifier '%'
    case 295366:                    // 'i32' Identifier '%'
    case 295367:                    // 'i64' Identifier '%'
    case 306131:                    // '{' '}' '%'
    case 311745:                    // 'f32' Identifier '%='
    case 311746:                    // 'f64' Identifier '%='
    case 311750:                    // 'i32' Identifier '%='
    case 311751:                    // 'i64' Identifier '%='
    case 322515:                    // '{' '}' '%='
    case 328129:                    // 'f32' Identifier '&'
    case 328130:                    // 'f64' Identifier '&'
    case 328134:                    // 'i32' Identifier '&'
    case 328135:                    // 'i64' Identifier '&'
    case 338899:                    // '{' '}' '&'
    case 344513:                    // 'f32' Identifier '&&'
    case 344514:                    // 'f64' Identifier '&&'
    case 344518:                    // 'i32' Identifier '&&'
    case 344519:                    // 'i64' Identifier '&&'
    case 355283:                    // '{' '}' '&&'
    case 360897:                    // 'f32' Identifier '&='
    case 360898:                    // 'f64' Identifier '&='
    case 360902:                    // 'i32' Identifier '&='
    case 360903:                    // 'i64' Identifier '&='
    case 371667:                    // '{' '}' '&='
    case 393665:                    // 'f32' Identifier ')'
    case 393666:                    // 'f64' Identifier ')'
    case 393670:                    // 'i32' Identifier ')'
    case 393671:                    // 'i64' Identifier ')'
    case 410049:                    // 'f32' Identifier '*'
    case 410050:                    // 'f64' Identifier '*'
    case 410054:                    // 'i32' Identifier '*'
    case 410055:                    // 'i64' Identifier '*'
    case 420819:                    // '{' '}' '*'
    case 426433:                    // 'f32' Identifier '**'
    case 426434:                    // 'f64' Identifier '**'
    case 426438:                    // 'i32' Identifier '**'
    case 426439:                    // 'i64' Identifier '**'
    case 437203:                    // '{' '}' '**'
    case 442817:                    // 'f32' Identifier '*='
    case 442818:                    // 'f64' Identifier '*='
    case 442822:                    // 'i32' Identifier '*='
    case 442823:                    // 'i64' Identifier '*='
    case 453587:                    // '{' '}' '*='
    case 459201:                    // 'f32' Identifier '+'
    case 459202:                    // 'f64' Identifier '+'
    case 459206:                    // 'i32' Identifier '+'
    case 459207:                    // 'i64' Identifier '+'
    case 475585:                    // 'f32' Identifier '++'
    case 475586:                    // 'f64' Identifier '++'
    case 475590:                    // 'i32' Identifier '++'
    case 475591:                    // 'i64' Identifier '++'
    case 491969:                    // 'f32' Identifier '+='
    case 491970:                    // 'f64' Identifier '+='
    case 491974:                    // 'i32' Identifier '+='
    case 491975:                    // 'i64' Identifier '+='
    case 502739:                    // '{' '}' '+='
    case 508353:                    // 'f32' Identifier ','
    case 508354:                    // 'f64' Identifier ','
    case 508358:                    // 'i32' Identifier ','
    case 508359:                    // 'i64' Identifier ','
    case 508371:                    // '{' Identifier ','
    case 508499:                    // '{' Null ','
    case 508627:                    // '{' True ','
    case 508755:                    // '{' False ','
    case 508883:                    // '{' Character ','
    case 509011:                    // '{' String ','
    case 509139:                    // '{' Integer ','
    case 509267:                    // '{' Complex ','
    case 509395:                    // '{' Real ','
    case 509523:                    // '{' Comment ','
    case 513107:                    // '{' ';' ','
    case 515283:                    // '{' 'break' ','
    case 515667:                    // '{' 'continue' ','
    case 518531:                    // Identifier '{' ','
    case 524737:                    // 'f32' Identifier '-'
    case 524738:                    // 'f64' Identifier '-'
    case 524742:                    // 'i32' Identifier '-'
    case 524743:                    // 'i64' Identifier '-'
    case 541121:                    // 'f32' Identifier '--'
    case 541122:                    // 'f64' Identifier '--'
    case 541126:                    // 'i32' Identifier '--'
    case 541127:                    // 'i64' Identifier '--'
    case 557505:                    // 'f32' Identifier '-='
    case 557506:                    // 'f64' Identifier '-='
    case 557510:                    // 'i32' Identifier '-='
    case 557511:                    // 'i64' Identifier '-='
    case 568275:                    // '{' '}' '-='
    case 590273:                    // 'f32' Identifier '/'
    case 590274:                    // 'f64' Identifier '/'
    case 590278:                    // 'i32' Identifier '/'
    case 590279:                    // 'i64' Identifier '/'
    case 601043:                    // '{' '}' '/'
    case 606657:                    // 'f32' Identifier '/='
    case 606658:                    // 'f64' Identifier '/='
    case 606662:                    // 'i32' Identifier '/='
    case 606663:                    // 'i64' Identifier '/='
    case 617427:                    // '{' '}' '/='
    case 623041:                    // 'f32' Identifier ':'
    case 623042:                    // 'f64' Identifier ':'
    case 623046:                    // 'i32' Identifier ':'
    case 623047:                    // 'i64' Identifier ':'
    case 623059:                    // '{' Identifier ':'
    case 623699:                    // '{' String ':'
    case 639425:                    // 'f32' Identifier ':='
    case 639426:                    // 'f64' Identifier ':='
    case 639430:                    // 'i32' Identifier ':='
    case 639431:                    // 'i64' Identifier ':='
    case 650195:                    // '{' '}' ':='
    case 655809:                    // 'f32' Identifier ';'
    case 655810:                    // 'f64' Identifier ';'
    case 655814:                    // 'i32' Identifier ';'
    case 655815:                    // 'i64' Identifier ';'
    case 672193:                    // 'f32' Identifier '<'
    case 672194:                    // 'f64' Identifier '<'
    case 672198:                    // 'i32' Identifier '<'
    case 672199:                    // 'i64' Identifier '<'
    case 682963:                    // '{' '}' '<'
    case 688577:                    // 'f32' Identifier '<<'
    case 688578:                    // 'f64' Identifier '<<'
    case 688582:                    // 'i32' Identifier '<<'
    case 688583:                    // 'i64' Identifier '<<'
    case 699347:                    // '{' '}' '<<'
    case 704961:                    // 'f32' Identifier '<<='
    case 704962:                    // 'f64' Identifier '<<='
    case 704966:                    // 'i32' Identifier '<<='
    case 704967:                    // 'i64' Identifier '<<='
    case 715731:                    // '{' '}' '<<='
    case 721345:                    // 'f32' Identifier '<='
    case 721346:                    // 'f64' Identifier '<='
    case 721350:                    // 'i32' Identifier '<='
    case 721351:                    // 'i64' Identifier '<='
    case 732115:                    // '{' '}' '<='
    case 737729:                    // 'f32' Identifier '='
    case 737730:                    // 'f64' Identifier '='
    case 737734:                    // 'i32' Identifier '='
    case 737735:                    // 'i64' Identifier '='
    case 748499:                    // '{' '}' '='
    case 754113:                    // 'f32' Identifier '=='
    case 754114:                    // 'f64' Identifier '=='
    case 754118:                    // 'i32' Identifier '=='
    case 754119:                    // 'i64' Identifier '=='
    case 764883:                    // '{' '}' '=='
    case 770497:                    // 'f32' Identifier '>'
    case 770498:                    // 'f64' Identifier '>'
    case 770502:                    // 'i32' Identifier '>'
    case 770503:                    // 'i64' Identifier '>'
    case 781267:                    // '{' '}' '>'
    case 786881:                    // 'f32' Identifier '>='
    case 786882:                    // 'f64' Identifier '>='
    case 786886:                    // 'i32' Identifier '>='
    case 786887:                    // 'i64' Identifier '>='
    case 797651:                    // '{' '}' '>='
    case 803265:                    // 'f32' Identifier '>>'
    case 803266:                    // 'f64' Identifier '>>'
    case 803270:                    // 'i32' Identifier '>>'
    case 803271:                    // 'i64' Identifier '>>'
    case 814035:                    // '{' '}' '>>'
    case 819649:                    // 'f32' Identifier '>>='
    case 819650:                    // 'f64' Identifier '>>='
    case 819654:                    // 'i32' Identifier '>>='
    case 819655:                    // 'i64' Identifier '>>='
    case 830419:                    // '{' '}' '>>='
    case 836033:                    // 'f32' Identifier '?'
    case 836034:                    // 'f64' Identifier '?'
    case 836038:                    // 'i32' Identifier '?'
    case 836039:                    // 'i64' Identifier '?'
    case 846803:                    // '{' '}' '?'
    case 852417:                    // 'f32' Identifier '?='
    case 852418:                    // 'f64' Identifier '?='
    case 852422:                    // 'i32' Identifier '?='
    case 852423:                    // 'i64' Identifier '?='
    case 863187:                    // '{' '}' '?='
    case 868801:                    // 'f32' Identifier '['
    case 868802:                    // 'f64' Identifier '['
    case 868806:                    // 'i32' Identifier '['
    case 868807:                    // 'i64' Identifier '['
    case 885185:                    // 'f32' Identifier ']'
    case 885186:                    // 'f64' Identifier ']'
    case 885190:                    // 'i32' Identifier ']'
    case 885191:                    // 'i64' Identifier ']'
    case 901569:                    // 'f32' Identifier '^'
    case 901570:                    // 'f64' Identifier '^'
    case 901574:                    // 'i32' Identifier '^'
    case 901575:                    // 'i64' Identifier '^'
    case 912339:                    // '{' '}' '^'
    case 917953:                    // 'f32' Identifier '^='
    case 917954:                    // 'f64' Identifier '^='
    case 917958:                    // 'i32' Identifier '^='
    case 917959:                    // 'i64' Identifier '^='
    case 928723:                    // '{' '}' '^='
    case 934337:                    // 'f32' Identifier 'break'
    case 934338:                    // 'f64' Identifier 'break'
    case 934342:                    // 'i32' Identifier 'break'
    case 934343:                    // 'i64' Identifier 'break'
    case 950721:                    // 'f32' Identifier 'case'
    case 950722:                    // 'f64' Identifier 'case'
    case 950726:                    // 'i32' Identifier 'case'
    case 950727:                    // 'i64' Identifier 'case'
    case 967105:                    // 'f32' Identifier 'catch'
    case 967106:                    // 'f64' Identifier 'catch'
    case 967110:                    // 'i32' Identifier 'catch'
    case 967111:                    // 'i64' Identifier 'catch'
    case 983489:                    // 'f32' Identifier 'continue'
    case 983490:                    // 'f64' Identifier 'continue'
    case 983494:                    // 'i32' Identifier 'continue'
    case 983495:                    // 'i64' Identifier 'continue'
    case 999873:                    // 'f32' Identifier 'default'
    case 999874:                    // 'f64' Identifier 'default'
    case 999878:                    // 'i32' Identifier 'default'
    case 999879:                    // 'i64' Identifier 'default'
    case 1016257:                   // 'f32' Identifier 'do'
    case 1016258:                   // 'f64' Identifier 'do'
    case 1016262:                   // 'i32' Identifier 'do'
    case 1016263:                   // 'i64' Identifier 'do'
    case 1032641:                   // 'f32' Identifier 'else'
    case 1032642:                   // 'f64' Identifier 'else'
    case 1032646:                   // 'i32' Identifier 'else'
    case 1032647:                   // 'i64' Identifier 'else'
    case 1049025:                   // 'f32' Identifier 'export'
    case 1049026:                   // 'f64' Identifier 'export'
    case 1049030:                   // 'i32' Identifier 'export'
    case 1049031:                   // 'i64' Identifier 'export'
    case 1065409:                   // 'f32' Identifier 'f32'
    case 1065410:                   // 'f64' Identifier 'f32'
    case 1065414:                   // 'i32' Identifier 'f32'
    case 1065415:                   // 'i64' Identifier 'f32'
    case 1081793:                   // 'f32' Identifier 'f64'
    case 1081794:                   // 'f64' Identifier 'f64'
    case 1081798:                   // 'i32' Identifier 'f64'
    case 1081799:                   // 'i64' Identifier 'f64'
    case 1098177:                   // 'f32' Identifier 'for'
    case 1098178:                   // 'f64' Identifier 'for'
    case 1098182:                   // 'i32' Identifier 'for'
    case 1098183:                   // 'i64' Identifier 'for'
    case 1114561:                   // 'f32' Identifier 'foreach'
    case 1114562:                   // 'f64' Identifier 'foreach'
    case 1114566:                   // 'i32' Identifier 'foreach'
    case 1114567:                   // 'i64' Identifier 'foreach'
    case 1130945:                   // 'f32' Identifier 'global'
    case 1130946:                   // 'f64' Identifier 'global'
    case 1130950:                   // 'i32' Identifier 'global'
    case 1130951:                   // 'i64' Identifier 'global'
    case 1147329:                   // 'f32' Identifier 'i32'
    case 1147330:                   // 'f64' Identifier 'i32'
    case 1147334:                   // 'i32' Identifier 'i32'
    case 1147335:                   // 'i64' Identifier 'i32'
    case 1163713:                   // 'f32' Identifier 'i64'
    case 1163714:                   // 'f64' Identifier 'i64'
    case 1163718:                   // 'i32' Identifier 'i64'
    case 1163719:                   // 'i64' Identifier 'i64'
    case 1180097:                   // 'f32' Identifier 'if'
    case 1180098:                   // 'f64' Identifier 'if'
    case 1180102:                   // 'i32' Identifier 'if'
    case 1180103:                   // 'i64' Identifier 'if'
    case 1196481:                   // 'f32' Identifier 'import'
    case 1196482:                   // 'f64' Identifier 'import'
    case 1196486:                   // 'i32' Identifier 'import'
    case 1196487:                   // 'i64' Identifier 'import'
    case 1212865:                   // 'f32' Identifier 'include'
    case 1212866:                   // 'f64' Identifier 'include'
    case 1212870:                   // 'i32' Identifier 'include'
    case 1212871:                   // 'i64' Identifier 'include'
    case 1229249:                   // 'f32' Identifier 'local'
    case 1229250:                   // 'f64' Identifier 'local'
    case 1229254:                   // 'i32' Identifier 'local'
    case 1229255:                   // 'i64' Identifier 'local'
    case 1245633:                   // 'f32' Identifier 'return'
    case 1245634:                   // 'f64' Identifier 'return'
    case 1245638:                   // 'i32' Identifier 'return'
    case 1245639:                   // 'i64' Identifier 'return'
    case 1262017:                   // 'f32' Identifier 'switch'
    case 1262018:                   // 'f64' Identifier 'switch'
    case 1262022:                   // 'i32' Identifier 'switch'
    case 1262023:                   // 'i64' Identifier 'switch'
    case 1278401:                   // 'f32' Identifier 'test'
    case 1278402:                   // 'f64' Identifier 'test'
    case 1278406:                   // 'i32' Identifier 'test'
    case 1278407:                   // 'i64' Identifier 'test'
    case 1294785:                   // 'f32' Identifier 'throw'
    case 1294786:                   // 'f64' Identifier 'throw'
    case 1294790:                   // 'i32' Identifier 'throw'
    case 1294791:                   // 'i64' Identifier 'throw'
    case 1311169:                   // 'f32' Identifier 'try'
    case 1311170:                   // 'f64' Identifier 'try'
    case 1311174:                   // 'i32' Identifier 'try'
    case 1311175:                   // 'i64' Identifier 'try'
    case 1327553:                   // 'f32' Identifier 'typeof'
    case 1327554:                   // 'f64' Identifier 'typeof'
    case 1327558:                   // 'i32' Identifier 'typeof'
    case 1327559:                   // 'i64' Identifier 'typeof'
    case 1343937:                   // 'f32' Identifier 'while'
    case 1343938:                   // 'f64' Identifier 'while'
    case 1343942:                   // 'i32' Identifier 'while'
    case 1343943:                   // 'i64' Identifier 'while'
    case 1360321:                   // 'f32' Identifier '{'
    case 1360322:                   // 'f64' Identifier '{'
    case 1360326:                   // 'i32' Identifier '{'
    case 1360327:                   // 'i64' Identifier '{'
    case 1376705:                   // 'f32' Identifier '|'
    case 1376706:                   // 'f64' Identifier '|'
    case 1376710:                   // 'i32' Identifier '|'
    case 1376711:                   // 'i64' Identifier '|'
    case 1387475:                   // '{' '}' '|'
    case 1393089:                   // 'f32' Identifier '|='
    case 1393090:                   // 'f64' Identifier '|='
    case 1393094:                   // 'i32' Identifier '|='
    case 1393095:                   // 'i64' Identifier '|='
    case 1403859:                   // '{' '}' '|='
    case 1409473:                   // 'f32' Identifier '||'
    case 1409474:                   // 'f64' Identifier '||'
    case 1409478:                   // 'i32' Identifier '||'
    case 1409479:                   // 'i64' Identifier '||'
    case 1420243:                   // '{' '}' '||'
    case 1425857:                   // 'f32' Identifier '}'
    case 1425858:                   // 'f64' Identifier '}'
    case 1425862:                   // 'i32' Identifier '}'
    case 1425863:                   // 'i64' Identifier '}'
    case 1442241:                   // 'f32' Identifier '~'
    case 1442242:                   // 'f64' Identifier '~'
    case 1442246:                   // 'i32' Identifier '~'
    case 1442247:                   // 'i64' Identifier '~'
      try_Operation();
      break;
    case -5:
      break;
    default:
      try_Block();
    }
  }

  function parse_Block()
  {
    eventHandler.startNonterminal("Block", e0);
    consume(83);                    // '{'
    for (;;)
    {
      lookahead1W(35);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '}' |
                                    // '~'
      if (l1 == 87)                 // '}'
      {
        break;
      }
      whitespace();
      parse_Expression();
    }
    consume(87);                    // '}'
    eventHandler.endNonterminal("Block", e0);
  }

  function try_Block()
  {
    consumeT(83);                   // '{'
    for (;;)
    {
      lookahead1W(35);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '}' |
                                    // '~'
      if (l1 == 87)                 // '}'
      {
        break;
      }
      try_Expression();
    }
    consumeT(87);                   // '}'
  }

  function parse_Operation()
  {
    eventHandler.startNonterminal("Operation", e0);
    parse_VariableAssignment();
    eventHandler.endNonterminal("Operation", e0);
  }

  function try_Operation()
  {
    try_VariableAssignment();
  }

  function parse_VariableAssignment()
  {
    eventHandler.startNonterminal("VariableAssignment", e0);
    parse_ConditionalExpression();
    for (;;)
    {
      switch (l1)
      {
      case 19:                      // '%='
      case 22:                      // '&='
      case 27:                      // '*='
      case 30:                      // '+='
      case 34:                      // '-='
      case 37:                      // '/='
      case 39:                      // ':='
      case 43:                      // '<<='
      case 45:                      // '='
      case 50:                      // '>>='
      case 52:                      // '?='
      case 56:                      // '^='
      case 85:                      // '|='
        lookahead2W(23);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' |
                                    // 'f64' | 'i32' | 'i64' | '{' | '~'
        switch (lk)
        {
        case 403:                   // '%=' Identifier
        case 406:                   // '&=' Identifier
        case 411:                   // '*=' Identifier
        case 414:                   // '+=' Identifier
        case 418:                   // '-=' Identifier
        case 421:                   // '/=' Identifier
        case 423:                   // ':=' Identifier
        case 427:                   // '<<=' Identifier
        case 429:                   // '=' Identifier
        case 434:                   // '>>=' Identifier
        case 436:                   // '?=' Identifier
        case 440:                   // '^=' Identifier
        case 469:                   // '|=' Identifier
          lookahead3W(45);          // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' |
                                    // '.' | '/' | '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' |
                                    // '>' | '>=' | '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' |
                                    // 'case' | 'catch' | 'continue' | 'default' | 'do' | 'else' | 'export' | 'f32' |
                                    // 'f64' | 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' |
                                    // 'include' | 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' |
                                    // 'while' | '{' | '|' | '|=' | '||' | '}' | '~'
          break;
        case 2963:                  // '%=' '('
        case 2966:                  // '&=' '('
        case 2971:                  // '*=' '('
        case 2974:                  // '+=' '('
        case 2978:                  // '-=' '('
        case 2981:                  // '/=' '('
        case 2983:                  // ':=' '('
        case 2987:                  // '<<=' '('
        case 2989:                  // '=' '('
        case 2994:                  // '>>=' '('
        case 2996:                  // '?=' '('
        case 3000:                  // '^=' '('
        case 3029:                  // '|=' '('
          lookahead3W(29);          // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
          break;
        case 6803:                  // '%=' '['
        case 6806:                  // '&=' '['
        case 6811:                  // '*=' '['
        case 6814:                  // '+=' '['
        case 6818:                  // '-=' '['
        case 6821:                  // '/=' '['
        case 6823:                  // ':=' '['
        case 6827:                  // '<<=' '['
        case 6829:                  // '=' '['
        case 6834:                  // '>>=' '['
        case 6836:                  // '?=' '['
        case 6840:                  // '^=' '['
        case 6869:                  // '|=' '['
          lookahead3W(34);          // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | ']' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
          break;
        case 10643:                 // '%=' '{'
        case 10646:                 // '&=' '{'
        case 10651:                 // '*=' '{'
        case 10654:                 // '+=' '{'
        case 10658:                 // '-=' '{'
        case 10661:                 // '/=' '{'
        case 10663:                 // ':=' '{'
        case 10667:                 // '<<=' '{'
        case 10669:                 // '=' '{'
        case 10674:                 // '>>=' '{'
        case 10676:                 // '?=' '{'
        case 10680:                 // '^=' '{'
        case 10709:                 // '|=' '{'
          lookahead3W(38);          // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '}' |
                                    // '~'
          break;
        case 8339:                  // '%=' 'f32'
        case 8467:                  // '%=' 'f64'
        case 8979:                  // '%=' 'i32'
        case 9107:                  // '%=' 'i64'
        case 8342:                  // '&=' 'f32'
        case 8470:                  // '&=' 'f64'
        case 8982:                  // '&=' 'i32'
        case 9110:                  // '&=' 'i64'
        case 8347:                  // '*=' 'f32'
        case 8475:                  // '*=' 'f64'
        case 8987:                  // '*=' 'i32'
        case 9115:                  // '*=' 'i64'
        case 8350:                  // '+=' 'f32'
        case 8478:                  // '+=' 'f64'
        case 8990:                  // '+=' 'i32'
        case 9118:                  // '+=' 'i64'
        case 8354:                  // '-=' 'f32'
        case 8482:                  // '-=' 'f64'
        case 8994:                  // '-=' 'i32'
        case 9122:                  // '-=' 'i64'
        case 8357:                  // '/=' 'f32'
        case 8485:                  // '/=' 'f64'
        case 8997:                  // '/=' 'i32'
        case 9125:                  // '/=' 'i64'
        case 8359:                  // ':=' 'f32'
        case 8487:                  // ':=' 'f64'
        case 8999:                  // ':=' 'i32'
        case 9127:                  // ':=' 'i64'
        case 8363:                  // '<<=' 'f32'
        case 8491:                  // '<<=' 'f64'
        case 9003:                  // '<<=' 'i32'
        case 9131:                  // '<<=' 'i64'
        case 8365:                  // '=' 'f32'
        case 8493:                  // '=' 'f64'
        case 9005:                  // '=' 'i32'
        case 9133:                  // '=' 'i64'
        case 8370:                  // '>>=' 'f32'
        case 8498:                  // '>>=' 'f64'
        case 9010:                  // '>>=' 'i32'
        case 9138:                  // '>>=' 'i64'
        case 8372:                  // '?=' 'f32'
        case 8500:                  // '?=' 'f64'
        case 9012:                  // '?=' 'i32'
        case 9140:                  // '?=' 'i64'
        case 8376:                  // '^=' 'f32'
        case 8504:                  // '^=' 'f64'
        case 9016:                  // '^=' 'i32'
        case 9144:                  // '^=' 'i64'
        case 8405:                  // '|=' 'f32'
        case 8533:                  // '|=' 'f64'
        case 9045:                  // '|=' 'i32'
        case 9173:                  // '|=' 'i64'
          lookahead3W(0);           // Identifier | WhiteSpace^token
          break;
        case 1939:                  // '%=' '!'
        case 3603:                  // '%=' '+'
        case 3731:                  // '%=' '++'
        case 4115:                  // '%=' '-'
        case 4243:                  // '%=' '--'
        case 11283:                 // '%=' '~'
        case 1942:                  // '&=' '!'
        case 3606:                  // '&=' '+'
        case 3734:                  // '&=' '++'
        case 4118:                  // '&=' '-'
        case 4246:                  // '&=' '--'
        case 11286:                 // '&=' '~'
        case 1947:                  // '*=' '!'
        case 3611:                  // '*=' '+'
        case 3739:                  // '*=' '++'
        case 4123:                  // '*=' '-'
        case 4251:                  // '*=' '--'
        case 11291:                 // '*=' '~'
        case 1950:                  // '+=' '!'
        case 3614:                  // '+=' '+'
        case 3742:                  // '+=' '++'
        case 4126:                  // '+=' '-'
        case 4254:                  // '+=' '--'
        case 11294:                 // '+=' '~'
        case 1954:                  // '-=' '!'
        case 3618:                  // '-=' '+'
        case 3746:                  // '-=' '++'
        case 4130:                  // '-=' '-'
        case 4258:                  // '-=' '--'
        case 11298:                 // '-=' '~'
        case 1957:                  // '/=' '!'
        case 3621:                  // '/=' '+'
        case 3749:                  // '/=' '++'
        case 4133:                  // '/=' '-'
        case 4261:                  // '/=' '--'
        case 11301:                 // '/=' '~'
        case 1959:                  // ':=' '!'
        case 3623:                  // ':=' '+'
        case 3751:                  // ':=' '++'
        case 4135:                  // ':=' '-'
        case 4263:                  // ':=' '--'
        case 11303:                 // ':=' '~'
        case 1963:                  // '<<=' '!'
        case 3627:                  // '<<=' '+'
        case 3755:                  // '<<=' '++'
        case 4139:                  // '<<=' '-'
        case 4267:                  // '<<=' '--'
        case 11307:                 // '<<=' '~'
        case 1965:                  // '=' '!'
        case 3629:                  // '=' '+'
        case 3757:                  // '=' '++'
        case 4141:                  // '=' '-'
        case 4269:                  // '=' '--'
        case 11309:                 // '=' '~'
        case 1970:                  // '>>=' '!'
        case 3634:                  // '>>=' '+'
        case 3762:                  // '>>=' '++'
        case 4146:                  // '>>=' '-'
        case 4274:                  // '>>=' '--'
        case 11314:                 // '>>=' '~'
        case 1972:                  // '?=' '!'
        case 3636:                  // '?=' '+'
        case 3764:                  // '?=' '++'
        case 4148:                  // '?=' '-'
        case 4276:                  // '?=' '--'
        case 11316:                 // '?=' '~'
        case 1976:                  // '^=' '!'
        case 3640:                  // '^=' '+'
        case 3768:                  // '^=' '++'
        case 4152:                  // '^=' '-'
        case 4280:                  // '^=' '--'
        case 11320:                 // '^=' '~'
        case 2005:                  // '|=' '!'
        case 3669:                  // '|=' '+'
        case 3797:                  // '|=' '++'
        case 4181:                  // '|=' '-'
        case 4309:                  // '|=' '--'
        case 11349:                 // '|=' '~'
          lookahead3W(22);          // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
          break;
        case 531:                   // '%=' Null
        case 659:                   // '%=' True
        case 787:                   // '%=' False
        case 915:                   // '%=' Character
        case 1043:                  // '%=' String
        case 1171:                  // '%=' Integer
        case 1299:                  // '%=' Complex
        case 1427:                  // '%=' Real
        case 534:                   // '&=' Null
        case 662:                   // '&=' True
        case 790:                   // '&=' False
        case 918:                   // '&=' Character
        case 1046:                  // '&=' String
        case 1174:                  // '&=' Integer
        case 1302:                  // '&=' Complex
        case 1430:                  // '&=' Real
        case 539:                   // '*=' Null
        case 667:                   // '*=' True
        case 795:                   // '*=' False
        case 923:                   // '*=' Character
        case 1051:                  // '*=' String
        case 1179:                  // '*=' Integer
        case 1307:                  // '*=' Complex
        case 1435:                  // '*=' Real
        case 542:                   // '+=' Null
        case 670:                   // '+=' True
        case 798:                   // '+=' False
        case 926:                   // '+=' Character
        case 1054:                  // '+=' String
        case 1182:                  // '+=' Integer
        case 1310:                  // '+=' Complex
        case 1438:                  // '+=' Real
        case 546:                   // '-=' Null
        case 674:                   // '-=' True
        case 802:                   // '-=' False
        case 930:                   // '-=' Character
        case 1058:                  // '-=' String
        case 1186:                  // '-=' Integer
        case 1314:                  // '-=' Complex
        case 1442:                  // '-=' Real
        case 549:                   // '/=' Null
        case 677:                   // '/=' True
        case 805:                   // '/=' False
        case 933:                   // '/=' Character
        case 1061:                  // '/=' String
        case 1189:                  // '/=' Integer
        case 1317:                  // '/=' Complex
        case 1445:                  // '/=' Real
        case 551:                   // ':=' Null
        case 679:                   // ':=' True
        case 807:                   // ':=' False
        case 935:                   // ':=' Character
        case 1063:                  // ':=' String
        case 1191:                  // ':=' Integer
        case 1319:                  // ':=' Complex
        case 1447:                  // ':=' Real
        case 555:                   // '<<=' Null
        case 683:                   // '<<=' True
        case 811:                   // '<<=' False
        case 939:                   // '<<=' Character
        case 1067:                  // '<<=' String
        case 1195:                  // '<<=' Integer
        case 1323:                  // '<<=' Complex
        case 1451:                  // '<<=' Real
        case 557:                   // '=' Null
        case 685:                   // '=' True
        case 813:                   // '=' False
        case 941:                   // '=' Character
        case 1069:                  // '=' String
        case 1197:                  // '=' Integer
        case 1325:                  // '=' Complex
        case 1453:                  // '=' Real
        case 562:                   // '>>=' Null
        case 690:                   // '>>=' True
        case 818:                   // '>>=' False
        case 946:                   // '>>=' Character
        case 1074:                  // '>>=' String
        case 1202:                  // '>>=' Integer
        case 1330:                  // '>>=' Complex
        case 1458:                  // '>>=' Real
        case 564:                   // '?=' Null
        case 692:                   // '?=' True
        case 820:                   // '?=' False
        case 948:                   // '?=' Character
        case 1076:                  // '?=' String
        case 1204:                  // '?=' Integer
        case 1332:                  // '?=' Complex
        case 1460:                  // '?=' Real
        case 568:                   // '^=' Null
        case 696:                   // '^=' True
        case 824:                   // '^=' False
        case 952:                   // '^=' Character
        case 1080:                  // '^=' String
        case 1208:                  // '^=' Integer
        case 1336:                  // '^=' Complex
        case 1464:                  // '^=' Real
        case 597:                   // '|=' Null
        case 725:                   // '|=' True
        case 853:                   // '|=' False
        case 981:                   // '|=' Character
        case 1109:                  // '|=' String
        case 1237:                  // '|=' Integer
        case 1365:                  // '|=' Complex
        case 1493:                  // '|=' Real
          lookahead3W(44);          // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' |
                                    // '/' | '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' |
                                    // '>=' | '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' |
                                    // 'catch' | 'continue' | 'default' | 'do' | 'else' | 'export' | 'f32' | 'f64' |
                                    // 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' |
                                    // 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' |
                                    // '{' | '|' | '|=' | '||' | '}' | '~'
          break;
        }
        break;
      default:
        lk = l1;
      }
      if (lk != 1                   // END
       && lk != 3                   // Identifier
       && lk != 4                   // Null
       && lk != 5                   // True
       && lk != 6                   // False
       && lk != 7                   // Character
       && lk != 8                   // String
       && lk != 9                   // Integer
       && lk != 10                  // Complex
       && lk != 11                  // Real
       && lk != 12                  // Comment
       && lk != 15                  // '!'
       && lk != 23                  // '('
       && lk != 24                  // ')'
       && lk != 28                  // '+'
       && lk != 29                  // '++'
       && lk != 31                  // ','
       && lk != 32                  // '-'
       && lk != 33                  // '--'
       && lk != 38                  // ':'
       && lk != 40                  // ';'
       && lk != 53                  // '['
       && lk != 54                  // ']'
       && lk != 57                  // 'break'
       && lk != 58                  // 'case'
       && lk != 59                  // 'catch'
       && lk != 60                  // 'continue'
       && lk != 61                  // 'default'
       && lk != 62                  // 'do'
       && lk != 63                  // 'else'
       && lk != 64                  // 'export'
       && lk != 65                  // 'f32'
       && lk != 66                  // 'f64'
       && lk != 67                  // 'for'
       && lk != 68                  // 'foreach'
       && lk != 69                  // 'global'
       && lk != 70                  // 'i32'
       && lk != 71                  // 'i64'
       && lk != 72                  // 'if'
       && lk != 73                  // 'import'
       && lk != 74                  // 'include'
       && lk != 75                  // 'local'
       && lk != 76                  // 'return'
       && lk != 77                  // 'switch'
       && lk != 78                  // 'test'
       && lk != 79                  // 'throw'
       && lk != 80                  // 'try'
       && lk != 81                  // 'typeof'
       && lk != 82                  // 'while'
       && lk != 83                  // '{'
       && lk != 87                  // '}'
       && lk != 88)                 // '~'
      {
        lk = memoized(1, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2; var l3A = l3;
          var b3A = b3; var e3A = e3;
          try
          {
            switch (l1)
            {
            case 45:                // '='
              consumeT(45);         // '='
              break;
            case 27:                // '*='
              consumeT(27);         // '*='
              break;
            case 37:                // '/='
              consumeT(37);         // '/='
              break;
            case 19:                // '%='
              consumeT(19);         // '%='
              break;
            case 30:                // '+='
              consumeT(30);         // '+='
              break;
            case 34:                // '-='
              consumeT(34);         // '-='
              break;
            case 43:                // '<<='
              consumeT(43);         // '<<='
              break;
            case 50:                // '>>='
              consumeT(50);         // '>>='
              break;
            case 22:                // '&='
              consumeT(22);         // '&='
              break;
            case 56:                // '^='
              consumeT(56);         // '^='
              break;
            case 85:                // '|='
              consumeT(85);         // '|='
              break;
            case 52:                // '?='
              consumeT(52);         // '?='
              break;
            default:
              consumeT(39);         // ':='
            }
            lookahead1W(23);        // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' |
                                    // 'f64' | 'i32' | 'i64' | '{' | '~'
            try_ConditionalExpression();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
          b3 = b3A; e3 = e3A; end = e3A; }}}
          memoize(1, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 45:                      // '='
        consume(45);                // '='
        break;
      case 27:                      // '*='
        consume(27);                // '*='
        break;
      case 37:                      // '/='
        consume(37);                // '/='
        break;
      case 19:                      // '%='
        consume(19);                // '%='
        break;
      case 30:                      // '+='
        consume(30);                // '+='
        break;
      case 34:                      // '-='
        consume(34);                // '-='
        break;
      case 43:                      // '<<='
        consume(43);                // '<<='
        break;
      case 50:                      // '>>='
        consume(50);                // '>>='
        break;
      case 22:                      // '&='
        consume(22);                // '&='
        break;
      case 56:                      // '^='
        consume(56);                // '^='
        break;
      case 85:                      // '|='
        consume(85);                // '|='
        break;
      case 52:                      // '?='
        consume(52);                // '?='
        break;
      default:
        consume(39);                // ':='
      }
      lookahead1W(23);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' |
                                    // 'f64' | 'i32' | 'i64' | '{' | '~'
      whitespace();
      parse_ConditionalExpression();
    }
    eventHandler.endNonterminal("VariableAssignment", e0);
  }

  function try_VariableAssignment()
  {
    try_ConditionalExpression();
    for (;;)
    {
      switch (l1)
      {
      case 19:                      // '%='
      case 22:                      // '&='
      case 27:                      // '*='
      case 30:                      // '+='
      case 34:                      // '-='
      case 37:                      // '/='
      case 39:                      // ':='
      case 43:                      // '<<='
      case 45:                      // '='
      case 50:                      // '>>='
      case 52:                      // '?='
      case 56:                      // '^='
      case 85:                      // '|='
        lookahead2W(23);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' |
                                    // 'f64' | 'i32' | 'i64' | '{' | '~'
        switch (lk)
        {
        case 403:                   // '%=' Identifier
        case 406:                   // '&=' Identifier
        case 411:                   // '*=' Identifier
        case 414:                   // '+=' Identifier
        case 418:                   // '-=' Identifier
        case 421:                   // '/=' Identifier
        case 423:                   // ':=' Identifier
        case 427:                   // '<<=' Identifier
        case 429:                   // '=' Identifier
        case 434:                   // '>>=' Identifier
        case 436:                   // '?=' Identifier
        case 440:                   // '^=' Identifier
        case 469:                   // '|=' Identifier
          lookahead3W(45);          // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' |
                                    // '.' | '/' | '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' |
                                    // '>' | '>=' | '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' |
                                    // 'case' | 'catch' | 'continue' | 'default' | 'do' | 'else' | 'export' | 'f32' |
                                    // 'f64' | 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' |
                                    // 'include' | 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' |
                                    // 'while' | '{' | '|' | '|=' | '||' | '}' | '~'
          break;
        case 2963:                  // '%=' '('
        case 2966:                  // '&=' '('
        case 2971:                  // '*=' '('
        case 2974:                  // '+=' '('
        case 2978:                  // '-=' '('
        case 2981:                  // '/=' '('
        case 2983:                  // ':=' '('
        case 2987:                  // '<<=' '('
        case 2989:                  // '=' '('
        case 2994:                  // '>>=' '('
        case 2996:                  // '?=' '('
        case 3000:                  // '^=' '('
        case 3029:                  // '|=' '('
          lookahead3W(29);          // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
          break;
        case 6803:                  // '%=' '['
        case 6806:                  // '&=' '['
        case 6811:                  // '*=' '['
        case 6814:                  // '+=' '['
        case 6818:                  // '-=' '['
        case 6821:                  // '/=' '['
        case 6823:                  // ':=' '['
        case 6827:                  // '<<=' '['
        case 6829:                  // '=' '['
        case 6834:                  // '>>=' '['
        case 6836:                  // '?=' '['
        case 6840:                  // '^=' '['
        case 6869:                  // '|=' '['
          lookahead3W(34);          // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | ']' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
          break;
        case 10643:                 // '%=' '{'
        case 10646:                 // '&=' '{'
        case 10651:                 // '*=' '{'
        case 10654:                 // '+=' '{'
        case 10658:                 // '-=' '{'
        case 10661:                 // '/=' '{'
        case 10663:                 // ':=' '{'
        case 10667:                 // '<<=' '{'
        case 10669:                 // '=' '{'
        case 10674:                 // '>>=' '{'
        case 10676:                 // '?=' '{'
        case 10680:                 // '^=' '{'
        case 10709:                 // '|=' '{'
          lookahead3W(38);          // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '}' |
                                    // '~'
          break;
        case 8339:                  // '%=' 'f32'
        case 8467:                  // '%=' 'f64'
        case 8979:                  // '%=' 'i32'
        case 9107:                  // '%=' 'i64'
        case 8342:                  // '&=' 'f32'
        case 8470:                  // '&=' 'f64'
        case 8982:                  // '&=' 'i32'
        case 9110:                  // '&=' 'i64'
        case 8347:                  // '*=' 'f32'
        case 8475:                  // '*=' 'f64'
        case 8987:                  // '*=' 'i32'
        case 9115:                  // '*=' 'i64'
        case 8350:                  // '+=' 'f32'
        case 8478:                  // '+=' 'f64'
        case 8990:                  // '+=' 'i32'
        case 9118:                  // '+=' 'i64'
        case 8354:                  // '-=' 'f32'
        case 8482:                  // '-=' 'f64'
        case 8994:                  // '-=' 'i32'
        case 9122:                  // '-=' 'i64'
        case 8357:                  // '/=' 'f32'
        case 8485:                  // '/=' 'f64'
        case 8997:                  // '/=' 'i32'
        case 9125:                  // '/=' 'i64'
        case 8359:                  // ':=' 'f32'
        case 8487:                  // ':=' 'f64'
        case 8999:                  // ':=' 'i32'
        case 9127:                  // ':=' 'i64'
        case 8363:                  // '<<=' 'f32'
        case 8491:                  // '<<=' 'f64'
        case 9003:                  // '<<=' 'i32'
        case 9131:                  // '<<=' 'i64'
        case 8365:                  // '=' 'f32'
        case 8493:                  // '=' 'f64'
        case 9005:                  // '=' 'i32'
        case 9133:                  // '=' 'i64'
        case 8370:                  // '>>=' 'f32'
        case 8498:                  // '>>=' 'f64'
        case 9010:                  // '>>=' 'i32'
        case 9138:                  // '>>=' 'i64'
        case 8372:                  // '?=' 'f32'
        case 8500:                  // '?=' 'f64'
        case 9012:                  // '?=' 'i32'
        case 9140:                  // '?=' 'i64'
        case 8376:                  // '^=' 'f32'
        case 8504:                  // '^=' 'f64'
        case 9016:                  // '^=' 'i32'
        case 9144:                  // '^=' 'i64'
        case 8405:                  // '|=' 'f32'
        case 8533:                  // '|=' 'f64'
        case 9045:                  // '|=' 'i32'
        case 9173:                  // '|=' 'i64'
          lookahead3W(0);           // Identifier | WhiteSpace^token
          break;
        case 1939:                  // '%=' '!'
        case 3603:                  // '%=' '+'
        case 3731:                  // '%=' '++'
        case 4115:                  // '%=' '-'
        case 4243:                  // '%=' '--'
        case 11283:                 // '%=' '~'
        case 1942:                  // '&=' '!'
        case 3606:                  // '&=' '+'
        case 3734:                  // '&=' '++'
        case 4118:                  // '&=' '-'
        case 4246:                  // '&=' '--'
        case 11286:                 // '&=' '~'
        case 1947:                  // '*=' '!'
        case 3611:                  // '*=' '+'
        case 3739:                  // '*=' '++'
        case 4123:                  // '*=' '-'
        case 4251:                  // '*=' '--'
        case 11291:                 // '*=' '~'
        case 1950:                  // '+=' '!'
        case 3614:                  // '+=' '+'
        case 3742:                  // '+=' '++'
        case 4126:                  // '+=' '-'
        case 4254:                  // '+=' '--'
        case 11294:                 // '+=' '~'
        case 1954:                  // '-=' '!'
        case 3618:                  // '-=' '+'
        case 3746:                  // '-=' '++'
        case 4130:                  // '-=' '-'
        case 4258:                  // '-=' '--'
        case 11298:                 // '-=' '~'
        case 1957:                  // '/=' '!'
        case 3621:                  // '/=' '+'
        case 3749:                  // '/=' '++'
        case 4133:                  // '/=' '-'
        case 4261:                  // '/=' '--'
        case 11301:                 // '/=' '~'
        case 1959:                  // ':=' '!'
        case 3623:                  // ':=' '+'
        case 3751:                  // ':=' '++'
        case 4135:                  // ':=' '-'
        case 4263:                  // ':=' '--'
        case 11303:                 // ':=' '~'
        case 1963:                  // '<<=' '!'
        case 3627:                  // '<<=' '+'
        case 3755:                  // '<<=' '++'
        case 4139:                  // '<<=' '-'
        case 4267:                  // '<<=' '--'
        case 11307:                 // '<<=' '~'
        case 1965:                  // '=' '!'
        case 3629:                  // '=' '+'
        case 3757:                  // '=' '++'
        case 4141:                  // '=' '-'
        case 4269:                  // '=' '--'
        case 11309:                 // '=' '~'
        case 1970:                  // '>>=' '!'
        case 3634:                  // '>>=' '+'
        case 3762:                  // '>>=' '++'
        case 4146:                  // '>>=' '-'
        case 4274:                  // '>>=' '--'
        case 11314:                 // '>>=' '~'
        case 1972:                  // '?=' '!'
        case 3636:                  // '?=' '+'
        case 3764:                  // '?=' '++'
        case 4148:                  // '?=' '-'
        case 4276:                  // '?=' '--'
        case 11316:                 // '?=' '~'
        case 1976:                  // '^=' '!'
        case 3640:                  // '^=' '+'
        case 3768:                  // '^=' '++'
        case 4152:                  // '^=' '-'
        case 4280:                  // '^=' '--'
        case 11320:                 // '^=' '~'
        case 2005:                  // '|=' '!'
        case 3669:                  // '|=' '+'
        case 3797:                  // '|=' '++'
        case 4181:                  // '|=' '-'
        case 4309:                  // '|=' '--'
        case 11349:                 // '|=' '~'
          lookahead3W(22);          // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
          break;
        case 531:                   // '%=' Null
        case 659:                   // '%=' True
        case 787:                   // '%=' False
        case 915:                   // '%=' Character
        case 1043:                  // '%=' String
        case 1171:                  // '%=' Integer
        case 1299:                  // '%=' Complex
        case 1427:                  // '%=' Real
        case 534:                   // '&=' Null
        case 662:                   // '&=' True
        case 790:                   // '&=' False
        case 918:                   // '&=' Character
        case 1046:                  // '&=' String
        case 1174:                  // '&=' Integer
        case 1302:                  // '&=' Complex
        case 1430:                  // '&=' Real
        case 539:                   // '*=' Null
        case 667:                   // '*=' True
        case 795:                   // '*=' False
        case 923:                   // '*=' Character
        case 1051:                  // '*=' String
        case 1179:                  // '*=' Integer
        case 1307:                  // '*=' Complex
        case 1435:                  // '*=' Real
        case 542:                   // '+=' Null
        case 670:                   // '+=' True
        case 798:                   // '+=' False
        case 926:                   // '+=' Character
        case 1054:                  // '+=' String
        case 1182:                  // '+=' Integer
        case 1310:                  // '+=' Complex
        case 1438:                  // '+=' Real
        case 546:                   // '-=' Null
        case 674:                   // '-=' True
        case 802:                   // '-=' False
        case 930:                   // '-=' Character
        case 1058:                  // '-=' String
        case 1186:                  // '-=' Integer
        case 1314:                  // '-=' Complex
        case 1442:                  // '-=' Real
        case 549:                   // '/=' Null
        case 677:                   // '/=' True
        case 805:                   // '/=' False
        case 933:                   // '/=' Character
        case 1061:                  // '/=' String
        case 1189:                  // '/=' Integer
        case 1317:                  // '/=' Complex
        case 1445:                  // '/=' Real
        case 551:                   // ':=' Null
        case 679:                   // ':=' True
        case 807:                   // ':=' False
        case 935:                   // ':=' Character
        case 1063:                  // ':=' String
        case 1191:                  // ':=' Integer
        case 1319:                  // ':=' Complex
        case 1447:                  // ':=' Real
        case 555:                   // '<<=' Null
        case 683:                   // '<<=' True
        case 811:                   // '<<=' False
        case 939:                   // '<<=' Character
        case 1067:                  // '<<=' String
        case 1195:                  // '<<=' Integer
        case 1323:                  // '<<=' Complex
        case 1451:                  // '<<=' Real
        case 557:                   // '=' Null
        case 685:                   // '=' True
        case 813:                   // '=' False
        case 941:                   // '=' Character
        case 1069:                  // '=' String
        case 1197:                  // '=' Integer
        case 1325:                  // '=' Complex
        case 1453:                  // '=' Real
        case 562:                   // '>>=' Null
        case 690:                   // '>>=' True
        case 818:                   // '>>=' False
        case 946:                   // '>>=' Character
        case 1074:                  // '>>=' String
        case 1202:                  // '>>=' Integer
        case 1330:                  // '>>=' Complex
        case 1458:                  // '>>=' Real
        case 564:                   // '?=' Null
        case 692:                   // '?=' True
        case 820:                   // '?=' False
        case 948:                   // '?=' Character
        case 1076:                  // '?=' String
        case 1204:                  // '?=' Integer
        case 1332:                  // '?=' Complex
        case 1460:                  // '?=' Real
        case 568:                   // '^=' Null
        case 696:                   // '^=' True
        case 824:                   // '^=' False
        case 952:                   // '^=' Character
        case 1080:                  // '^=' String
        case 1208:                  // '^=' Integer
        case 1336:                  // '^=' Complex
        case 1464:                  // '^=' Real
        case 597:                   // '|=' Null
        case 725:                   // '|=' True
        case 853:                   // '|=' False
        case 981:                   // '|=' Character
        case 1109:                  // '|=' String
        case 1237:                  // '|=' Integer
        case 1365:                  // '|=' Complex
        case 1493:                  // '|=' Real
          lookahead3W(44);          // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' |
                                    // '/' | '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' |
                                    // '>=' | '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' |
                                    // 'catch' | 'continue' | 'default' | 'do' | 'else' | 'export' | 'f32' | 'f64' |
                                    // 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' |
                                    // 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' |
                                    // '{' | '|' | '|=' | '||' | '}' | '~'
          break;
        }
        break;
      default:
        lk = l1;
      }
      if (lk != 1                   // END
       && lk != 3                   // Identifier
       && lk != 4                   // Null
       && lk != 5                   // True
       && lk != 6                   // False
       && lk != 7                   // Character
       && lk != 8                   // String
       && lk != 9                   // Integer
       && lk != 10                  // Complex
       && lk != 11                  // Real
       && lk != 12                  // Comment
       && lk != 15                  // '!'
       && lk != 23                  // '('
       && lk != 24                  // ')'
       && lk != 28                  // '+'
       && lk != 29                  // '++'
       && lk != 31                  // ','
       && lk != 32                  // '-'
       && lk != 33                  // '--'
       && lk != 38                  // ':'
       && lk != 40                  // ';'
       && lk != 53                  // '['
       && lk != 54                  // ']'
       && lk != 57                  // 'break'
       && lk != 58                  // 'case'
       && lk != 59                  // 'catch'
       && lk != 60                  // 'continue'
       && lk != 61                  // 'default'
       && lk != 62                  // 'do'
       && lk != 63                  // 'else'
       && lk != 64                  // 'export'
       && lk != 65                  // 'f32'
       && lk != 66                  // 'f64'
       && lk != 67                  // 'for'
       && lk != 68                  // 'foreach'
       && lk != 69                  // 'global'
       && lk != 70                  // 'i32'
       && lk != 71                  // 'i64'
       && lk != 72                  // 'if'
       && lk != 73                  // 'import'
       && lk != 74                  // 'include'
       && lk != 75                  // 'local'
       && lk != 76                  // 'return'
       && lk != 77                  // 'switch'
       && lk != 78                  // 'test'
       && lk != 79                  // 'throw'
       && lk != 80                  // 'try'
       && lk != 81                  // 'typeof'
       && lk != 82                  // 'while'
       && lk != 83                  // '{'
       && lk != 87                  // '}'
       && lk != 88)                 // '~'
      {
        lk = memoized(1, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2; var l3A = l3;
          var b3A = b3; var e3A = e3;
          try
          {
            switch (l1)
            {
            case 45:                // '='
              consumeT(45);         // '='
              break;
            case 27:                // '*='
              consumeT(27);         // '*='
              break;
            case 37:                // '/='
              consumeT(37);         // '/='
              break;
            case 19:                // '%='
              consumeT(19);         // '%='
              break;
            case 30:                // '+='
              consumeT(30);         // '+='
              break;
            case 34:                // '-='
              consumeT(34);         // '-='
              break;
            case 43:                // '<<='
              consumeT(43);         // '<<='
              break;
            case 50:                // '>>='
              consumeT(50);         // '>>='
              break;
            case 22:                // '&='
              consumeT(22);         // '&='
              break;
            case 56:                // '^='
              consumeT(56);         // '^='
              break;
            case 85:                // '|='
              consumeT(85);         // '|='
              break;
            case 52:                // '?='
              consumeT(52);         // '?='
              break;
            default:
              consumeT(39);         // ':='
            }
            lookahead1W(23);        // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' |
                                    // 'f64' | 'i32' | 'i64' | '{' | '~'
            try_ConditionalExpression();
            memoize(1, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
            b3 = b3A; e3 = e3A; end = e3A; }}}
            memoize(1, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 45:                      // '='
        consumeT(45);               // '='
        break;
      case 27:                      // '*='
        consumeT(27);               // '*='
        break;
      case 37:                      // '/='
        consumeT(37);               // '/='
        break;
      case 19:                      // '%='
        consumeT(19);               // '%='
        break;
      case 30:                      // '+='
        consumeT(30);               // '+='
        break;
      case 34:                      // '-='
        consumeT(34);               // '-='
        break;
      case 43:                      // '<<='
        consumeT(43);               // '<<='
        break;
      case 50:                      // '>>='
        consumeT(50);               // '>>='
        break;
      case 22:                      // '&='
        consumeT(22);               // '&='
        break;
      case 56:                      // '^='
        consumeT(56);               // '^='
        break;
      case 85:                      // '|='
        consumeT(85);               // '|='
        break;
      case 52:                      // '?='
        consumeT(52);               // '?='
        break;
      default:
        consumeT(39);               // ':='
      }
      lookahead1W(23);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' |
                                    // 'f64' | 'i32' | 'i64' | '{' | '~'
      try_ConditionalExpression();
    }
  }

  function parse_ConditionalExpression()
  {
    eventHandler.startNonterminal("ConditionalExpression", e0);
    parse_LogicalORExpression();
    if (l1 == 51)                   // '?'
    {
      consume(51);                  // '?'
      lookahead1W(23);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' |
                                    // 'f64' | 'i32' | 'i64' | '{' | '~'
      whitespace();
      parse_VariableAssignment();
      consume(38);                  // ':'
      lookahead1W(23);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' |
                                    // 'f64' | 'i32' | 'i64' | '{' | '~'
      whitespace();
      parse_VariableAssignment();
    }
    eventHandler.endNonterminal("ConditionalExpression", e0);
  }

  function try_ConditionalExpression()
  {
    try_LogicalORExpression();
    if (l1 == 51)                   // '?'
    {
      consumeT(51);                 // '?'
      lookahead1W(23);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' |
                                    // 'f64' | 'i32' | 'i64' | '{' | '~'
      try_VariableAssignment();
      consumeT(38);                 // ':'
      lookahead1W(23);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' |
                                    // 'f64' | 'i32' | 'i64' | '{' | '~'
      try_VariableAssignment();
    }
  }

  function parse_LogicalORExpression()
  {
    eventHandler.startNonterminal("LogicalORExpression", e0);
    parse_LogicalANDExpression();
    for (;;)
    {
      if (l1 != 86)                 // '||'
      {
        break;
      }
      consume(86);                  // '||'
      lookahead1W(23);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' |
                                    // 'f64' | 'i32' | 'i64' | '{' | '~'
      whitespace();
      parse_LogicalANDExpression();
    }
    eventHandler.endNonterminal("LogicalORExpression", e0);
  }

  function try_LogicalORExpression()
  {
    try_LogicalANDExpression();
    for (;;)
    {
      if (l1 != 86)                 // '||'
      {
        break;
      }
      consumeT(86);                 // '||'
      lookahead1W(23);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' |
                                    // 'f64' | 'i32' | 'i64' | '{' | '~'
      try_LogicalANDExpression();
    }
  }

  function parse_LogicalANDExpression()
  {
    eventHandler.startNonterminal("LogicalANDExpression", e0);
    parse_BitwiseORExpression();
    for (;;)
    {
      if (l1 != 21)                 // '&&'
      {
        break;
      }
      consume(21);                  // '&&'
      lookahead1W(23);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' |
                                    // 'f64' | 'i32' | 'i64' | '{' | '~'
      whitespace();
      parse_BitwiseORExpression();
    }
    eventHandler.endNonterminal("LogicalANDExpression", e0);
  }

  function try_LogicalANDExpression()
  {
    try_BitwiseORExpression();
    for (;;)
    {
      if (l1 != 21)                 // '&&'
      {
        break;
      }
      consumeT(21);                 // '&&'
      lookahead1W(23);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' |
                                    // 'f64' | 'i32' | 'i64' | '{' | '~'
      try_BitwiseORExpression();
    }
  }

  function parse_BitwiseORExpression()
  {
    eventHandler.startNonterminal("BitwiseORExpression", e0);
    parse_BitwiseXORExpression();
    for (;;)
    {
      if (l1 != 84)                 // '|'
      {
        break;
      }
      consume(84);                  // '|'
      lookahead1W(23);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' |
                                    // 'f64' | 'i32' | 'i64' | '{' | '~'
      whitespace();
      parse_BitwiseXORExpression();
    }
    eventHandler.endNonterminal("BitwiseORExpression", e0);
  }

  function try_BitwiseORExpression()
  {
    try_BitwiseXORExpression();
    for (;;)
    {
      if (l1 != 84)                 // '|'
      {
        break;
      }
      consumeT(84);                 // '|'
      lookahead1W(23);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' |
                                    // 'f64' | 'i32' | 'i64' | '{' | '~'
      try_BitwiseXORExpression();
    }
  }

  function parse_BitwiseXORExpression()
  {
    eventHandler.startNonterminal("BitwiseXORExpression", e0);
    parse_BitwiseANDExpression();
    for (;;)
    {
      if (l1 != 55)                 // '^'
      {
        break;
      }
      consume(55);                  // '^'
      lookahead1W(23);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' |
                                    // 'f64' | 'i32' | 'i64' | '{' | '~'
      whitespace();
      parse_BitwiseANDExpression();
    }
    eventHandler.endNonterminal("BitwiseXORExpression", e0);
  }

  function try_BitwiseXORExpression()
  {
    try_BitwiseANDExpression();
    for (;;)
    {
      if (l1 != 55)                 // '^'
      {
        break;
      }
      consumeT(55);                 // '^'
      lookahead1W(23);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' |
                                    // 'f64' | 'i32' | 'i64' | '{' | '~'
      try_BitwiseANDExpression();
    }
  }

  function parse_BitwiseANDExpression()
  {
    eventHandler.startNonterminal("BitwiseANDExpression", e0);
    parse_EqualityExpression();
    for (;;)
    {
      if (l1 != 20)                 // '&'
      {
        break;
      }
      consume(20);                  // '&'
      lookahead1W(23);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' |
                                    // 'f64' | 'i32' | 'i64' | '{' | '~'
      whitespace();
      parse_EqualityExpression();
    }
    eventHandler.endNonterminal("BitwiseANDExpression", e0);
  }

  function try_BitwiseANDExpression()
  {
    try_EqualityExpression();
    for (;;)
    {
      if (l1 != 20)                 // '&'
      {
        break;
      }
      consumeT(20);                 // '&'
      lookahead1W(23);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' |
                                    // 'f64' | 'i32' | 'i64' | '{' | '~'
      try_EqualityExpression();
    }
  }

  function parse_EqualityExpression()
  {
    eventHandler.startNonterminal("EqualityExpression", e0);
    parse_RelationalExpression();
    for (;;)
    {
      if (l1 != 16                  // '!='
       && l1 != 46)                 // '=='
      {
        break;
      }
      switch (l1)
      {
      case 46:                      // '=='
        consume(46);                // '=='
        break;
      default:
        consume(16);                // '!='
      }
      lookahead1W(23);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' |
                                    // 'f64' | 'i32' | 'i64' | '{' | '~'
      whitespace();
      parse_RelationalExpression();
    }
    eventHandler.endNonterminal("EqualityExpression", e0);
  }

  function try_EqualityExpression()
  {
    try_RelationalExpression();
    for (;;)
    {
      if (l1 != 16                  // '!='
       && l1 != 46)                 // '=='
      {
        break;
      }
      switch (l1)
      {
      case 46:                      // '=='
        consumeT(46);               // '=='
        break;
      default:
        consumeT(16);               // '!='
      }
      lookahead1W(23);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' |
                                    // 'f64' | 'i32' | 'i64' | '{' | '~'
      try_RelationalExpression();
    }
  }

  function parse_RelationalExpression()
  {
    eventHandler.startNonterminal("RelationalExpression", e0);
    parse_ShiftExpression();
    for (;;)
    {
      if (l1 != 41                  // '<'
       && l1 != 44                  // '<='
       && l1 != 47                  // '>'
       && l1 != 48)                 // '>='
      {
        break;
      }
      switch (l1)
      {
      case 41:                      // '<'
        consume(41);                // '<'
        break;
      case 47:                      // '>'
        consume(47);                // '>'
        break;
      case 44:                      // '<='
        consume(44);                // '<='
        break;
      default:
        consume(48);                // '>='
      }
      lookahead1W(23);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' |
                                    // 'f64' | 'i32' | 'i64' | '{' | '~'
      whitespace();
      parse_ShiftExpression();
    }
    eventHandler.endNonterminal("RelationalExpression", e0);
  }

  function try_RelationalExpression()
  {
    try_ShiftExpression();
    for (;;)
    {
      if (l1 != 41                  // '<'
       && l1 != 44                  // '<='
       && l1 != 47                  // '>'
       && l1 != 48)                 // '>='
      {
        break;
      }
      switch (l1)
      {
      case 41:                      // '<'
        consumeT(41);               // '<'
        break;
      case 47:                      // '>'
        consumeT(47);               // '>'
        break;
      case 44:                      // '<='
        consumeT(44);               // '<='
        break;
      default:
        consumeT(48);               // '>='
      }
      lookahead1W(23);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' |
                                    // 'f64' | 'i32' | 'i64' | '{' | '~'
      try_ShiftExpression();
    }
  }

  function parse_ShiftExpression()
  {
    eventHandler.startNonterminal("ShiftExpression", e0);
    parse_AdditiveExpression();
    for (;;)
    {
      if (l1 != 42                  // '<<'
       && l1 != 49)                 // '>>'
      {
        break;
      }
      switch (l1)
      {
      case 42:                      // '<<'
        consume(42);                // '<<'
        break;
      default:
        consume(49);                // '>>'
      }
      lookahead1W(23);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' |
                                    // 'f64' | 'i32' | 'i64' | '{' | '~'
      whitespace();
      parse_AdditiveExpression();
    }
    eventHandler.endNonterminal("ShiftExpression", e0);
  }

  function try_ShiftExpression()
  {
    try_AdditiveExpression();
    for (;;)
    {
      if (l1 != 42                  // '<<'
       && l1 != 49)                 // '>>'
      {
        break;
      }
      switch (l1)
      {
      case 42:                      // '<<'
        consumeT(42);               // '<<'
        break;
      default:
        consumeT(49);               // '>>'
      }
      lookahead1W(23);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' |
                                    // 'f64' | 'i32' | 'i64' | '{' | '~'
      try_AdditiveExpression();
    }
  }

  function parse_AdditiveExpression()
  {
    eventHandler.startNonterminal("AdditiveExpression", e0);
    parse_PowerExpression();
    for (;;)
    {
      switch (l1)
      {
      case 28:                      // '+'
      case 32:                      // '-'
        lookahead2W(23);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' |
                                    // 'f64' | 'i32' | 'i64' | '{' | '~'
        switch (lk)
        {
        case 412:                   // '+' Identifier
        case 416:                   // '-' Identifier
          lookahead3W(45);          // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' |
                                    // '.' | '/' | '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' |
                                    // '>' | '>=' | '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' |
                                    // 'case' | 'catch' | 'continue' | 'default' | 'do' | 'else' | 'export' | 'f32' |
                                    // 'f64' | 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' |
                                    // 'include' | 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' |
                                    // 'while' | '{' | '|' | '|=' | '||' | '}' | '~'
          break;
        case 2972:                  // '+' '('
        case 2976:                  // '-' '('
          lookahead3W(29);          // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
          break;
        case 6812:                  // '+' '['
        case 6816:                  // '-' '['
          lookahead3W(34);          // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | ']' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
          break;
        case 10652:                 // '+' '{'
        case 10656:                 // '-' '{'
          lookahead3W(38);          // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '}' |
                                    // '~'
          break;
        case 8348:                  // '+' 'f32'
        case 8476:                  // '+' 'f64'
        case 8988:                  // '+' 'i32'
        case 9116:                  // '+' 'i64'
        case 8352:                  // '-' 'f32'
        case 8480:                  // '-' 'f64'
        case 8992:                  // '-' 'i32'
        case 9120:                  // '-' 'i64'
          lookahead3W(0);           // Identifier | WhiteSpace^token
          break;
        case 540:                   // '+' Null
        case 668:                   // '+' True
        case 796:                   // '+' False
        case 924:                   // '+' Character
        case 1052:                  // '+' String
        case 1180:                  // '+' Integer
        case 1308:                  // '+' Complex
        case 1436:                  // '+' Real
        case 544:                   // '-' Null
        case 672:                   // '-' True
        case 800:                   // '-' False
        case 928:                   // '-' Character
        case 1056:                  // '-' String
        case 1184:                  // '-' Integer
        case 1312:                  // '-' Complex
        case 1440:                  // '-' Real
          lookahead3W(44);          // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' |
                                    // '/' | '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' |
                                    // '>=' | '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' |
                                    // 'catch' | 'continue' | 'default' | 'do' | 'else' | 'export' | 'f32' | 'f64' |
                                    // 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' |
                                    // 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' |
                                    // '{' | '|' | '|=' | '||' | '}' | '~'
          break;
        }
        break;
      default:
        lk = l1;
      }
      if (lk != 1                   // END
       && lk != 3                   // Identifier
       && lk != 4                   // Null
       && lk != 5                   // True
       && lk != 6                   // False
       && lk != 7                   // Character
       && lk != 8                   // String
       && lk != 9                   // Integer
       && lk != 10                  // Complex
       && lk != 11                  // Real
       && lk != 12                  // Comment
       && lk != 15                  // '!'
       && lk != 16                  // '!='
       && lk != 19                  // '%='
       && lk != 20                  // '&'
       && lk != 21                  // '&&'
       && lk != 22                  // '&='
       && lk != 23                  // '('
       && lk != 24                  // ')'
       && lk != 27                  // '*='
       && lk != 29                  // '++'
       && lk != 30                  // '+='
       && lk != 31                  // ','
       && lk != 33                  // '--'
       && lk != 34                  // '-='
       && lk != 37                  // '/='
       && lk != 38                  // ':'
       && lk != 39                  // ':='
       && lk != 40                  // ';'
       && lk != 41                  // '<'
       && lk != 42                  // '<<'
       && lk != 43                  // '<<='
       && lk != 44                  // '<='
       && lk != 45                  // '='
       && lk != 46                  // '=='
       && lk != 47                  // '>'
       && lk != 48                  // '>='
       && lk != 49                  // '>>'
       && lk != 50                  // '>>='
       && lk != 51                  // '?'
       && lk != 52                  // '?='
       && lk != 53                  // '['
       && lk != 54                  // ']'
       && lk != 55                  // '^'
       && lk != 56                  // '^='
       && lk != 57                  // 'break'
       && lk != 58                  // 'case'
       && lk != 59                  // 'catch'
       && lk != 60                  // 'continue'
       && lk != 61                  // 'default'
       && lk != 62                  // 'do'
       && lk != 63                  // 'else'
       && lk != 64                  // 'export'
       && lk != 65                  // 'f32'
       && lk != 66                  // 'f64'
       && lk != 67                  // 'for'
       && lk != 68                  // 'foreach'
       && lk != 69                  // 'global'
       && lk != 70                  // 'i32'
       && lk != 71                  // 'i64'
       && lk != 72                  // 'if'
       && lk != 73                  // 'import'
       && lk != 74                  // 'include'
       && lk != 75                  // 'local'
       && lk != 76                  // 'return'
       && lk != 77                  // 'switch'
       && lk != 78                  // 'test'
       && lk != 79                  // 'throw'
       && lk != 80                  // 'try'
       && lk != 81                  // 'typeof'
       && lk != 82                  // 'while'
       && lk != 83                  // '{'
       && lk != 84                  // '|'
       && lk != 85                  // '|='
       && lk != 86                  // '||'
       && lk != 87                  // '}'
       && lk != 88                  // '~'
       && lk != 1948                // '+' '!'
       && lk != 1952                // '-' '!'
       && lk != 3612                // '+' '+'
       && lk != 3616                // '-' '+'
       && lk != 3740                // '+' '++'
       && lk != 3744                // '-' '++'
       && lk != 4124                // '+' '-'
       && lk != 4128                // '-' '-'
       && lk != 4252                // '+' '--'
       && lk != 4256                // '-' '--'
       && lk != 11292               // '+' '~'
       && lk != 11296               // '-' '~'
       && lk != 393628              // '+' Identifier ')'
       && lk != 393632              // '-' Identifier ')'
       && lk != 393756              // '+' Null ')'
       && lk != 393760              // '-' Null ')'
       && lk != 393884              // '+' True ')'
       && lk != 393888              // '-' True ')'
       && lk != 394012              // '+' False ')'
       && lk != 394016              // '-' False ')'
       && lk != 394140              // '+' Character ')'
       && lk != 394144              // '-' Character ')'
       && lk != 394268              // '+' String ')'
       && lk != 394272              // '-' String ')'
       && lk != 394396              // '+' Integer ')'
       && lk != 394400              // '-' Integer ')'
       && lk != 394524              // '+' Complex ')'
       && lk != 394528              // '-' Complex ')'
       && lk != 394652              // '+' Real ')'
       && lk != 394656              // '-' Real ')'
       && lk != 508316              // '+' Identifier ','
       && lk != 508320              // '-' Identifier ','
       && lk != 508444              // '+' Null ','
       && lk != 508448              // '-' Null ','
       && lk != 508572              // '+' True ','
       && lk != 508576              // '-' True ','
       && lk != 508700              // '+' False ','
       && lk != 508704              // '-' False ','
       && lk != 508828              // '+' Character ','
       && lk != 508832              // '-' Character ','
       && lk != 508956              // '+' String ','
       && lk != 508960              // '-' String ','
       && lk != 509084              // '+' Integer ','
       && lk != 509088              // '-' Integer ','
       && lk != 509212              // '+' Complex ','
       && lk != 509216              // '-' Complex ','
       && lk != 509340              // '+' Real ','
       && lk != 509344              // '-' Real ','
       && lk != 623004              // '+' Identifier ':'
       && lk != 623008              // '-' Identifier ':'
       && lk != 623132              // '+' Null ':'
       && lk != 623136              // '-' Null ':'
       && lk != 623260              // '+' True ':'
       && lk != 623264              // '-' True ':'
       && lk != 623388              // '+' False ':'
       && lk != 623392              // '-' False ':'
       && lk != 623516              // '+' Character ':'
       && lk != 623520              // '-' Character ':'
       && lk != 623644              // '+' String ':'
       && lk != 623648              // '-' String ':'
       && lk != 623772              // '+' Integer ':'
       && lk != 623776              // '-' Integer ':'
       && lk != 623900              // '+' Complex ':'
       && lk != 623904              // '-' Complex ':'
       && lk != 624028              // '+' Real ':'
       && lk != 624032              // '-' Real ':'
       && lk != 885148              // '+' Identifier ']'
       && lk != 885152              // '-' Identifier ']'
       && lk != 885276              // '+' Null ']'
       && lk != 885280              // '-' Null ']'
       && lk != 885404              // '+' True ']'
       && lk != 885408              // '-' True ']'
       && lk != 885532              // '+' False ']'
       && lk != 885536              // '-' False ']'
       && lk != 885660              // '+' Character ']'
       && lk != 885664              // '-' Character ']'
       && lk != 885788              // '+' String ']'
       && lk != 885792              // '-' String ']'
       && lk != 885916              // '+' Integer ']'
       && lk != 885920              // '-' Integer ']'
       && lk != 886044              // '+' Complex ']'
       && lk != 886048              // '-' Complex ']'
       && lk != 886172              // '+' Real ']'
       && lk != 886176              // '-' Real ']'
       && lk != 967068              // '+' Identifier 'catch'
       && lk != 967072              // '-' Identifier 'catch'
       && lk != 967196              // '+' Null 'catch'
       && lk != 967200              // '-' Null 'catch'
       && lk != 967324              // '+' True 'catch'
       && lk != 967328              // '-' True 'catch'
       && lk != 967452              // '+' False 'catch'
       && lk != 967456              // '-' False 'catch'
       && lk != 967580              // '+' Character 'catch'
       && lk != 967584              // '-' Character 'catch'
       && lk != 967708              // '+' String 'catch'
       && lk != 967712              // '-' String 'catch'
       && lk != 967836              // '+' Integer 'catch'
       && lk != 967840              // '-' Integer 'catch'
       && lk != 967964              // '+' Complex 'catch'
       && lk != 967968              // '-' Complex 'catch'
       && lk != 968092              // '+' Real 'catch'
       && lk != 968096              // '-' Real 'catch'
       && lk != 1032604             // '+' Identifier 'else'
       && lk != 1032608             // '-' Identifier 'else'
       && lk != 1032732             // '+' Null 'else'
       && lk != 1032736             // '-' Null 'else'
       && lk != 1032860             // '+' True 'else'
       && lk != 1032864             // '-' True 'else'
       && lk != 1032988             // '+' False 'else'
       && lk != 1032992             // '-' False 'else'
       && lk != 1033116             // '+' Character 'else'
       && lk != 1033120             // '-' Character 'else'
       && lk != 1033244             // '+' String 'else'
       && lk != 1033248             // '-' String 'else'
       && lk != 1033372             // '+' Integer 'else'
       && lk != 1033376             // '-' Integer 'else'
       && lk != 1033500             // '+' Complex 'else'
       && lk != 1033504             // '-' Complex 'else'
       && lk != 1033628             // '+' Real 'else'
       && lk != 1033632)            // '-' Real 'else'
      {
        lk = memoized(2, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2; var l3A = l3;
          var b3A = b3; var e3A = e3;
          try
          {
            switch (l1)
            {
            case 28:                // '+'
              consumeT(28);         // '+'
              break;
            default:
              consumeT(32);         // '-'
            }
            lookahead1W(23);        // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' |
                                    // 'f64' | 'i32' | 'i64' | '{' | '~'
            try_PowerExpression();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
          b3 = b3A; e3 = e3A; end = e3A; }}}
          memoize(2, e0, lk);
        }
      }
      if (lk == -2
       || lk == 1                   // END
       || lk == 3                   // Identifier
       || lk == 4                   // Null
       || lk == 5                   // True
       || lk == 6                   // False
       || lk == 7                   // Character
       || lk == 8                   // String
       || lk == 9                   // Integer
       || lk == 10                  // Complex
       || lk == 11                  // Real
       || lk == 12                  // Comment
       || lk == 15                  // '!'
       || lk == 16                  // '!='
       || lk == 19                  // '%='
       || lk == 20                  // '&'
       || lk == 21                  // '&&'
       || lk == 22                  // '&='
       || lk == 23                  // '('
       || lk == 24                  // ')'
       || lk == 27                  // '*='
       || lk == 29                  // '++'
       || lk == 30                  // '+='
       || lk == 31                  // ','
       || lk == 33                  // '--'
       || lk == 34                  // '-='
       || lk == 37                  // '/='
       || lk == 38                  // ':'
       || lk == 39                  // ':='
       || lk == 40                  // ';'
       || lk == 41                  // '<'
       || lk == 42                  // '<<'
       || lk == 43                  // '<<='
       || lk == 44                  // '<='
       || lk == 45                  // '='
       || lk == 46                  // '=='
       || lk == 47                  // '>'
       || lk == 48                  // '>='
       || lk == 49                  // '>>'
       || lk == 50                  // '>>='
       || lk == 51                  // '?'
       || lk == 52                  // '?='
       || lk == 53                  // '['
       || lk == 54                  // ']'
       || lk == 55                  // '^'
       || lk == 56                  // '^='
       || lk == 57                  // 'break'
       || lk == 58                  // 'case'
       || lk == 59                  // 'catch'
       || lk == 60                  // 'continue'
       || lk == 61                  // 'default'
       || lk == 62                  // 'do'
       || lk == 63                  // 'else'
       || lk == 64                  // 'export'
       || lk == 65                  // 'f32'
       || lk == 66                  // 'f64'
       || lk == 67                  // 'for'
       || lk == 68                  // 'foreach'
       || lk == 69                  // 'global'
       || lk == 70                  // 'i32'
       || lk == 71                  // 'i64'
       || lk == 72                  // 'if'
       || lk == 73                  // 'import'
       || lk == 74                  // 'include'
       || lk == 75                  // 'local'
       || lk == 76                  // 'return'
       || lk == 77                  // 'switch'
       || lk == 78                  // 'test'
       || lk == 79                  // 'throw'
       || lk == 80                  // 'try'
       || lk == 81                  // 'typeof'
       || lk == 82                  // 'while'
       || lk == 83                  // '{'
       || lk == 84                  // '|'
       || lk == 85                  // '|='
       || lk == 86                  // '||'
       || lk == 87                  // '}'
       || lk == 88)                 // '~'
      {
        break;
      }
      switch (l1)
      {
      case 28:                      // '+'
        consume(28);                // '+'
        break;
      default:
        consume(32);                // '-'
      }
      lookahead1W(23);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' |
                                    // 'f64' | 'i32' | 'i64' | '{' | '~'
      whitespace();
      parse_PowerExpression();
    }
    eventHandler.endNonterminal("AdditiveExpression", e0);
  }

  function try_AdditiveExpression()
  {
    try_PowerExpression();
    for (;;)
    {
      switch (l1)
      {
      case 28:                      // '+'
      case 32:                      // '-'
        lookahead2W(23);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' |
                                    // 'f64' | 'i32' | 'i64' | '{' | '~'
        switch (lk)
        {
        case 412:                   // '+' Identifier
        case 416:                   // '-' Identifier
          lookahead3W(45);          // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' |
                                    // '.' | '/' | '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' |
                                    // '>' | '>=' | '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' |
                                    // 'case' | 'catch' | 'continue' | 'default' | 'do' | 'else' | 'export' | 'f32' |
                                    // 'f64' | 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' |
                                    // 'include' | 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' |
                                    // 'while' | '{' | '|' | '|=' | '||' | '}' | '~'
          break;
        case 2972:                  // '+' '('
        case 2976:                  // '-' '('
          lookahead3W(29);          // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
          break;
        case 6812:                  // '+' '['
        case 6816:                  // '-' '['
          lookahead3W(34);          // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | ']' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
          break;
        case 10652:                 // '+' '{'
        case 10656:                 // '-' '{'
          lookahead3W(38);          // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '}' |
                                    // '~'
          break;
        case 8348:                  // '+' 'f32'
        case 8476:                  // '+' 'f64'
        case 8988:                  // '+' 'i32'
        case 9116:                  // '+' 'i64'
        case 8352:                  // '-' 'f32'
        case 8480:                  // '-' 'f64'
        case 8992:                  // '-' 'i32'
        case 9120:                  // '-' 'i64'
          lookahead3W(0);           // Identifier | WhiteSpace^token
          break;
        case 540:                   // '+' Null
        case 668:                   // '+' True
        case 796:                   // '+' False
        case 924:                   // '+' Character
        case 1052:                  // '+' String
        case 1180:                  // '+' Integer
        case 1308:                  // '+' Complex
        case 1436:                  // '+' Real
        case 544:                   // '-' Null
        case 672:                   // '-' True
        case 800:                   // '-' False
        case 928:                   // '-' Character
        case 1056:                  // '-' String
        case 1184:                  // '-' Integer
        case 1312:                  // '-' Complex
        case 1440:                  // '-' Real
          lookahead3W(44);          // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' |
                                    // '/' | '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' |
                                    // '>=' | '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' |
                                    // 'catch' | 'continue' | 'default' | 'do' | 'else' | 'export' | 'f32' | 'f64' |
                                    // 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' |
                                    // 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' |
                                    // '{' | '|' | '|=' | '||' | '}' | '~'
          break;
        }
        break;
      default:
        lk = l1;
      }
      if (lk != 1                   // END
       && lk != 3                   // Identifier
       && lk != 4                   // Null
       && lk != 5                   // True
       && lk != 6                   // False
       && lk != 7                   // Character
       && lk != 8                   // String
       && lk != 9                   // Integer
       && lk != 10                  // Complex
       && lk != 11                  // Real
       && lk != 12                  // Comment
       && lk != 15                  // '!'
       && lk != 16                  // '!='
       && lk != 19                  // '%='
       && lk != 20                  // '&'
       && lk != 21                  // '&&'
       && lk != 22                  // '&='
       && lk != 23                  // '('
       && lk != 24                  // ')'
       && lk != 27                  // '*='
       && lk != 29                  // '++'
       && lk != 30                  // '+='
       && lk != 31                  // ','
       && lk != 33                  // '--'
       && lk != 34                  // '-='
       && lk != 37                  // '/='
       && lk != 38                  // ':'
       && lk != 39                  // ':='
       && lk != 40                  // ';'
       && lk != 41                  // '<'
       && lk != 42                  // '<<'
       && lk != 43                  // '<<='
       && lk != 44                  // '<='
       && lk != 45                  // '='
       && lk != 46                  // '=='
       && lk != 47                  // '>'
       && lk != 48                  // '>='
       && lk != 49                  // '>>'
       && lk != 50                  // '>>='
       && lk != 51                  // '?'
       && lk != 52                  // '?='
       && lk != 53                  // '['
       && lk != 54                  // ']'
       && lk != 55                  // '^'
       && lk != 56                  // '^='
       && lk != 57                  // 'break'
       && lk != 58                  // 'case'
       && lk != 59                  // 'catch'
       && lk != 60                  // 'continue'
       && lk != 61                  // 'default'
       && lk != 62                  // 'do'
       && lk != 63                  // 'else'
       && lk != 64                  // 'export'
       && lk != 65                  // 'f32'
       && lk != 66                  // 'f64'
       && lk != 67                  // 'for'
       && lk != 68                  // 'foreach'
       && lk != 69                  // 'global'
       && lk != 70                  // 'i32'
       && lk != 71                  // 'i64'
       && lk != 72                  // 'if'
       && lk != 73                  // 'import'
       && lk != 74                  // 'include'
       && lk != 75                  // 'local'
       && lk != 76                  // 'return'
       && lk != 77                  // 'switch'
       && lk != 78                  // 'test'
       && lk != 79                  // 'throw'
       && lk != 80                  // 'try'
       && lk != 81                  // 'typeof'
       && lk != 82                  // 'while'
       && lk != 83                  // '{'
       && lk != 84                  // '|'
       && lk != 85                  // '|='
       && lk != 86                  // '||'
       && lk != 87                  // '}'
       && lk != 88                  // '~'
       && lk != 1948                // '+' '!'
       && lk != 1952                // '-' '!'
       && lk != 3612                // '+' '+'
       && lk != 3616                // '-' '+'
       && lk != 3740                // '+' '++'
       && lk != 3744                // '-' '++'
       && lk != 4124                // '+' '-'
       && lk != 4128                // '-' '-'
       && lk != 4252                // '+' '--'
       && lk != 4256                // '-' '--'
       && lk != 11292               // '+' '~'
       && lk != 11296               // '-' '~'
       && lk != 393628              // '+' Identifier ')'
       && lk != 393632              // '-' Identifier ')'
       && lk != 393756              // '+' Null ')'
       && lk != 393760              // '-' Null ')'
       && lk != 393884              // '+' True ')'
       && lk != 393888              // '-' True ')'
       && lk != 394012              // '+' False ')'
       && lk != 394016              // '-' False ')'
       && lk != 394140              // '+' Character ')'
       && lk != 394144              // '-' Character ')'
       && lk != 394268              // '+' String ')'
       && lk != 394272              // '-' String ')'
       && lk != 394396              // '+' Integer ')'
       && lk != 394400              // '-' Integer ')'
       && lk != 394524              // '+' Complex ')'
       && lk != 394528              // '-' Complex ')'
       && lk != 394652              // '+' Real ')'
       && lk != 394656              // '-' Real ')'
       && lk != 508316              // '+' Identifier ','
       && lk != 508320              // '-' Identifier ','
       && lk != 508444              // '+' Null ','
       && lk != 508448              // '-' Null ','
       && lk != 508572              // '+' True ','
       && lk != 508576              // '-' True ','
       && lk != 508700              // '+' False ','
       && lk != 508704              // '-' False ','
       && lk != 508828              // '+' Character ','
       && lk != 508832              // '-' Character ','
       && lk != 508956              // '+' String ','
       && lk != 508960              // '-' String ','
       && lk != 509084              // '+' Integer ','
       && lk != 509088              // '-' Integer ','
       && lk != 509212              // '+' Complex ','
       && lk != 509216              // '-' Complex ','
       && lk != 509340              // '+' Real ','
       && lk != 509344              // '-' Real ','
       && lk != 623004              // '+' Identifier ':'
       && lk != 623008              // '-' Identifier ':'
       && lk != 623132              // '+' Null ':'
       && lk != 623136              // '-' Null ':'
       && lk != 623260              // '+' True ':'
       && lk != 623264              // '-' True ':'
       && lk != 623388              // '+' False ':'
       && lk != 623392              // '-' False ':'
       && lk != 623516              // '+' Character ':'
       && lk != 623520              // '-' Character ':'
       && lk != 623644              // '+' String ':'
       && lk != 623648              // '-' String ':'
       && lk != 623772              // '+' Integer ':'
       && lk != 623776              // '-' Integer ':'
       && lk != 623900              // '+' Complex ':'
       && lk != 623904              // '-' Complex ':'
       && lk != 624028              // '+' Real ':'
       && lk != 624032              // '-' Real ':'
       && lk != 885148              // '+' Identifier ']'
       && lk != 885152              // '-' Identifier ']'
       && lk != 885276              // '+' Null ']'
       && lk != 885280              // '-' Null ']'
       && lk != 885404              // '+' True ']'
       && lk != 885408              // '-' True ']'
       && lk != 885532              // '+' False ']'
       && lk != 885536              // '-' False ']'
       && lk != 885660              // '+' Character ']'
       && lk != 885664              // '-' Character ']'
       && lk != 885788              // '+' String ']'
       && lk != 885792              // '-' String ']'
       && lk != 885916              // '+' Integer ']'
       && lk != 885920              // '-' Integer ']'
       && lk != 886044              // '+' Complex ']'
       && lk != 886048              // '-' Complex ']'
       && lk != 886172              // '+' Real ']'
       && lk != 886176              // '-' Real ']'
       && lk != 967068              // '+' Identifier 'catch'
       && lk != 967072              // '-' Identifier 'catch'
       && lk != 967196              // '+' Null 'catch'
       && lk != 967200              // '-' Null 'catch'
       && lk != 967324              // '+' True 'catch'
       && lk != 967328              // '-' True 'catch'
       && lk != 967452              // '+' False 'catch'
       && lk != 967456              // '-' False 'catch'
       && lk != 967580              // '+' Character 'catch'
       && lk != 967584              // '-' Character 'catch'
       && lk != 967708              // '+' String 'catch'
       && lk != 967712              // '-' String 'catch'
       && lk != 967836              // '+' Integer 'catch'
       && lk != 967840              // '-' Integer 'catch'
       && lk != 967964              // '+' Complex 'catch'
       && lk != 967968              // '-' Complex 'catch'
       && lk != 968092              // '+' Real 'catch'
       && lk != 968096              // '-' Real 'catch'
       && lk != 1032604             // '+' Identifier 'else'
       && lk != 1032608             // '-' Identifier 'else'
       && lk != 1032732             // '+' Null 'else'
       && lk != 1032736             // '-' Null 'else'
       && lk != 1032860             // '+' True 'else'
       && lk != 1032864             // '-' True 'else'
       && lk != 1032988             // '+' False 'else'
       && lk != 1032992             // '-' False 'else'
       && lk != 1033116             // '+' Character 'else'
       && lk != 1033120             // '-' Character 'else'
       && lk != 1033244             // '+' String 'else'
       && lk != 1033248             // '-' String 'else'
       && lk != 1033372             // '+' Integer 'else'
       && lk != 1033376             // '-' Integer 'else'
       && lk != 1033500             // '+' Complex 'else'
       && lk != 1033504             // '-' Complex 'else'
       && lk != 1033628             // '+' Real 'else'
       && lk != 1033632)            // '-' Real 'else'
      {
        lk = memoized(2, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2; var l3A = l3;
          var b3A = b3; var e3A = e3;
          try
          {
            switch (l1)
            {
            case 28:                // '+'
              consumeT(28);         // '+'
              break;
            default:
              consumeT(32);         // '-'
            }
            lookahead1W(23);        // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' |
                                    // 'f64' | 'i32' | 'i64' | '{' | '~'
            try_PowerExpression();
            memoize(2, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
            b3 = b3A; e3 = e3A; end = e3A; }}}
            memoize(2, e0A, -2);
            break;
          }
        }
      }
      if (lk == -2
       || lk == 1                   // END
       || lk == 3                   // Identifier
       || lk == 4                   // Null
       || lk == 5                   // True
       || lk == 6                   // False
       || lk == 7                   // Character
       || lk == 8                   // String
       || lk == 9                   // Integer
       || lk == 10                  // Complex
       || lk == 11                  // Real
       || lk == 12                  // Comment
       || lk == 15                  // '!'
       || lk == 16                  // '!='
       || lk == 19                  // '%='
       || lk == 20                  // '&'
       || lk == 21                  // '&&'
       || lk == 22                  // '&='
       || lk == 23                  // '('
       || lk == 24                  // ')'
       || lk == 27                  // '*='
       || lk == 29                  // '++'
       || lk == 30                  // '+='
       || lk == 31                  // ','
       || lk == 33                  // '--'
       || lk == 34                  // '-='
       || lk == 37                  // '/='
       || lk == 38                  // ':'
       || lk == 39                  // ':='
       || lk == 40                  // ';'
       || lk == 41                  // '<'
       || lk == 42                  // '<<'
       || lk == 43                  // '<<='
       || lk == 44                  // '<='
       || lk == 45                  // '='
       || lk == 46                  // '=='
       || lk == 47                  // '>'
       || lk == 48                  // '>='
       || lk == 49                  // '>>'
       || lk == 50                  // '>>='
       || lk == 51                  // '?'
       || lk == 52                  // '?='
       || lk == 53                  // '['
       || lk == 54                  // ']'
       || lk == 55                  // '^'
       || lk == 56                  // '^='
       || lk == 57                  // 'break'
       || lk == 58                  // 'case'
       || lk == 59                  // 'catch'
       || lk == 60                  // 'continue'
       || lk == 61                  // 'default'
       || lk == 62                  // 'do'
       || lk == 63                  // 'else'
       || lk == 64                  // 'export'
       || lk == 65                  // 'f32'
       || lk == 66                  // 'f64'
       || lk == 67                  // 'for'
       || lk == 68                  // 'foreach'
       || lk == 69                  // 'global'
       || lk == 70                  // 'i32'
       || lk == 71                  // 'i64'
       || lk == 72                  // 'if'
       || lk == 73                  // 'import'
       || lk == 74                  // 'include'
       || lk == 75                  // 'local'
       || lk == 76                  // 'return'
       || lk == 77                  // 'switch'
       || lk == 78                  // 'test'
       || lk == 79                  // 'throw'
       || lk == 80                  // 'try'
       || lk == 81                  // 'typeof'
       || lk == 82                  // 'while'
       || lk == 83                  // '{'
       || lk == 84                  // '|'
       || lk == 85                  // '|='
       || lk == 86                  // '||'
       || lk == 87                  // '}'
       || lk == 88)                 // '~'
      {
        break;
      }
      switch (l1)
      {
      case 28:                      // '+'
        consumeT(28);               // '+'
        break;
      default:
        consumeT(32);               // '-'
      }
      lookahead1W(23);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' |
                                    // 'f64' | 'i32' | 'i64' | '{' | '~'
      try_PowerExpression();
    }
  }

  function parse_PowerExpression()
  {
    eventHandler.startNonterminal("PowerExpression", e0);
    parse_MultiplicativeExpression();
    for (;;)
    {
      if (l1 != 26)                 // '**'
      {
        break;
      }
      consume(26);                  // '**'
      lookahead1W(23);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' |
                                    // 'f64' | 'i32' | 'i64' | '{' | '~'
      whitespace();
      parse_MultiplicativeExpression();
    }
    eventHandler.endNonterminal("PowerExpression", e0);
  }

  function try_PowerExpression()
  {
    try_MultiplicativeExpression();
    for (;;)
    {
      if (l1 != 26)                 // '**'
      {
        break;
      }
      consumeT(26);                 // '**'
      lookahead1W(23);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' |
                                    // 'f64' | 'i32' | 'i64' | '{' | '~'
      try_MultiplicativeExpression();
    }
  }

  function parse_MultiplicativeExpression()
  {
    eventHandler.startNonterminal("MultiplicativeExpression", e0);
    parse_UnaryExpression();
    for (;;)
    {
      lookahead1W(44);              // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' |
                                    // '/' | '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' |
                                    // '>=' | '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' |
                                    // 'catch' | 'continue' | 'default' | 'do' | 'else' | 'export' | 'f32' | 'f64' |
                                    // 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' |
                                    // 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' |
                                    // '{' | '|' | '|=' | '||' | '}' | '~'
      if (l1 != 18                  // '%'
       && l1 != 25                  // '*'
       && l1 != 36)                 // '/'
      {
        break;
      }
      switch (l1)
      {
      case 25:                      // '*'
        consume(25);                // '*'
        break;
      case 36:                      // '/'
        consume(36);                // '/'
        break;
      default:
        consume(18);                // '%'
      }
      lookahead1W(23);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' |
                                    // 'f64' | 'i32' | 'i64' | '{' | '~'
      whitespace();
      parse_UnaryExpression();
    }
    eventHandler.endNonterminal("MultiplicativeExpression", e0);
  }

  function try_MultiplicativeExpression()
  {
    try_UnaryExpression();
    for (;;)
    {
      lookahead1W(44);              // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' |
                                    // '/' | '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' |
                                    // '>=' | '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' |
                                    // 'catch' | 'continue' | 'default' | 'do' | 'else' | 'export' | 'f32' | 'f64' |
                                    // 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' |
                                    // 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' |
                                    // '{' | '|' | '|=' | '||' | '}' | '~'
      if (l1 != 18                  // '%'
       && l1 != 25                  // '*'
       && l1 != 36)                 // '/'
      {
        break;
      }
      switch (l1)
      {
      case 25:                      // '*'
        consumeT(25);               // '*'
        break;
      case 36:                      // '/'
        consumeT(36);               // '/'
        break;
      default:
        consumeT(18);               // '%'
      }
      lookahead1W(23);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' |
                                    // 'f64' | 'i32' | 'i64' | '{' | '~'
      try_UnaryExpression();
    }
  }

  function parse_UnaryExpression()
  {
    eventHandler.startNonterminal("UnaryExpression", e0);
    switch (l1)
    {
    case 3:                         // Identifier
      lookahead2W(45);              // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' |
                                    // '.' | '/' | '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' |
                                    // '>' | '>=' | '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' |
                                    // 'case' | 'catch' | 'continue' | 'default' | 'do' | 'else' | 'export' | 'f32' |
                                    // 'f64' | 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' |
                                    // 'include' | 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' |
                                    // 'while' | '{' | '|' | '|=' | '||' | '}' | '~'
      switch (lk)
      {
      case 2947:                    // Identifier '('
        lookahead3W(33);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        break;
      case 4483:                    // Identifier '.'
        lookahead3W(0);             // Identifier | WhiteSpace^token
        break;
      case 6787:                    // Identifier '['
        lookahead3W(34);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | ']' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        break;
      case 3715:                    // Identifier '++'
      case 4227:                    // Identifier '--'
        lookahead3W(44);            // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' |
                                    // '/' | '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' |
                                    // '>=' | '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' |
                                    // 'catch' | 'continue' | 'default' | 'do' | 'else' | 'export' | 'f32' | 'f64' |
                                    // 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' |
                                    // 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' |
                                    // '{' | '|' | '|=' | '||' | '}' | '~'
        break;
      }
      break;
    case 23:                        // '('
      lookahead2W(29);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
      switch (lk)
      {
      case 407:                     // '(' Identifier
        lookahead3W(28);            // WhiteSpace^token | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' | '*' |
                                    // '**' | '*=' | '+' | '++' | '+=' | '-' | '--' | '-=' | '.' | '/' | '/=' | ':=' |
                                    // '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '?' | '?=' |
                                    // '[' | '^' | '^=' | '{' | '|' | '|=' | '||'
        break;
      case 6807:                    // '(' '['
        lookahead3W(34);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | ']' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        break;
      case 10647:                   // '(' '{'
        lookahead3W(38);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '}' |
                                    // '~'
        break;
      case 1559:                    // '(' Comment
      case 5143:                    // '(' ';'
      case 7319:                    // '(' 'break'
      case 7703:                    // '(' 'continue'
        lookahead3W(4);             // WhiteSpace^token | ')'
        break;
      case 8343:                    // '(' 'f32'
      case 8471:                    // '(' 'f64'
      case 8983:                    // '(' 'i32'
      case 9111:                    // '(' 'i64'
        lookahead3W(0);             // Identifier | WhiteSpace^token
        break;
      case 1943:                    // '(' '!'
      case 3607:                    // '(' '+'
      case 3735:                    // '(' '++'
      case 4119:                    // '(' '-'
      case 4247:                    // '(' '--'
      case 11287:                   // '(' '~'
        lookahead3W(22);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
        break;
      case 8599:                    // '(' 'for'
      case 8727:                    // '(' 'foreach'
      case 9239:                    // '(' 'if'
      case 9879:                    // '(' 'switch'
      case 10007:                   // '(' 'test'
      case 10519:                   // '(' 'while'
        lookahead3W(3);             // WhiteSpace^token | '('
        break;
      case 535:                     // '(' Null
      case 663:                     // '(' True
      case 791:                     // '(' False
      case 919:                     // '(' Character
      case 1047:                    // '(' String
      case 1175:                    // '(' Integer
      case 1303:                    // '(' Complex
      case 1431:                    // '(' Real
        lookahead3W(24);            // WhiteSpace^token | '!=' | '%' | '%=' | '&' | '&&' | '&=' | ')' | '*' | '**' |
                                    // '*=' | '+' | '++' | '+=' | '-' | '--' | '-=' | '/' | '/=' | ':=' | '<' | '<<' |
                                    // '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '?' | '?=' | '^' | '^=' |
                                    // '|' | '|=' | '||'
        break;
      case 2967:                    // '(' '('
      case 7959:                    // '(' 'do'
      case 8215:                    // '(' 'export'
      case 8855:                    // '(' 'global'
      case 9367:                    // '(' 'import'
      case 9495:                    // '(' 'include'
      case 9623:                    // '(' 'local'
      case 9751:                    // '(' 'return'
      case 10135:                   // '(' 'throw'
      case 10263:                   // '(' 'try'
      case 10391:                   // '(' 'typeof'
        lookahead3W(29);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        break;
      }
      break;
    case 53:                        // '['
      lookahead2W(34);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | ']' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
      switch (lk)
      {
      case 437:                     // '[' Identifier
        lookahead3W(31);            // WhiteSpace^token | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | '*' | '**' |
                                    // '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' | '/=' | ':=' |
                                    // ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '?' |
                                    // '?=' | '[' | ']' | '^' | '^=' | '{' | '|' | '|=' | '||'
        break;
      case 5173:                    // '[' ';'
        lookahead3W(37);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' |
                                    // ';' | '[' | ']' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' |
                                    // 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' |
                                    // 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' |
                                    // '{' | '~'
        break;
      case 6837:                    // '[' '['
        lookahead3W(34);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | ']' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        break;
      case 6965:                    // '[' ']'
        lookahead3W(44);            // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' |
                                    // '/' | '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' |
                                    // '>=' | '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' |
                                    // 'catch' | 'continue' | 'default' | 'do' | 'else' | 'export' | 'f32' | 'f64' |
                                    // 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' |
                                    // 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' |
                                    // '{' | '|' | '|=' | '||' | '}' | '~'
        break;
      case 10677:                   // '[' '{'
        lookahead3W(38);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '}' |
                                    // '~'
        break;
      case 1589:                    // '[' Comment
      case 7349:                    // '[' 'break'
      case 7733:                    // '[' 'continue'
        lookahead3W(21);            // WhiteSpace^token | ',' | ';' | ']'
        break;
      case 8373:                    // '[' 'f32'
      case 8501:                    // '[' 'f64'
      case 9013:                    // '[' 'i32'
      case 9141:                    // '[' 'i64'
        lookahead3W(0);             // Identifier | WhiteSpace^token
        break;
      case 1973:                    // '[' '!'
      case 3637:                    // '[' '+'
      case 3765:                    // '[' '++'
      case 4149:                    // '[' '-'
      case 4277:                    // '[' '--'
      case 11317:                   // '[' '~'
        lookahead3W(22);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
        break;
      case 8629:                    // '[' 'for'
      case 8757:                    // '[' 'foreach'
      case 9269:                    // '[' 'if'
      case 9909:                    // '[' 'switch'
      case 10037:                   // '[' 'test'
      case 10549:                   // '[' 'while'
        lookahead3W(3);             // WhiteSpace^token | '('
        break;
      case 565:                     // '[' Null
      case 693:                     // '[' True
      case 821:                     // '[' False
      case 949:                     // '[' Character
      case 1077:                    // '[' String
      case 1205:                    // '[' Integer
      case 1333:                    // '[' Complex
      case 1461:                    // '[' Real
        lookahead3W(27);            // WhiteSpace^token | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '*' | '**' | '*=' |
                                    // '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' | ':=' | ';' | '<' |
                                    // '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '?' | '?=' | ']' |
                                    // '^' | '^=' | '|' | '|=' | '||'
        break;
      case 2997:                    // '[' '('
      case 7989:                    // '[' 'do'
      case 8245:                    // '[' 'export'
      case 8885:                    // '[' 'global'
      case 9397:                    // '[' 'import'
      case 9525:                    // '[' 'include'
      case 9653:                    // '[' 'local'
      case 9781:                    // '[' 'return'
      case 10165:                   // '[' 'throw'
      case 10293:                   // '[' 'try'
      case 10421:                   // '[' 'typeof'
        lookahead3W(29);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        break;
      }
      break;
    case 83:                        // '{'
      lookahead2W(38);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '}' |
                                    // '~'
      switch (lk)
      {
      case 467:                     // '{' Identifier
        lookahead3W(30);            // WhiteSpace^token | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | '*' | '**' |
                                    // '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' | '/=' | ':' |
                                    // ':=' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '?' |
                                    // '?=' | '[' | '^' | '^=' | '{' | '|' | '|=' | '||' | '}'
        break;
      case 1107:                    // '{' String
        lookahead3W(26);            // WhiteSpace^token | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '*' | '**' | '*=' |
                                    // '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' | ':' | ':=' | '<' |
                                    // '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '?' | '?=' | '^' |
                                    // '^=' | '|' | '|=' | '||' | '}'
        break;
      case 6867:                    // '{' '['
        lookahead3W(34);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | ']' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        break;
      case 10707:                   // '{' '{'
        lookahead3W(38);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '}' |
                                    // '~'
        break;
      case 11219:                   // '{' '}'
        lookahead3W(44);            // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' |
                                    // '/' | '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' |
                                    // '>=' | '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' |
                                    // 'catch' | 'continue' | 'default' | 'do' | 'else' | 'export' | 'f32' | 'f64' |
                                    // 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' |
                                    // 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' |
                                    // '{' | '|' | '|=' | '||' | '}' | '~'
        break;
      case 1619:                    // '{' Comment
      case 5203:                    // '{' ';'
      case 7379:                    // '{' 'break'
      case 7763:                    // '{' 'continue'
        lookahead3W(17);            // WhiteSpace^token | ',' | '}'
        break;
      case 8403:                    // '{' 'f32'
      case 8531:                    // '{' 'f64'
      case 9043:                    // '{' 'i32'
      case 9171:                    // '{' 'i64'
        lookahead3W(0);             // Identifier | WhiteSpace^token
        break;
      case 2003:                    // '{' '!'
      case 3667:                    // '{' '+'
      case 3795:                    // '{' '++'
      case 4179:                    // '{' '-'
      case 4307:                    // '{' '--'
      case 11347:                   // '{' '~'
        lookahead3W(22);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
        break;
      case 8659:                    // '{' 'for'
      case 8787:                    // '{' 'foreach'
      case 9299:                    // '{' 'if'
      case 9939:                    // '{' 'switch'
      case 10067:                   // '{' 'test'
      case 10579:                   // '{' 'while'
        lookahead3W(3);             // WhiteSpace^token | '('
        break;
      case 595:                     // '{' Null
      case 723:                     // '{' True
      case 851:                     // '{' False
      case 979:                     // '{' Character
      case 1235:                    // '{' Integer
      case 1363:                    // '{' Complex
      case 1491:                    // '{' Real
        lookahead3W(25);            // WhiteSpace^token | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '*' | '**' | '*=' |
                                    // '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' | ':=' | '<' | '<<' |
                                    // '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '?' | '?=' | '^' | '^=' |
                                    // '|' | '|=' | '||' | '}'
        break;
      case 3027:                    // '{' '('
      case 4051:                    // '{' ','
      case 8019:                    // '{' 'do'
      case 8275:                    // '{' 'export'
      case 8915:                    // '{' 'global'
      case 9427:                    // '{' 'import'
      case 9555:                    // '{' 'include'
      case 9683:                    // '{' 'local'
      case 9811:                    // '{' 'return'
      case 10195:                   // '{' 'throw'
      case 10323:                   // '{' 'try'
      case 10451:                   // '{' 'typeof'
        lookahead3W(29);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        break;
      }
      break;
    case 65:                        // 'f32'
    case 66:                        // 'f64'
    case 70:                        // 'i32'
    case 71:                        // 'i64'
      lookahead2W(0);               // Identifier | WhiteSpace^token
      switch (lk)
      {
      case 449:                     // 'f32' Identifier
      case 450:                     // 'f64' Identifier
      case 454:                     // 'i32' Identifier
      case 455:                     // 'i64' Identifier
        lookahead3W(45);            // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' |
                                    // '.' | '/' | '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' |
                                    // '>' | '>=' | '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' |
                                    // 'case' | 'catch' | 'continue' | 'default' | 'do' | 'else' | 'export' | 'f32' |
                                    // 'f64' | 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' |
                                    // 'include' | 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' |
                                    // 'while' | '{' | '|' | '|=' | '||' | '}' | '~'
        break;
      }
      break;
    case 4:                         // Null
    case 5:                         // True
    case 6:                         // False
    case 7:                         // Character
    case 8:                         // String
    case 9:                         // Integer
    case 10:                        // Complex
    case 11:                        // Real
      lookahead2W(44);              // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' |
                                    // '/' | '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' |
                                    // '>=' | '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' |
                                    // 'catch' | 'continue' | 'default' | 'do' | 'else' | 'export' | 'f32' | 'f64' |
                                    // 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' |
                                    // 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' |
                                    // '{' | '|' | '|=' | '||' | '}' | '~'
      switch (lk)
      {
      case 3716:                    // Null '++'
      case 4228:                    // Null '--'
      case 3717:                    // True '++'
      case 4229:                    // True '--'
      case 3718:                    // False '++'
      case 4230:                    // False '--'
      case 3719:                    // Character '++'
      case 4231:                    // Character '--'
      case 3720:                    // String '++'
      case 4232:                    // String '--'
      case 3721:                    // Integer '++'
      case 4233:                    // Integer '--'
      case 3722:                    // Complex '++'
      case 4234:                    // Complex '--'
      case 3723:                    // Real '++'
      case 4235:                    // Real '--'
        lookahead3W(44);            // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' |
                                    // '/' | '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' |
                                    // '>=' | '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' |
                                    // 'catch' | 'continue' | 'default' | 'do' | 'else' | 'export' | 'f32' | 'f64' |
                                    // 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' |
                                    // 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' |
                                    // '{' | '|' | '|=' | '||' | '}' | '~'
        break;
      }
      break;
    default:
      lk = l1;
    }
    if (lk != 15                    // '!'
     && lk != 28                    // '+'
     && lk != 29                    // '++'
     && lk != 32                    // '-'
     && lk != 33                    // '--'
     && lk != 88                    // '~'
     && lk != 131                   // Identifier END
     && lk != 132                   // Null END
     && lk != 133                   // True END
     && lk != 134                   // False END
     && lk != 135                   // Character END
     && lk != 136                   // String END
     && lk != 137                   // Integer END
     && lk != 138                   // Complex END
     && lk != 139                   // Real END
     && lk != 387                   // Identifier Identifier
     && lk != 388                   // Null Identifier
     && lk != 389                   // True Identifier
     && lk != 390                   // False Identifier
     && lk != 391                   // Character Identifier
     && lk != 392                   // String Identifier
     && lk != 393                   // Integer Identifier
     && lk != 394                   // Complex Identifier
     && lk != 395                   // Real Identifier
     && lk != 515                   // Identifier Null
     && lk != 516                   // Null Null
     && lk != 517                   // True Null
     && lk != 518                   // False Null
     && lk != 519                   // Character Null
     && lk != 520                   // String Null
     && lk != 521                   // Integer Null
     && lk != 522                   // Complex Null
     && lk != 523                   // Real Null
     && lk != 643                   // Identifier True
     && lk != 644                   // Null True
     && lk != 645                   // True True
     && lk != 646                   // False True
     && lk != 647                   // Character True
     && lk != 648                   // String True
     && lk != 649                   // Integer True
     && lk != 650                   // Complex True
     && lk != 651                   // Real True
     && lk != 771                   // Identifier False
     && lk != 772                   // Null False
     && lk != 773                   // True False
     && lk != 774                   // False False
     && lk != 775                   // Character False
     && lk != 776                   // String False
     && lk != 777                   // Integer False
     && lk != 778                   // Complex False
     && lk != 779                   // Real False
     && lk != 899                   // Identifier Character
     && lk != 900                   // Null Character
     && lk != 901                   // True Character
     && lk != 902                   // False Character
     && lk != 903                   // Character Character
     && lk != 904                   // String Character
     && lk != 905                   // Integer Character
     && lk != 906                   // Complex Character
     && lk != 907                   // Real Character
     && lk != 1027                  // Identifier String
     && lk != 1028                  // Null String
     && lk != 1029                  // True String
     && lk != 1030                  // False String
     && lk != 1031                  // Character String
     && lk != 1032                  // String String
     && lk != 1033                  // Integer String
     && lk != 1034                  // Complex String
     && lk != 1035                  // Real String
     && lk != 1155                  // Identifier Integer
     && lk != 1156                  // Null Integer
     && lk != 1157                  // True Integer
     && lk != 1158                  // False Integer
     && lk != 1159                  // Character Integer
     && lk != 1160                  // String Integer
     && lk != 1161                  // Integer Integer
     && lk != 1162                  // Complex Integer
     && lk != 1163                  // Real Integer
     && lk != 1283                  // Identifier Complex
     && lk != 1284                  // Null Complex
     && lk != 1285                  // True Complex
     && lk != 1286                  // False Complex
     && lk != 1287                  // Character Complex
     && lk != 1288                  // String Complex
     && lk != 1289                  // Integer Complex
     && lk != 1290                  // Complex Complex
     && lk != 1291                  // Real Complex
     && lk != 1411                  // Identifier Real
     && lk != 1412                  // Null Real
     && lk != 1413                  // True Real
     && lk != 1414                  // False Real
     && lk != 1415                  // Character Real
     && lk != 1416                  // String Real
     && lk != 1417                  // Integer Real
     && lk != 1418                  // Complex Real
     && lk != 1419                  // Real Real
     && lk != 1539                  // Identifier Comment
     && lk != 1540                  // Null Comment
     && lk != 1541                  // True Comment
     && lk != 1542                  // False Comment
     && lk != 1543                  // Character Comment
     && lk != 1544                  // String Comment
     && lk != 1545                  // Integer Comment
     && lk != 1546                  // Complex Comment
     && lk != 1547                  // Real Comment
     && lk != 1923                  // Identifier '!'
     && lk != 1924                  // Null '!'
     && lk != 1925                  // True '!'
     && lk != 1926                  // False '!'
     && lk != 1927                  // Character '!'
     && lk != 1928                  // String '!'
     && lk != 1929                  // Integer '!'
     && lk != 1930                  // Complex '!'
     && lk != 1931                  // Real '!'
     && lk != 2051                  // Identifier '!='
     && lk != 2052                  // Null '!='
     && lk != 2053                  // True '!='
     && lk != 2054                  // False '!='
     && lk != 2055                  // Character '!='
     && lk != 2056                  // String '!='
     && lk != 2057                  // Integer '!='
     && lk != 2058                  // Complex '!='
     && lk != 2059                  // Real '!='
     && lk != 2307                  // Identifier '%'
     && lk != 2308                  // Null '%'
     && lk != 2309                  // True '%'
     && lk != 2310                  // False '%'
     && lk != 2311                  // Character '%'
     && lk != 2312                  // String '%'
     && lk != 2313                  // Integer '%'
     && lk != 2314                  // Complex '%'
     && lk != 2315                  // Real '%'
     && lk != 2435                  // Identifier '%='
     && lk != 2436                  // Null '%='
     && lk != 2437                  // True '%='
     && lk != 2438                  // False '%='
     && lk != 2439                  // Character '%='
     && lk != 2440                  // String '%='
     && lk != 2441                  // Integer '%='
     && lk != 2442                  // Complex '%='
     && lk != 2443                  // Real '%='
     && lk != 2563                  // Identifier '&'
     && lk != 2564                  // Null '&'
     && lk != 2565                  // True '&'
     && lk != 2566                  // False '&'
     && lk != 2567                  // Character '&'
     && lk != 2568                  // String '&'
     && lk != 2569                  // Integer '&'
     && lk != 2570                  // Complex '&'
     && lk != 2571                  // Real '&'
     && lk != 2691                  // Identifier '&&'
     && lk != 2692                  // Null '&&'
     && lk != 2693                  // True '&&'
     && lk != 2694                  // False '&&'
     && lk != 2695                  // Character '&&'
     && lk != 2696                  // String '&&'
     && lk != 2697                  // Integer '&&'
     && lk != 2698                  // Complex '&&'
     && lk != 2699                  // Real '&&'
     && lk != 2819                  // Identifier '&='
     && lk != 2820                  // Null '&='
     && lk != 2821                  // True '&='
     && lk != 2822                  // False '&='
     && lk != 2823                  // Character '&='
     && lk != 2824                  // String '&='
     && lk != 2825                  // Integer '&='
     && lk != 2826                  // Complex '&='
     && lk != 2827                  // Real '&='
     && lk != 2948                  // Null '('
     && lk != 2949                  // True '('
     && lk != 2950                  // False '('
     && lk != 2951                  // Character '('
     && lk != 2952                  // String '('
     && lk != 2953                  // Integer '('
     && lk != 2954                  // Complex '('
     && lk != 2955                  // Real '('
     && lk != 3075                  // Identifier ')'
     && lk != 3076                  // Null ')'
     && lk != 3077                  // True ')'
     && lk != 3078                  // False ')'
     && lk != 3079                  // Character ')'
     && lk != 3080                  // String ')'
     && lk != 3081                  // Integer ')'
     && lk != 3082                  // Complex ')'
     && lk != 3083                  // Real ')'
     && lk != 3203                  // Identifier '*'
     && lk != 3204                  // Null '*'
     && lk != 3205                  // True '*'
     && lk != 3206                  // False '*'
     && lk != 3207                  // Character '*'
     && lk != 3208                  // String '*'
     && lk != 3209                  // Integer '*'
     && lk != 3210                  // Complex '*'
     && lk != 3211                  // Real '*'
     && lk != 3331                  // Identifier '**'
     && lk != 3332                  // Null '**'
     && lk != 3333                  // True '**'
     && lk != 3334                  // False '**'
     && lk != 3335                  // Character '**'
     && lk != 3336                  // String '**'
     && lk != 3337                  // Integer '**'
     && lk != 3338                  // Complex '**'
     && lk != 3339                  // Real '**'
     && lk != 3459                  // Identifier '*='
     && lk != 3460                  // Null '*='
     && lk != 3461                  // True '*='
     && lk != 3462                  // False '*='
     && lk != 3463                  // Character '*='
     && lk != 3464                  // String '*='
     && lk != 3465                  // Integer '*='
     && lk != 3466                  // Complex '*='
     && lk != 3467                  // Real '*='
     && lk != 3587                  // Identifier '+'
     && lk != 3588                  // Null '+'
     && lk != 3589                  // True '+'
     && lk != 3590                  // False '+'
     && lk != 3591                  // Character '+'
     && lk != 3592                  // String '+'
     && lk != 3593                  // Integer '+'
     && lk != 3594                  // Complex '+'
     && lk != 3595                  // Real '+'
     && lk != 3843                  // Identifier '+='
     && lk != 3844                  // Null '+='
     && lk != 3845                  // True '+='
     && lk != 3846                  // False '+='
     && lk != 3847                  // Character '+='
     && lk != 3848                  // String '+='
     && lk != 3849                  // Integer '+='
     && lk != 3850                  // Complex '+='
     && lk != 3851                  // Real '+='
     && lk != 3971                  // Identifier ','
     && lk != 3972                  // Null ','
     && lk != 3973                  // True ','
     && lk != 3974                  // False ','
     && lk != 3975                  // Character ','
     && lk != 3976                  // String ','
     && lk != 3977                  // Integer ','
     && lk != 3978                  // Complex ','
     && lk != 3979                  // Real ','
     && lk != 4099                  // Identifier '-'
     && lk != 4100                  // Null '-'
     && lk != 4101                  // True '-'
     && lk != 4102                  // False '-'
     && lk != 4103                  // Character '-'
     && lk != 4104                  // String '-'
     && lk != 4105                  // Integer '-'
     && lk != 4106                  // Complex '-'
     && lk != 4107                  // Real '-'
     && lk != 4355                  // Identifier '-='
     && lk != 4356                  // Null '-='
     && lk != 4357                  // True '-='
     && lk != 4358                  // False '-='
     && lk != 4359                  // Character '-='
     && lk != 4360                  // String '-='
     && lk != 4361                  // Integer '-='
     && lk != 4362                  // Complex '-='
     && lk != 4363                  // Real '-='
     && lk != 4611                  // Identifier '/'
     && lk != 4612                  // Null '/'
     && lk != 4613                  // True '/'
     && lk != 4614                  // False '/'
     && lk != 4615                  // Character '/'
     && lk != 4616                  // String '/'
     && lk != 4617                  // Integer '/'
     && lk != 4618                  // Complex '/'
     && lk != 4619                  // Real '/'
     && lk != 4739                  // Identifier '/='
     && lk != 4740                  // Null '/='
     && lk != 4741                  // True '/='
     && lk != 4742                  // False '/='
     && lk != 4743                  // Character '/='
     && lk != 4744                  // String '/='
     && lk != 4745                  // Integer '/='
     && lk != 4746                  // Complex '/='
     && lk != 4747                  // Real '/='
     && lk != 4867                  // Identifier ':'
     && lk != 4868                  // Null ':'
     && lk != 4869                  // True ':'
     && lk != 4870                  // False ':'
     && lk != 4871                  // Character ':'
     && lk != 4872                  // String ':'
     && lk != 4873                  // Integer ':'
     && lk != 4874                  // Complex ':'
     && lk != 4875                  // Real ':'
     && lk != 4995                  // Identifier ':='
     && lk != 4996                  // Null ':='
     && lk != 4997                  // True ':='
     && lk != 4998                  // False ':='
     && lk != 4999                  // Character ':='
     && lk != 5000                  // String ':='
     && lk != 5001                  // Integer ':='
     && lk != 5002                  // Complex ':='
     && lk != 5003                  // Real ':='
     && lk != 5123                  // Identifier ';'
     && lk != 5124                  // Null ';'
     && lk != 5125                  // True ';'
     && lk != 5126                  // False ';'
     && lk != 5127                  // Character ';'
     && lk != 5128                  // String ';'
     && lk != 5129                  // Integer ';'
     && lk != 5130                  // Complex ';'
     && lk != 5131                  // Real ';'
     && lk != 5251                  // Identifier '<'
     && lk != 5252                  // Null '<'
     && lk != 5253                  // True '<'
     && lk != 5254                  // False '<'
     && lk != 5255                  // Character '<'
     && lk != 5256                  // String '<'
     && lk != 5257                  // Integer '<'
     && lk != 5258                  // Complex '<'
     && lk != 5259                  // Real '<'
     && lk != 5379                  // Identifier '<<'
     && lk != 5380                  // Null '<<'
     && lk != 5381                  // True '<<'
     && lk != 5382                  // False '<<'
     && lk != 5383                  // Character '<<'
     && lk != 5384                  // String '<<'
     && lk != 5385                  // Integer '<<'
     && lk != 5386                  // Complex '<<'
     && lk != 5387                  // Real '<<'
     && lk != 5507                  // Identifier '<<='
     && lk != 5508                  // Null '<<='
     && lk != 5509                  // True '<<='
     && lk != 5510                  // False '<<='
     && lk != 5511                  // Character '<<='
     && lk != 5512                  // String '<<='
     && lk != 5513                  // Integer '<<='
     && lk != 5514                  // Complex '<<='
     && lk != 5515                  // Real '<<='
     && lk != 5635                  // Identifier '<='
     && lk != 5636                  // Null '<='
     && lk != 5637                  // True '<='
     && lk != 5638                  // False '<='
     && lk != 5639                  // Character '<='
     && lk != 5640                  // String '<='
     && lk != 5641                  // Integer '<='
     && lk != 5642                  // Complex '<='
     && lk != 5643                  // Real '<='
     && lk != 5763                  // Identifier '='
     && lk != 5764                  // Null '='
     && lk != 5765                  // True '='
     && lk != 5766                  // False '='
     && lk != 5767                  // Character '='
     && lk != 5768                  // String '='
     && lk != 5769                  // Integer '='
     && lk != 5770                  // Complex '='
     && lk != 5771                  // Real '='
     && lk != 5891                  // Identifier '=='
     && lk != 5892                  // Null '=='
     && lk != 5893                  // True '=='
     && lk != 5894                  // False '=='
     && lk != 5895                  // Character '=='
     && lk != 5896                  // String '=='
     && lk != 5897                  // Integer '=='
     && lk != 5898                  // Complex '=='
     && lk != 5899                  // Real '=='
     && lk != 6019                  // Identifier '>'
     && lk != 6020                  // Null '>'
     && lk != 6021                  // True '>'
     && lk != 6022                  // False '>'
     && lk != 6023                  // Character '>'
     && lk != 6024                  // String '>'
     && lk != 6025                  // Integer '>'
     && lk != 6026                  // Complex '>'
     && lk != 6027                  // Real '>'
     && lk != 6147                  // Identifier '>='
     && lk != 6148                  // Null '>='
     && lk != 6149                  // True '>='
     && lk != 6150                  // False '>='
     && lk != 6151                  // Character '>='
     && lk != 6152                  // String '>='
     && lk != 6153                  // Integer '>='
     && lk != 6154                  // Complex '>='
     && lk != 6155                  // Real '>='
     && lk != 6275                  // Identifier '>>'
     && lk != 6276                  // Null '>>'
     && lk != 6277                  // True '>>'
     && lk != 6278                  // False '>>'
     && lk != 6279                  // Character '>>'
     && lk != 6280                  // String '>>'
     && lk != 6281                  // Integer '>>'
     && lk != 6282                  // Complex '>>'
     && lk != 6283                  // Real '>>'
     && lk != 6403                  // Identifier '>>='
     && lk != 6404                  // Null '>>='
     && lk != 6405                  // True '>>='
     && lk != 6406                  // False '>>='
     && lk != 6407                  // Character '>>='
     && lk != 6408                  // String '>>='
     && lk != 6409                  // Integer '>>='
     && lk != 6410                  // Complex '>>='
     && lk != 6411                  // Real '>>='
     && lk != 6531                  // Identifier '?'
     && lk != 6532                  // Null '?'
     && lk != 6533                  // True '?'
     && lk != 6534                  // False '?'
     && lk != 6535                  // Character '?'
     && lk != 6536                  // String '?'
     && lk != 6537                  // Integer '?'
     && lk != 6538                  // Complex '?'
     && lk != 6539                  // Real '?'
     && lk != 6659                  // Identifier '?='
     && lk != 6660                  // Null '?='
     && lk != 6661                  // True '?='
     && lk != 6662                  // False '?='
     && lk != 6663                  // Character '?='
     && lk != 6664                  // String '?='
     && lk != 6665                  // Integer '?='
     && lk != 6666                  // Complex '?='
     && lk != 6667                  // Real '?='
     && lk != 6788                  // Null '['
     && lk != 6789                  // True '['
     && lk != 6790                  // False '['
     && lk != 6791                  // Character '['
     && lk != 6792                  // String '['
     && lk != 6793                  // Integer '['
     && lk != 6794                  // Complex '['
     && lk != 6795                  // Real '['
     && lk != 6915                  // Identifier ']'
     && lk != 6916                  // Null ']'
     && lk != 6917                  // True ']'
     && lk != 6918                  // False ']'
     && lk != 6919                  // Character ']'
     && lk != 6920                  // String ']'
     && lk != 6921                  // Integer ']'
     && lk != 6922                  // Complex ']'
     && lk != 6923                  // Real ']'
     && lk != 7043                  // Identifier '^'
     && lk != 7044                  // Null '^'
     && lk != 7045                  // True '^'
     && lk != 7046                  // False '^'
     && lk != 7047                  // Character '^'
     && lk != 7048                  // String '^'
     && lk != 7049                  // Integer '^'
     && lk != 7050                  // Complex '^'
     && lk != 7051                  // Real '^'
     && lk != 7171                  // Identifier '^='
     && lk != 7172                  // Null '^='
     && lk != 7173                  // True '^='
     && lk != 7174                  // False '^='
     && lk != 7175                  // Character '^='
     && lk != 7176                  // String '^='
     && lk != 7177                  // Integer '^='
     && lk != 7178                  // Complex '^='
     && lk != 7179                  // Real '^='
     && lk != 7299                  // Identifier 'break'
     && lk != 7300                  // Null 'break'
     && lk != 7301                  // True 'break'
     && lk != 7302                  // False 'break'
     && lk != 7303                  // Character 'break'
     && lk != 7304                  // String 'break'
     && lk != 7305                  // Integer 'break'
     && lk != 7306                  // Complex 'break'
     && lk != 7307                  // Real 'break'
     && lk != 7427                  // Identifier 'case'
     && lk != 7428                  // Null 'case'
     && lk != 7429                  // True 'case'
     && lk != 7430                  // False 'case'
     && lk != 7431                  // Character 'case'
     && lk != 7432                  // String 'case'
     && lk != 7433                  // Integer 'case'
     && lk != 7434                  // Complex 'case'
     && lk != 7435                  // Real 'case'
     && lk != 7555                  // Identifier 'catch'
     && lk != 7556                  // Null 'catch'
     && lk != 7557                  // True 'catch'
     && lk != 7558                  // False 'catch'
     && lk != 7559                  // Character 'catch'
     && lk != 7560                  // String 'catch'
     && lk != 7561                  // Integer 'catch'
     && lk != 7562                  // Complex 'catch'
     && lk != 7563                  // Real 'catch'
     && lk != 7683                  // Identifier 'continue'
     && lk != 7684                  // Null 'continue'
     && lk != 7685                  // True 'continue'
     && lk != 7686                  // False 'continue'
     && lk != 7687                  // Character 'continue'
     && lk != 7688                  // String 'continue'
     && lk != 7689                  // Integer 'continue'
     && lk != 7690                  // Complex 'continue'
     && lk != 7691                  // Real 'continue'
     && lk != 7811                  // Identifier 'default'
     && lk != 7812                  // Null 'default'
     && lk != 7813                  // True 'default'
     && lk != 7814                  // False 'default'
     && lk != 7815                  // Character 'default'
     && lk != 7816                  // String 'default'
     && lk != 7817                  // Integer 'default'
     && lk != 7818                  // Complex 'default'
     && lk != 7819                  // Real 'default'
     && lk != 7939                  // Identifier 'do'
     && lk != 7940                  // Null 'do'
     && lk != 7941                  // True 'do'
     && lk != 7942                  // False 'do'
     && lk != 7943                  // Character 'do'
     && lk != 7944                  // String 'do'
     && lk != 7945                  // Integer 'do'
     && lk != 7946                  // Complex 'do'
     && lk != 7947                  // Real 'do'
     && lk != 8067                  // Identifier 'else'
     && lk != 8068                  // Null 'else'
     && lk != 8069                  // True 'else'
     && lk != 8070                  // False 'else'
     && lk != 8071                  // Character 'else'
     && lk != 8072                  // String 'else'
     && lk != 8073                  // Integer 'else'
     && lk != 8074                  // Complex 'else'
     && lk != 8075                  // Real 'else'
     && lk != 8195                  // Identifier 'export'
     && lk != 8196                  // Null 'export'
     && lk != 8197                  // True 'export'
     && lk != 8198                  // False 'export'
     && lk != 8199                  // Character 'export'
     && lk != 8200                  // String 'export'
     && lk != 8201                  // Integer 'export'
     && lk != 8202                  // Complex 'export'
     && lk != 8203                  // Real 'export'
     && lk != 8323                  // Identifier 'f32'
     && lk != 8324                  // Null 'f32'
     && lk != 8325                  // True 'f32'
     && lk != 8326                  // False 'f32'
     && lk != 8327                  // Character 'f32'
     && lk != 8328                  // String 'f32'
     && lk != 8329                  // Integer 'f32'
     && lk != 8330                  // Complex 'f32'
     && lk != 8331                  // Real 'f32'
     && lk != 8451                  // Identifier 'f64'
     && lk != 8452                  // Null 'f64'
     && lk != 8453                  // True 'f64'
     && lk != 8454                  // False 'f64'
     && lk != 8455                  // Character 'f64'
     && lk != 8456                  // String 'f64'
     && lk != 8457                  // Integer 'f64'
     && lk != 8458                  // Complex 'f64'
     && lk != 8459                  // Real 'f64'
     && lk != 8579                  // Identifier 'for'
     && lk != 8580                  // Null 'for'
     && lk != 8581                  // True 'for'
     && lk != 8582                  // False 'for'
     && lk != 8583                  // Character 'for'
     && lk != 8584                  // String 'for'
     && lk != 8585                  // Integer 'for'
     && lk != 8586                  // Complex 'for'
     && lk != 8587                  // Real 'for'
     && lk != 8707                  // Identifier 'foreach'
     && lk != 8708                  // Null 'foreach'
     && lk != 8709                  // True 'foreach'
     && lk != 8710                  // False 'foreach'
     && lk != 8711                  // Character 'foreach'
     && lk != 8712                  // String 'foreach'
     && lk != 8713                  // Integer 'foreach'
     && lk != 8714                  // Complex 'foreach'
     && lk != 8715                  // Real 'foreach'
     && lk != 8835                  // Identifier 'global'
     && lk != 8836                  // Null 'global'
     && lk != 8837                  // True 'global'
     && lk != 8838                  // False 'global'
     && lk != 8839                  // Character 'global'
     && lk != 8840                  // String 'global'
     && lk != 8841                  // Integer 'global'
     && lk != 8842                  // Complex 'global'
     && lk != 8843                  // Real 'global'
     && lk != 8963                  // Identifier 'i32'
     && lk != 8964                  // Null 'i32'
     && lk != 8965                  // True 'i32'
     && lk != 8966                  // False 'i32'
     && lk != 8967                  // Character 'i32'
     && lk != 8968                  // String 'i32'
     && lk != 8969                  // Integer 'i32'
     && lk != 8970                  // Complex 'i32'
     && lk != 8971                  // Real 'i32'
     && lk != 9091                  // Identifier 'i64'
     && lk != 9092                  // Null 'i64'
     && lk != 9093                  // True 'i64'
     && lk != 9094                  // False 'i64'
     && lk != 9095                  // Character 'i64'
     && lk != 9096                  // String 'i64'
     && lk != 9097                  // Integer 'i64'
     && lk != 9098                  // Complex 'i64'
     && lk != 9099                  // Real 'i64'
     && lk != 9219                  // Identifier 'if'
     && lk != 9220                  // Null 'if'
     && lk != 9221                  // True 'if'
     && lk != 9222                  // False 'if'
     && lk != 9223                  // Character 'if'
     && lk != 9224                  // String 'if'
     && lk != 9225                  // Integer 'if'
     && lk != 9226                  // Complex 'if'
     && lk != 9227                  // Real 'if'
     && lk != 9347                  // Identifier 'import'
     && lk != 9348                  // Null 'import'
     && lk != 9349                  // True 'import'
     && lk != 9350                  // False 'import'
     && lk != 9351                  // Character 'import'
     && lk != 9352                  // String 'import'
     && lk != 9353                  // Integer 'import'
     && lk != 9354                  // Complex 'import'
     && lk != 9355                  // Real 'import'
     && lk != 9475                  // Identifier 'include'
     && lk != 9476                  // Null 'include'
     && lk != 9477                  // True 'include'
     && lk != 9478                  // False 'include'
     && lk != 9479                  // Character 'include'
     && lk != 9480                  // String 'include'
     && lk != 9481                  // Integer 'include'
     && lk != 9482                  // Complex 'include'
     && lk != 9483                  // Real 'include'
     && lk != 9603                  // Identifier 'local'
     && lk != 9604                  // Null 'local'
     && lk != 9605                  // True 'local'
     && lk != 9606                  // False 'local'
     && lk != 9607                  // Character 'local'
     && lk != 9608                  // String 'local'
     && lk != 9609                  // Integer 'local'
     && lk != 9610                  // Complex 'local'
     && lk != 9611                  // Real 'local'
     && lk != 9731                  // Identifier 'return'
     && lk != 9732                  // Null 'return'
     && lk != 9733                  // True 'return'
     && lk != 9734                  // False 'return'
     && lk != 9735                  // Character 'return'
     && lk != 9736                  // String 'return'
     && lk != 9737                  // Integer 'return'
     && lk != 9738                  // Complex 'return'
     && lk != 9739                  // Real 'return'
     && lk != 9859                  // Identifier 'switch'
     && lk != 9860                  // Null 'switch'
     && lk != 9861                  // True 'switch'
     && lk != 9862                  // False 'switch'
     && lk != 9863                  // Character 'switch'
     && lk != 9864                  // String 'switch'
     && lk != 9865                  // Integer 'switch'
     && lk != 9866                  // Complex 'switch'
     && lk != 9867                  // Real 'switch'
     && lk != 9987                  // Identifier 'test'
     && lk != 9988                  // Null 'test'
     && lk != 9989                  // True 'test'
     && lk != 9990                  // False 'test'
     && lk != 9991                  // Character 'test'
     && lk != 9992                  // String 'test'
     && lk != 9993                  // Integer 'test'
     && lk != 9994                  // Complex 'test'
     && lk != 9995                  // Real 'test'
     && lk != 10115                 // Identifier 'throw'
     && lk != 10116                 // Null 'throw'
     && lk != 10117                 // True 'throw'
     && lk != 10118                 // False 'throw'
     && lk != 10119                 // Character 'throw'
     && lk != 10120                 // String 'throw'
     && lk != 10121                 // Integer 'throw'
     && lk != 10122                 // Complex 'throw'
     && lk != 10123                 // Real 'throw'
     && lk != 10243                 // Identifier 'try'
     && lk != 10244                 // Null 'try'
     && lk != 10245                 // True 'try'
     && lk != 10246                 // False 'try'
     && lk != 10247                 // Character 'try'
     && lk != 10248                 // String 'try'
     && lk != 10249                 // Integer 'try'
     && lk != 10250                 // Complex 'try'
     && lk != 10251                 // Real 'try'
     && lk != 10371                 // Identifier 'typeof'
     && lk != 10372                 // Null 'typeof'
     && lk != 10373                 // True 'typeof'
     && lk != 10374                 // False 'typeof'
     && lk != 10375                 // Character 'typeof'
     && lk != 10376                 // String 'typeof'
     && lk != 10377                 // Integer 'typeof'
     && lk != 10378                 // Complex 'typeof'
     && lk != 10379                 // Real 'typeof'
     && lk != 10499                 // Identifier 'while'
     && lk != 10500                 // Null 'while'
     && lk != 10501                 // True 'while'
     && lk != 10502                 // False 'while'
     && lk != 10503                 // Character 'while'
     && lk != 10504                 // String 'while'
     && lk != 10505                 // Integer 'while'
     && lk != 10506                 // Complex 'while'
     && lk != 10507                 // Real 'while'
     && lk != 10627                 // Identifier '{'
     && lk != 10628                 // Null '{'
     && lk != 10629                 // True '{'
     && lk != 10630                 // False '{'
     && lk != 10631                 // Character '{'
     && lk != 10632                 // String '{'
     && lk != 10633                 // Integer '{'
     && lk != 10634                 // Complex '{'
     && lk != 10635                 // Real '{'
     && lk != 10755                 // Identifier '|'
     && lk != 10756                 // Null '|'
     && lk != 10757                 // True '|'
     && lk != 10758                 // False '|'
     && lk != 10759                 // Character '|'
     && lk != 10760                 // String '|'
     && lk != 10761                 // Integer '|'
     && lk != 10762                 // Complex '|'
     && lk != 10763                 // Real '|'
     && lk != 10883                 // Identifier '|='
     && lk != 10884                 // Null '|='
     && lk != 10885                 // True '|='
     && lk != 10886                 // False '|='
     && lk != 10887                 // Character '|='
     && lk != 10888                 // String '|='
     && lk != 10889                 // Integer '|='
     && lk != 10890                 // Complex '|='
     && lk != 10891                 // Real '|='
     && lk != 11011                 // Identifier '||'
     && lk != 11012                 // Null '||'
     && lk != 11013                 // True '||'
     && lk != 11014                 // False '||'
     && lk != 11015                 // Character '||'
     && lk != 11016                 // String '||'
     && lk != 11017                 // Integer '||'
     && lk != 11018                 // Complex '||'
     && lk != 11019                 // Real '||'
     && lk != 11139                 // Identifier '}'
     && lk != 11140                 // Null '}'
     && lk != 11141                 // True '}'
     && lk != 11142                 // False '}'
     && lk != 11143                 // Character '}'
     && lk != 11144                 // String '}'
     && lk != 11145                 // Integer '}'
     && lk != 11146                 // Complex '}'
     && lk != 11147                 // Real '}'
     && lk != 11267                 // Identifier '~'
     && lk != 11268                 // Null '~'
     && lk != 11269                 // True '~'
     && lk != 11270                 // False '~'
     && lk != 11271                 // Character '~'
     && lk != 11272                 // String '~'
     && lk != 11273                 // Integer '~'
     && lk != 11274                 // Complex '~'
     && lk != 11275                 // Real '~'
     && lk != 16833                 // 'f32' Identifier END
     && lk != 16834                 // 'f64' Identifier END
     && lk != 16838                 // 'i32' Identifier END
     && lk != 16839                 // 'i64' Identifier END
     && lk != 20099                 // Identifier '++' END
     && lk != 20100                 // Null '++' END
     && lk != 20101                 // True '++' END
     && lk != 20102                 // False '++' END
     && lk != 20103                 // Character '++' END
     && lk != 20104                 // String '++' END
     && lk != 20105                 // Integer '++' END
     && lk != 20106                 // Complex '++' END
     && lk != 20107                 // Real '++' END
     && lk != 20611                 // Identifier '--' END
     && lk != 20612                 // Null '--' END
     && lk != 20613                 // True '--' END
     && lk != 20614                 // False '--' END
     && lk != 20615                 // Character '--' END
     && lk != 20616                 // String '--' END
     && lk != 20617                 // Integer '--' END
     && lk != 20618                 // Complex '--' END
     && lk != 20619                 // Real '--' END
     && lk != 23349                 // '[' ']' END
     && lk != 27603                 // '{' '}' END
     && lk != 49601                 // 'f32' Identifier Identifier
     && lk != 49602                 // 'f64' Identifier Identifier
     && lk != 49606                 // 'i32' Identifier Identifier
     && lk != 49607                 // 'i64' Identifier Identifier
     && lk != 56117                 // '[' ']' Identifier
     && lk != 60371                 // '{' '}' Identifier
     && lk != 65985                 // 'f32' Identifier Null
     && lk != 65986                 // 'f64' Identifier Null
     && lk != 65990                 // 'i32' Identifier Null
     && lk != 65991                 // 'i64' Identifier Null
     && lk != 72501                 // '[' ']' Null
     && lk != 76755                 // '{' '}' Null
     && lk != 82369                 // 'f32' Identifier True
     && lk != 82370                 // 'f64' Identifier True
     && lk != 82374                 // 'i32' Identifier True
     && lk != 82375                 // 'i64' Identifier True
     && lk != 88885                 // '[' ']' True
     && lk != 93139                 // '{' '}' True
     && lk != 98753                 // 'f32' Identifier False
     && lk != 98754                 // 'f64' Identifier False
     && lk != 98758                 // 'i32' Identifier False
     && lk != 98759                 // 'i64' Identifier False
     && lk != 105269                // '[' ']' False
     && lk != 109523                // '{' '}' False
     && lk != 115137                // 'f32' Identifier Character
     && lk != 115138                // 'f64' Identifier Character
     && lk != 115142                // 'i32' Identifier Character
     && lk != 115143                // 'i64' Identifier Character
     && lk != 121653                // '[' ']' Character
     && lk != 125907                // '{' '}' Character
     && lk != 131521                // 'f32' Identifier String
     && lk != 131522                // 'f64' Identifier String
     && lk != 131526                // 'i32' Identifier String
     && lk != 131527                // 'i64' Identifier String
     && lk != 138037                // '[' ']' String
     && lk != 142291                // '{' '}' String
     && lk != 147905                // 'f32' Identifier Integer
     && lk != 147906                // 'f64' Identifier Integer
     && lk != 147910                // 'i32' Identifier Integer
     && lk != 147911                // 'i64' Identifier Integer
     && lk != 154421                // '[' ']' Integer
     && lk != 158675                // '{' '}' Integer
     && lk != 164289                // 'f32' Identifier Complex
     && lk != 164290                // 'f64' Identifier Complex
     && lk != 164294                // 'i32' Identifier Complex
     && lk != 164295                // 'i64' Identifier Complex
     && lk != 170805                // '[' ']' Complex
     && lk != 175059                // '{' '}' Complex
     && lk != 180673                // 'f32' Identifier Real
     && lk != 180674                // 'f64' Identifier Real
     && lk != 180678                // 'i32' Identifier Real
     && lk != 180679                // 'i64' Identifier Real
     && lk != 187189                // '[' ']' Real
     && lk != 191443                // '{' '}' Real
     && lk != 197057                // 'f32' Identifier Comment
     && lk != 197058                // 'f64' Identifier Comment
     && lk != 197062                // 'i32' Identifier Comment
     && lk != 197063                // 'i64' Identifier Comment
     && lk != 200323                // Identifier '++' Comment
     && lk != 200324                // Null '++' Comment
     && lk != 200325                // True '++' Comment
     && lk != 200326                // False '++' Comment
     && lk != 200327                // Character '++' Comment
     && lk != 200328                // String '++' Comment
     && lk != 200329                // Integer '++' Comment
     && lk != 200330                // Complex '++' Comment
     && lk != 200331                // Real '++' Comment
     && lk != 200835                // Identifier '--' Comment
     && lk != 200836                // Null '--' Comment
     && lk != 200837                // True '--' Comment
     && lk != 200838                // False '--' Comment
     && lk != 200839                // Character '--' Comment
     && lk != 200840                // String '--' Comment
     && lk != 200841                // Integer '--' Comment
     && lk != 200842                // Complex '--' Comment
     && lk != 200843                // Real '--' Comment
     && lk != 203573                // '[' ']' Comment
     && lk != 207827                // '{' '}' Comment
     && lk != 246209                // 'f32' Identifier '!'
     && lk != 246210                // 'f64' Identifier '!'
     && lk != 246214                // 'i32' Identifier '!'
     && lk != 246215                // 'i64' Identifier '!'
     && lk != 249475                // Identifier '++' '!'
     && lk != 249476                // Null '++' '!'
     && lk != 249477                // True '++' '!'
     && lk != 249478                // False '++' '!'
     && lk != 249479                // Character '++' '!'
     && lk != 249480                // String '++' '!'
     && lk != 249481                // Integer '++' '!'
     && lk != 249482                // Complex '++' '!'
     && lk != 249483                // Real '++' '!'
     && lk != 249987                // Identifier '--' '!'
     && lk != 249988                // Null '--' '!'
     && lk != 249989                // True '--' '!'
     && lk != 249990                // False '--' '!'
     && lk != 249991                // Character '--' '!'
     && lk != 249992                // String '--' '!'
     && lk != 249993                // Integer '--' '!'
     && lk != 249994                // Complex '--' '!'
     && lk != 249995                // Real '--' '!'
     && lk != 252725                // '[' ']' '!'
     && lk != 256979                // '{' '}' '!'
     && lk != 262593                // 'f32' Identifier '!='
     && lk != 262594                // 'f64' Identifier '!='
     && lk != 262598                // 'i32' Identifier '!='
     && lk != 262599                // 'i64' Identifier '!='
     && lk != 265859                // Identifier '++' '!='
     && lk != 265860                // Null '++' '!='
     && lk != 265861                // True '++' '!='
     && lk != 265862                // False '++' '!='
     && lk != 265863                // Character '++' '!='
     && lk != 265864                // String '++' '!='
     && lk != 265865                // Integer '++' '!='
     && lk != 265866                // Complex '++' '!='
     && lk != 265867                // Real '++' '!='
     && lk != 266371                // Identifier '--' '!='
     && lk != 266372                // Null '--' '!='
     && lk != 266373                // True '--' '!='
     && lk != 266374                // False '--' '!='
     && lk != 266375                // Character '--' '!='
     && lk != 266376                // String '--' '!='
     && lk != 266377                // Integer '--' '!='
     && lk != 266378                // Complex '--' '!='
     && lk != 266379                // Real '--' '!='
     && lk != 269109                // '[' ']' '!='
     && lk != 273363                // '{' '}' '!='
     && lk != 295361                // 'f32' Identifier '%'
     && lk != 295362                // 'f64' Identifier '%'
     && lk != 295366                // 'i32' Identifier '%'
     && lk != 295367                // 'i64' Identifier '%'
     && lk != 298627                // Identifier '++' '%'
     && lk != 298628                // Null '++' '%'
     && lk != 298629                // True '++' '%'
     && lk != 298630                // False '++' '%'
     && lk != 298631                // Character '++' '%'
     && lk != 298632                // String '++' '%'
     && lk != 298633                // Integer '++' '%'
     && lk != 298634                // Complex '++' '%'
     && lk != 298635                // Real '++' '%'
     && lk != 299139                // Identifier '--' '%'
     && lk != 299140                // Null '--' '%'
     && lk != 299141                // True '--' '%'
     && lk != 299142                // False '--' '%'
     && lk != 299143                // Character '--' '%'
     && lk != 299144                // String '--' '%'
     && lk != 299145                // Integer '--' '%'
     && lk != 299146                // Complex '--' '%'
     && lk != 299147                // Real '--' '%'
     && lk != 301877                // '[' ']' '%'
     && lk != 306131                // '{' '}' '%'
     && lk != 311745                // 'f32' Identifier '%='
     && lk != 311746                // 'f64' Identifier '%='
     && lk != 311750                // 'i32' Identifier '%='
     && lk != 311751                // 'i64' Identifier '%='
     && lk != 315011                // Identifier '++' '%='
     && lk != 315012                // Null '++' '%='
     && lk != 315013                // True '++' '%='
     && lk != 315014                // False '++' '%='
     && lk != 315015                // Character '++' '%='
     && lk != 315016                // String '++' '%='
     && lk != 315017                // Integer '++' '%='
     && lk != 315018                // Complex '++' '%='
     && lk != 315019                // Real '++' '%='
     && lk != 315523                // Identifier '--' '%='
     && lk != 315524                // Null '--' '%='
     && lk != 315525                // True '--' '%='
     && lk != 315526                // False '--' '%='
     && lk != 315527                // Character '--' '%='
     && lk != 315528                // String '--' '%='
     && lk != 315529                // Integer '--' '%='
     && lk != 315530                // Complex '--' '%='
     && lk != 315531                // Real '--' '%='
     && lk != 318261                // '[' ']' '%='
     && lk != 322515                // '{' '}' '%='
     && lk != 328129                // 'f32' Identifier '&'
     && lk != 328130                // 'f64' Identifier '&'
     && lk != 328134                // 'i32' Identifier '&'
     && lk != 328135                // 'i64' Identifier '&'
     && lk != 331395                // Identifier '++' '&'
     && lk != 331396                // Null '++' '&'
     && lk != 331397                // True '++' '&'
     && lk != 331398                // False '++' '&'
     && lk != 331399                // Character '++' '&'
     && lk != 331400                // String '++' '&'
     && lk != 331401                // Integer '++' '&'
     && lk != 331402                // Complex '++' '&'
     && lk != 331403                // Real '++' '&'
     && lk != 331907                // Identifier '--' '&'
     && lk != 331908                // Null '--' '&'
     && lk != 331909                // True '--' '&'
     && lk != 331910                // False '--' '&'
     && lk != 331911                // Character '--' '&'
     && lk != 331912                // String '--' '&'
     && lk != 331913                // Integer '--' '&'
     && lk != 331914                // Complex '--' '&'
     && lk != 331915                // Real '--' '&'
     && lk != 334645                // '[' ']' '&'
     && lk != 338899                // '{' '}' '&'
     && lk != 344513                // 'f32' Identifier '&&'
     && lk != 344514                // 'f64' Identifier '&&'
     && lk != 344518                // 'i32' Identifier '&&'
     && lk != 344519                // 'i64' Identifier '&&'
     && lk != 347779                // Identifier '++' '&&'
     && lk != 347780                // Null '++' '&&'
     && lk != 347781                // True '++' '&&'
     && lk != 347782                // False '++' '&&'
     && lk != 347783                // Character '++' '&&'
     && lk != 347784                // String '++' '&&'
     && lk != 347785                // Integer '++' '&&'
     && lk != 347786                // Complex '++' '&&'
     && lk != 347787                // Real '++' '&&'
     && lk != 348291                // Identifier '--' '&&'
     && lk != 348292                // Null '--' '&&'
     && lk != 348293                // True '--' '&&'
     && lk != 348294                // False '--' '&&'
     && lk != 348295                // Character '--' '&&'
     && lk != 348296                // String '--' '&&'
     && lk != 348297                // Integer '--' '&&'
     && lk != 348298                // Complex '--' '&&'
     && lk != 348299                // Real '--' '&&'
     && lk != 351029                // '[' ']' '&&'
     && lk != 355283                // '{' '}' '&&'
     && lk != 360897                // 'f32' Identifier '&='
     && lk != 360898                // 'f64' Identifier '&='
     && lk != 360902                // 'i32' Identifier '&='
     && lk != 360903                // 'i64' Identifier '&='
     && lk != 364163                // Identifier '++' '&='
     && lk != 364164                // Null '++' '&='
     && lk != 364165                // True '++' '&='
     && lk != 364166                // False '++' '&='
     && lk != 364167                // Character '++' '&='
     && lk != 364168                // String '++' '&='
     && lk != 364169                // Integer '++' '&='
     && lk != 364170                // Complex '++' '&='
     && lk != 364171                // Real '++' '&='
     && lk != 364675                // Identifier '--' '&='
     && lk != 364676                // Null '--' '&='
     && lk != 364677                // True '--' '&='
     && lk != 364678                // False '--' '&='
     && lk != 364679                // Character '--' '&='
     && lk != 364680                // String '--' '&='
     && lk != 364681                // Integer '--' '&='
     && lk != 364682                // Complex '--' '&='
     && lk != 364683                // Real '--' '&='
     && lk != 367413                // '[' ']' '&='
     && lk != 371667                // '{' '}' '&='
     && lk != 383797                // '[' ']' '('
     && lk != 388051                // '{' '}' '('
     && lk != 393665                // 'f32' Identifier ')'
     && lk != 393666                // 'f64' Identifier ')'
     && lk != 393670                // 'i32' Identifier ')'
     && lk != 393671                // 'i64' Identifier ')'
     && lk != 396931                // Identifier '++' ')'
     && lk != 396932                // Null '++' ')'
     && lk != 396933                // True '++' ')'
     && lk != 396934                // False '++' ')'
     && lk != 396935                // Character '++' ')'
     && lk != 396936                // String '++' ')'
     && lk != 396937                // Integer '++' ')'
     && lk != 396938                // Complex '++' ')'
     && lk != 396939                // Real '++' ')'
     && lk != 397443                // Identifier '--' ')'
     && lk != 397444                // Null '--' ')'
     && lk != 397445                // True '--' ')'
     && lk != 397446                // False '--' ')'
     && lk != 397447                // Character '--' ')'
     && lk != 397448                // String '--' ')'
     && lk != 397449                // Integer '--' ')'
     && lk != 397450                // Complex '--' ')'
     && lk != 397451                // Real '--' ')'
     && lk != 400181                // '[' ']' ')'
     && lk != 404435                // '{' '}' ')'
     && lk != 410049                // 'f32' Identifier '*'
     && lk != 410050                // 'f64' Identifier '*'
     && lk != 410054                // 'i32' Identifier '*'
     && lk != 410055                // 'i64' Identifier '*'
     && lk != 413315                // Identifier '++' '*'
     && lk != 413316                // Null '++' '*'
     && lk != 413317                // True '++' '*'
     && lk != 413318                // False '++' '*'
     && lk != 413319                // Character '++' '*'
     && lk != 413320                // String '++' '*'
     && lk != 413321                // Integer '++' '*'
     && lk != 413322                // Complex '++' '*'
     && lk != 413323                // Real '++' '*'
     && lk != 413827                // Identifier '--' '*'
     && lk != 413828                // Null '--' '*'
     && lk != 413829                // True '--' '*'
     && lk != 413830                // False '--' '*'
     && lk != 413831                // Character '--' '*'
     && lk != 413832                // String '--' '*'
     && lk != 413833                // Integer '--' '*'
     && lk != 413834                // Complex '--' '*'
     && lk != 413835                // Real '--' '*'
     && lk != 416565                // '[' ']' '*'
     && lk != 420819                // '{' '}' '*'
     && lk != 426433                // 'f32' Identifier '**'
     && lk != 426434                // 'f64' Identifier '**'
     && lk != 426438                // 'i32' Identifier '**'
     && lk != 426439                // 'i64' Identifier '**'
     && lk != 429699                // Identifier '++' '**'
     && lk != 429700                // Null '++' '**'
     && lk != 429701                // True '++' '**'
     && lk != 429702                // False '++' '**'
     && lk != 429703                // Character '++' '**'
     && lk != 429704                // String '++' '**'
     && lk != 429705                // Integer '++' '**'
     && lk != 429706                // Complex '++' '**'
     && lk != 429707                // Real '++' '**'
     && lk != 430211                // Identifier '--' '**'
     && lk != 430212                // Null '--' '**'
     && lk != 430213                // True '--' '**'
     && lk != 430214                // False '--' '**'
     && lk != 430215                // Character '--' '**'
     && lk != 430216                // String '--' '**'
     && lk != 430217                // Integer '--' '**'
     && lk != 430218                // Complex '--' '**'
     && lk != 430219                // Real '--' '**'
     && lk != 432949                // '[' ']' '**'
     && lk != 437203                // '{' '}' '**'
     && lk != 442817                // 'f32' Identifier '*='
     && lk != 442818                // 'f64' Identifier '*='
     && lk != 442822                // 'i32' Identifier '*='
     && lk != 442823                // 'i64' Identifier '*='
     && lk != 446083                // Identifier '++' '*='
     && lk != 446084                // Null '++' '*='
     && lk != 446085                // True '++' '*='
     && lk != 446086                // False '++' '*='
     && lk != 446087                // Character '++' '*='
     && lk != 446088                // String '++' '*='
     && lk != 446089                // Integer '++' '*='
     && lk != 446090                // Complex '++' '*='
     && lk != 446091                // Real '++' '*='
     && lk != 446595                // Identifier '--' '*='
     && lk != 446596                // Null '--' '*='
     && lk != 446597                // True '--' '*='
     && lk != 446598                // False '--' '*='
     && lk != 446599                // Character '--' '*='
     && lk != 446600                // String '--' '*='
     && lk != 446601                // Integer '--' '*='
     && lk != 446602                // Complex '--' '*='
     && lk != 446603                // Real '--' '*='
     && lk != 449333                // '[' ']' '*='
     && lk != 453587                // '{' '}' '*='
     && lk != 459201                // 'f32' Identifier '+'
     && lk != 459202                // 'f64' Identifier '+'
     && lk != 459206                // 'i32' Identifier '+'
     && lk != 459207                // 'i64' Identifier '+'
     && lk != 462467                // Identifier '++' '+'
     && lk != 462468                // Null '++' '+'
     && lk != 462469                // True '++' '+'
     && lk != 462470                // False '++' '+'
     && lk != 462471                // Character '++' '+'
     && lk != 462472                // String '++' '+'
     && lk != 462473                // Integer '++' '+'
     && lk != 462474                // Complex '++' '+'
     && lk != 462475                // Real '++' '+'
     && lk != 462979                // Identifier '--' '+'
     && lk != 462980                // Null '--' '+'
     && lk != 462981                // True '--' '+'
     && lk != 462982                // False '--' '+'
     && lk != 462983                // Character '--' '+'
     && lk != 462984                // String '--' '+'
     && lk != 462985                // Integer '--' '+'
     && lk != 462986                // Complex '--' '+'
     && lk != 462987                // Real '--' '+'
     && lk != 465717                // '[' ']' '+'
     && lk != 469971                // '{' '}' '+'
     && lk != 478851                // Identifier '++' '++'
     && lk != 478852                // Null '++' '++'
     && lk != 478853                // True '++' '++'
     && lk != 478854                // False '++' '++'
     && lk != 478855                // Character '++' '++'
     && lk != 478856                // String '++' '++'
     && lk != 478857                // Integer '++' '++'
     && lk != 478858                // Complex '++' '++'
     && lk != 478859                // Real '++' '++'
     && lk != 479363                // Identifier '--' '++'
     && lk != 479364                // Null '--' '++'
     && lk != 479365                // True '--' '++'
     && lk != 479366                // False '--' '++'
     && lk != 479367                // Character '--' '++'
     && lk != 479368                // String '--' '++'
     && lk != 479369                // Integer '--' '++'
     && lk != 479370                // Complex '--' '++'
     && lk != 479371                // Real '--' '++'
     && lk != 491969                // 'f32' Identifier '+='
     && lk != 491970                // 'f64' Identifier '+='
     && lk != 491974                // 'i32' Identifier '+='
     && lk != 491975                // 'i64' Identifier '+='
     && lk != 495235                // Identifier '++' '+='
     && lk != 495236                // Null '++' '+='
     && lk != 495237                // True '++' '+='
     && lk != 495238                // False '++' '+='
     && lk != 495239                // Character '++' '+='
     && lk != 495240                // String '++' '+='
     && lk != 495241                // Integer '++' '+='
     && lk != 495242                // Complex '++' '+='
     && lk != 495243                // Real '++' '+='
     && lk != 495747                // Identifier '--' '+='
     && lk != 495748                // Null '--' '+='
     && lk != 495749                // True '--' '+='
     && lk != 495750                // False '--' '+='
     && lk != 495751                // Character '--' '+='
     && lk != 495752                // String '--' '+='
     && lk != 495753                // Integer '--' '+='
     && lk != 495754                // Complex '--' '+='
     && lk != 495755                // Real '--' '+='
     && lk != 498485                // '[' ']' '+='
     && lk != 502739                // '{' '}' '+='
     && lk != 508353                // 'f32' Identifier ','
     && lk != 508354                // 'f64' Identifier ','
     && lk != 508358                // 'i32' Identifier ','
     && lk != 508359                // 'i64' Identifier ','
     && lk != 511619                // Identifier '++' ','
     && lk != 511620                // Null '++' ','
     && lk != 511621                // True '++' ','
     && lk != 511622                // False '++' ','
     && lk != 511623                // Character '++' ','
     && lk != 511624                // String '++' ','
     && lk != 511625                // Integer '++' ','
     && lk != 511626                // Complex '++' ','
     && lk != 511627                // Real '++' ','
     && lk != 512131                // Identifier '--' ','
     && lk != 512132                // Null '--' ','
     && lk != 512133                // True '--' ','
     && lk != 512134                // False '--' ','
     && lk != 512135                // Character '--' ','
     && lk != 512136                // String '--' ','
     && lk != 512137                // Integer '--' ','
     && lk != 512138                // Complex '--' ','
     && lk != 512139                // Real '--' ','
     && lk != 514869                // '[' ']' ','
     && lk != 519123                // '{' '}' ','
     && lk != 524737                // 'f32' Identifier '-'
     && lk != 524738                // 'f64' Identifier '-'
     && lk != 524742                // 'i32' Identifier '-'
     && lk != 524743                // 'i64' Identifier '-'
     && lk != 528003                // Identifier '++' '-'
     && lk != 528004                // Null '++' '-'
     && lk != 528005                // True '++' '-'
     && lk != 528006                // False '++' '-'
     && lk != 528007                // Character '++' '-'
     && lk != 528008                // String '++' '-'
     && lk != 528009                // Integer '++' '-'
     && lk != 528010                // Complex '++' '-'
     && lk != 528011                // Real '++' '-'
     && lk != 528515                // Identifier '--' '-'
     && lk != 528516                // Null '--' '-'
     && lk != 528517                // True '--' '-'
     && lk != 528518                // False '--' '-'
     && lk != 528519                // Character '--' '-'
     && lk != 528520                // String '--' '-'
     && lk != 528521                // Integer '--' '-'
     && lk != 528522                // Complex '--' '-'
     && lk != 528523                // Real '--' '-'
     && lk != 531253                // '[' ']' '-'
     && lk != 535507                // '{' '}' '-'
     && lk != 544387                // Identifier '++' '--'
     && lk != 544388                // Null '++' '--'
     && lk != 544389                // True '++' '--'
     && lk != 544390                // False '++' '--'
     && lk != 544391                // Character '++' '--'
     && lk != 544392                // String '++' '--'
     && lk != 544393                // Integer '++' '--'
     && lk != 544394                // Complex '++' '--'
     && lk != 544395                // Real '++' '--'
     && lk != 544899                // Identifier '--' '--'
     && lk != 544900                // Null '--' '--'
     && lk != 544901                // True '--' '--'
     && lk != 544902                // False '--' '--'
     && lk != 544903                // Character '--' '--'
     && lk != 544904                // String '--' '--'
     && lk != 544905                // Integer '--' '--'
     && lk != 544906                // Complex '--' '--'
     && lk != 544907                // Real '--' '--'
     && lk != 557505                // 'f32' Identifier '-='
     && lk != 557506                // 'f64' Identifier '-='
     && lk != 557510                // 'i32' Identifier '-='
     && lk != 557511                // 'i64' Identifier '-='
     && lk != 560771                // Identifier '++' '-='
     && lk != 560772                // Null '++' '-='
     && lk != 560773                // True '++' '-='
     && lk != 560774                // False '++' '-='
     && lk != 560775                // Character '++' '-='
     && lk != 560776                // String '++' '-='
     && lk != 560777                // Integer '++' '-='
     && lk != 560778                // Complex '++' '-='
     && lk != 560779                // Real '++' '-='
     && lk != 561283                // Identifier '--' '-='
     && lk != 561284                // Null '--' '-='
     && lk != 561285                // True '--' '-='
     && lk != 561286                // False '--' '-='
     && lk != 561287                // Character '--' '-='
     && lk != 561288                // String '--' '-='
     && lk != 561289                // Integer '--' '-='
     && lk != 561290                // Complex '--' '-='
     && lk != 561291                // Real '--' '-='
     && lk != 564021                // '[' ']' '-='
     && lk != 568275                // '{' '}' '-='
     && lk != 590273                // 'f32' Identifier '/'
     && lk != 590274                // 'f64' Identifier '/'
     && lk != 590278                // 'i32' Identifier '/'
     && lk != 590279                // 'i64' Identifier '/'
     && lk != 593539                // Identifier '++' '/'
     && lk != 593540                // Null '++' '/'
     && lk != 593541                // True '++' '/'
     && lk != 593542                // False '++' '/'
     && lk != 593543                // Character '++' '/'
     && lk != 593544                // String '++' '/'
     && lk != 593545                // Integer '++' '/'
     && lk != 593546                // Complex '++' '/'
     && lk != 593547                // Real '++' '/'
     && lk != 594051                // Identifier '--' '/'
     && lk != 594052                // Null '--' '/'
     && lk != 594053                // True '--' '/'
     && lk != 594054                // False '--' '/'
     && lk != 594055                // Character '--' '/'
     && lk != 594056                // String '--' '/'
     && lk != 594057                // Integer '--' '/'
     && lk != 594058                // Complex '--' '/'
     && lk != 594059                // Real '--' '/'
     && lk != 596789                // '[' ']' '/'
     && lk != 601043                // '{' '}' '/'
     && lk != 606657                // 'f32' Identifier '/='
     && lk != 606658                // 'f64' Identifier '/='
     && lk != 606662                // 'i32' Identifier '/='
     && lk != 606663                // 'i64' Identifier '/='
     && lk != 609923                // Identifier '++' '/='
     && lk != 609924                // Null '++' '/='
     && lk != 609925                // True '++' '/='
     && lk != 609926                // False '++' '/='
     && lk != 609927                // Character '++' '/='
     && lk != 609928                // String '++' '/='
     && lk != 609929                // Integer '++' '/='
     && lk != 609930                // Complex '++' '/='
     && lk != 609931                // Real '++' '/='
     && lk != 610435                // Identifier '--' '/='
     && lk != 610436                // Null '--' '/='
     && lk != 610437                // True '--' '/='
     && lk != 610438                // False '--' '/='
     && lk != 610439                // Character '--' '/='
     && lk != 610440                // String '--' '/='
     && lk != 610441                // Integer '--' '/='
     && lk != 610442                // Complex '--' '/='
     && lk != 610443                // Real '--' '/='
     && lk != 613173                // '[' ']' '/='
     && lk != 617427                // '{' '}' '/='
     && lk != 623041                // 'f32' Identifier ':'
     && lk != 623042                // 'f64' Identifier ':'
     && lk != 623046                // 'i32' Identifier ':'
     && lk != 623047                // 'i64' Identifier ':'
     && lk != 626307                // Identifier '++' ':'
     && lk != 626308                // Null '++' ':'
     && lk != 626309                // True '++' ':'
     && lk != 626310                // False '++' ':'
     && lk != 626311                // Character '++' ':'
     && lk != 626312                // String '++' ':'
     && lk != 626313                // Integer '++' ':'
     && lk != 626314                // Complex '++' ':'
     && lk != 626315                // Real '++' ':'
     && lk != 626819                // Identifier '--' ':'
     && lk != 626820                // Null '--' ':'
     && lk != 626821                // True '--' ':'
     && lk != 626822                // False '--' ':'
     && lk != 626823                // Character '--' ':'
     && lk != 626824                // String '--' ':'
     && lk != 626825                // Integer '--' ':'
     && lk != 626826                // Complex '--' ':'
     && lk != 626827                // Real '--' ':'
     && lk != 629557                // '[' ']' ':'
     && lk != 633811                // '{' '}' ':'
     && lk != 639425                // 'f32' Identifier ':='
     && lk != 639426                // 'f64' Identifier ':='
     && lk != 639430                // 'i32' Identifier ':='
     && lk != 639431                // 'i64' Identifier ':='
     && lk != 642691                // Identifier '++' ':='
     && lk != 642692                // Null '++' ':='
     && lk != 642693                // True '++' ':='
     && lk != 642694                // False '++' ':='
     && lk != 642695                // Character '++' ':='
     && lk != 642696                // String '++' ':='
     && lk != 642697                // Integer '++' ':='
     && lk != 642698                // Complex '++' ':='
     && lk != 642699                // Real '++' ':='
     && lk != 643203                // Identifier '--' ':='
     && lk != 643204                // Null '--' ':='
     && lk != 643205                // True '--' ':='
     && lk != 643206                // False '--' ':='
     && lk != 643207                // Character '--' ':='
     && lk != 643208                // String '--' ':='
     && lk != 643209                // Integer '--' ':='
     && lk != 643210                // Complex '--' ':='
     && lk != 643211                // Real '--' ':='
     && lk != 645941                // '[' ']' ':='
     && lk != 650195                // '{' '}' ':='
     && lk != 655809                // 'f32' Identifier ';'
     && lk != 655810                // 'f64' Identifier ';'
     && lk != 655814                // 'i32' Identifier ';'
     && lk != 655815                // 'i64' Identifier ';'
     && lk != 659075                // Identifier '++' ';'
     && lk != 659076                // Null '++' ';'
     && lk != 659077                // True '++' ';'
     && lk != 659078                // False '++' ';'
     && lk != 659079                // Character '++' ';'
     && lk != 659080                // String '++' ';'
     && lk != 659081                // Integer '++' ';'
     && lk != 659082                // Complex '++' ';'
     && lk != 659083                // Real '++' ';'
     && lk != 659587                // Identifier '--' ';'
     && lk != 659588                // Null '--' ';'
     && lk != 659589                // True '--' ';'
     && lk != 659590                // False '--' ';'
     && lk != 659591                // Character '--' ';'
     && lk != 659592                // String '--' ';'
     && lk != 659593                // Integer '--' ';'
     && lk != 659594                // Complex '--' ';'
     && lk != 659595                // Real '--' ';'
     && lk != 662325                // '[' ']' ';'
     && lk != 666579                // '{' '}' ';'
     && lk != 672193                // 'f32' Identifier '<'
     && lk != 672194                // 'f64' Identifier '<'
     && lk != 672198                // 'i32' Identifier '<'
     && lk != 672199                // 'i64' Identifier '<'
     && lk != 675459                // Identifier '++' '<'
     && lk != 675460                // Null '++' '<'
     && lk != 675461                // True '++' '<'
     && lk != 675462                // False '++' '<'
     && lk != 675463                // Character '++' '<'
     && lk != 675464                // String '++' '<'
     && lk != 675465                // Integer '++' '<'
     && lk != 675466                // Complex '++' '<'
     && lk != 675467                // Real '++' '<'
     && lk != 675971                // Identifier '--' '<'
     && lk != 675972                // Null '--' '<'
     && lk != 675973                // True '--' '<'
     && lk != 675974                // False '--' '<'
     && lk != 675975                // Character '--' '<'
     && lk != 675976                // String '--' '<'
     && lk != 675977                // Integer '--' '<'
     && lk != 675978                // Complex '--' '<'
     && lk != 675979                // Real '--' '<'
     && lk != 678709                // '[' ']' '<'
     && lk != 682963                // '{' '}' '<'
     && lk != 688577                // 'f32' Identifier '<<'
     && lk != 688578                // 'f64' Identifier '<<'
     && lk != 688582                // 'i32' Identifier '<<'
     && lk != 688583                // 'i64' Identifier '<<'
     && lk != 691843                // Identifier '++' '<<'
     && lk != 691844                // Null '++' '<<'
     && lk != 691845                // True '++' '<<'
     && lk != 691846                // False '++' '<<'
     && lk != 691847                // Character '++' '<<'
     && lk != 691848                // String '++' '<<'
     && lk != 691849                // Integer '++' '<<'
     && lk != 691850                // Complex '++' '<<'
     && lk != 691851                // Real '++' '<<'
     && lk != 692355                // Identifier '--' '<<'
     && lk != 692356                // Null '--' '<<'
     && lk != 692357                // True '--' '<<'
     && lk != 692358                // False '--' '<<'
     && lk != 692359                // Character '--' '<<'
     && lk != 692360                // String '--' '<<'
     && lk != 692361                // Integer '--' '<<'
     && lk != 692362                // Complex '--' '<<'
     && lk != 692363                // Real '--' '<<'
     && lk != 695093                // '[' ']' '<<'
     && lk != 699347                // '{' '}' '<<'
     && lk != 704961                // 'f32' Identifier '<<='
     && lk != 704962                // 'f64' Identifier '<<='
     && lk != 704966                // 'i32' Identifier '<<='
     && lk != 704967                // 'i64' Identifier '<<='
     && lk != 708227                // Identifier '++' '<<='
     && lk != 708228                // Null '++' '<<='
     && lk != 708229                // True '++' '<<='
     && lk != 708230                // False '++' '<<='
     && lk != 708231                // Character '++' '<<='
     && lk != 708232                // String '++' '<<='
     && lk != 708233                // Integer '++' '<<='
     && lk != 708234                // Complex '++' '<<='
     && lk != 708235                // Real '++' '<<='
     && lk != 708739                // Identifier '--' '<<='
     && lk != 708740                // Null '--' '<<='
     && lk != 708741                // True '--' '<<='
     && lk != 708742                // False '--' '<<='
     && lk != 708743                // Character '--' '<<='
     && lk != 708744                // String '--' '<<='
     && lk != 708745                // Integer '--' '<<='
     && lk != 708746                // Complex '--' '<<='
     && lk != 708747                // Real '--' '<<='
     && lk != 711477                // '[' ']' '<<='
     && lk != 715731                // '{' '}' '<<='
     && lk != 721345                // 'f32' Identifier '<='
     && lk != 721346                // 'f64' Identifier '<='
     && lk != 721350                // 'i32' Identifier '<='
     && lk != 721351                // 'i64' Identifier '<='
     && lk != 724611                // Identifier '++' '<='
     && lk != 724612                // Null '++' '<='
     && lk != 724613                // True '++' '<='
     && lk != 724614                // False '++' '<='
     && lk != 724615                // Character '++' '<='
     && lk != 724616                // String '++' '<='
     && lk != 724617                // Integer '++' '<='
     && lk != 724618                // Complex '++' '<='
     && lk != 724619                // Real '++' '<='
     && lk != 725123                // Identifier '--' '<='
     && lk != 725124                // Null '--' '<='
     && lk != 725125                // True '--' '<='
     && lk != 725126                // False '--' '<='
     && lk != 725127                // Character '--' '<='
     && lk != 725128                // String '--' '<='
     && lk != 725129                // Integer '--' '<='
     && lk != 725130                // Complex '--' '<='
     && lk != 725131                // Real '--' '<='
     && lk != 727861                // '[' ']' '<='
     && lk != 732115                // '{' '}' '<='
     && lk != 737729                // 'f32' Identifier '='
     && lk != 737730                // 'f64' Identifier '='
     && lk != 737734                // 'i32' Identifier '='
     && lk != 737735                // 'i64' Identifier '='
     && lk != 740995                // Identifier '++' '='
     && lk != 740996                // Null '++' '='
     && lk != 740997                // True '++' '='
     && lk != 740998                // False '++' '='
     && lk != 740999                // Character '++' '='
     && lk != 741000                // String '++' '='
     && lk != 741001                // Integer '++' '='
     && lk != 741002                // Complex '++' '='
     && lk != 741003                // Real '++' '='
     && lk != 741507                // Identifier '--' '='
     && lk != 741508                // Null '--' '='
     && lk != 741509                // True '--' '='
     && lk != 741510                // False '--' '='
     && lk != 741511                // Character '--' '='
     && lk != 741512                // String '--' '='
     && lk != 741513                // Integer '--' '='
     && lk != 741514                // Complex '--' '='
     && lk != 741515                // Real '--' '='
     && lk != 744245                // '[' ']' '='
     && lk != 748499                // '{' '}' '='
     && lk != 754113                // 'f32' Identifier '=='
     && lk != 754114                // 'f64' Identifier '=='
     && lk != 754118                // 'i32' Identifier '=='
     && lk != 754119                // 'i64' Identifier '=='
     && lk != 757379                // Identifier '++' '=='
     && lk != 757380                // Null '++' '=='
     && lk != 757381                // True '++' '=='
     && lk != 757382                // False '++' '=='
     && lk != 757383                // Character '++' '=='
     && lk != 757384                // String '++' '=='
     && lk != 757385                // Integer '++' '=='
     && lk != 757386                // Complex '++' '=='
     && lk != 757387                // Real '++' '=='
     && lk != 757891                // Identifier '--' '=='
     && lk != 757892                // Null '--' '=='
     && lk != 757893                // True '--' '=='
     && lk != 757894                // False '--' '=='
     && lk != 757895                // Character '--' '=='
     && lk != 757896                // String '--' '=='
     && lk != 757897                // Integer '--' '=='
     && lk != 757898                // Complex '--' '=='
     && lk != 757899                // Real '--' '=='
     && lk != 760629                // '[' ']' '=='
     && lk != 764883                // '{' '}' '=='
     && lk != 770497                // 'f32' Identifier '>'
     && lk != 770498                // 'f64' Identifier '>'
     && lk != 770502                // 'i32' Identifier '>'
     && lk != 770503                // 'i64' Identifier '>'
     && lk != 773763                // Identifier '++' '>'
     && lk != 773764                // Null '++' '>'
     && lk != 773765                // True '++' '>'
     && lk != 773766                // False '++' '>'
     && lk != 773767                // Character '++' '>'
     && lk != 773768                // String '++' '>'
     && lk != 773769                // Integer '++' '>'
     && lk != 773770                // Complex '++' '>'
     && lk != 773771                // Real '++' '>'
     && lk != 774275                // Identifier '--' '>'
     && lk != 774276                // Null '--' '>'
     && lk != 774277                // True '--' '>'
     && lk != 774278                // False '--' '>'
     && lk != 774279                // Character '--' '>'
     && lk != 774280                // String '--' '>'
     && lk != 774281                // Integer '--' '>'
     && lk != 774282                // Complex '--' '>'
     && lk != 774283                // Real '--' '>'
     && lk != 777013                // '[' ']' '>'
     && lk != 781267                // '{' '}' '>'
     && lk != 786881                // 'f32' Identifier '>='
     && lk != 786882                // 'f64' Identifier '>='
     && lk != 786886                // 'i32' Identifier '>='
     && lk != 786887                // 'i64' Identifier '>='
     && lk != 790147                // Identifier '++' '>='
     && lk != 790148                // Null '++' '>='
     && lk != 790149                // True '++' '>='
     && lk != 790150                // False '++' '>='
     && lk != 790151                // Character '++' '>='
     && lk != 790152                // String '++' '>='
     && lk != 790153                // Integer '++' '>='
     && lk != 790154                // Complex '++' '>='
     && lk != 790155                // Real '++' '>='
     && lk != 790659                // Identifier '--' '>='
     && lk != 790660                // Null '--' '>='
     && lk != 790661                // True '--' '>='
     && lk != 790662                // False '--' '>='
     && lk != 790663                // Character '--' '>='
     && lk != 790664                // String '--' '>='
     && lk != 790665                // Integer '--' '>='
     && lk != 790666                // Complex '--' '>='
     && lk != 790667                // Real '--' '>='
     && lk != 793397                // '[' ']' '>='
     && lk != 797651                // '{' '}' '>='
     && lk != 803265                // 'f32' Identifier '>>'
     && lk != 803266                // 'f64' Identifier '>>'
     && lk != 803270                // 'i32' Identifier '>>'
     && lk != 803271                // 'i64' Identifier '>>'
     && lk != 806531                // Identifier '++' '>>'
     && lk != 806532                // Null '++' '>>'
     && lk != 806533                // True '++' '>>'
     && lk != 806534                // False '++' '>>'
     && lk != 806535                // Character '++' '>>'
     && lk != 806536                // String '++' '>>'
     && lk != 806537                // Integer '++' '>>'
     && lk != 806538                // Complex '++' '>>'
     && lk != 806539                // Real '++' '>>'
     && lk != 807043                // Identifier '--' '>>'
     && lk != 807044                // Null '--' '>>'
     && lk != 807045                // True '--' '>>'
     && lk != 807046                // False '--' '>>'
     && lk != 807047                // Character '--' '>>'
     && lk != 807048                // String '--' '>>'
     && lk != 807049                // Integer '--' '>>'
     && lk != 807050                // Complex '--' '>>'
     && lk != 807051                // Real '--' '>>'
     && lk != 809781                // '[' ']' '>>'
     && lk != 814035                // '{' '}' '>>'
     && lk != 819649                // 'f32' Identifier '>>='
     && lk != 819650                // 'f64' Identifier '>>='
     && lk != 819654                // 'i32' Identifier '>>='
     && lk != 819655                // 'i64' Identifier '>>='
     && lk != 822915                // Identifier '++' '>>='
     && lk != 822916                // Null '++' '>>='
     && lk != 822917                // True '++' '>>='
     && lk != 822918                // False '++' '>>='
     && lk != 822919                // Character '++' '>>='
     && lk != 822920                // String '++' '>>='
     && lk != 822921                // Integer '++' '>>='
     && lk != 822922                // Complex '++' '>>='
     && lk != 822923                // Real '++' '>>='
     && lk != 823427                // Identifier '--' '>>='
     && lk != 823428                // Null '--' '>>='
     && lk != 823429                // True '--' '>>='
     && lk != 823430                // False '--' '>>='
     && lk != 823431                // Character '--' '>>='
     && lk != 823432                // String '--' '>>='
     && lk != 823433                // Integer '--' '>>='
     && lk != 823434                // Complex '--' '>>='
     && lk != 823435                // Real '--' '>>='
     && lk != 826165                // '[' ']' '>>='
     && lk != 830419                // '{' '}' '>>='
     && lk != 836033                // 'f32' Identifier '?'
     && lk != 836034                // 'f64' Identifier '?'
     && lk != 836038                // 'i32' Identifier '?'
     && lk != 836039                // 'i64' Identifier '?'
     && lk != 839299                // Identifier '++' '?'
     && lk != 839300                // Null '++' '?'
     && lk != 839301                // True '++' '?'
     && lk != 839302                // False '++' '?'
     && lk != 839303                // Character '++' '?'
     && lk != 839304                // String '++' '?'
     && lk != 839305                // Integer '++' '?'
     && lk != 839306                // Complex '++' '?'
     && lk != 839307                // Real '++' '?'
     && lk != 839811                // Identifier '--' '?'
     && lk != 839812                // Null '--' '?'
     && lk != 839813                // True '--' '?'
     && lk != 839814                // False '--' '?'
     && lk != 839815                // Character '--' '?'
     && lk != 839816                // String '--' '?'
     && lk != 839817                // Integer '--' '?'
     && lk != 839818                // Complex '--' '?'
     && lk != 839819                // Real '--' '?'
     && lk != 842549                // '[' ']' '?'
     && lk != 846803                // '{' '}' '?'
     && lk != 852417                // 'f32' Identifier '?='
     && lk != 852418                // 'f64' Identifier '?='
     && lk != 852422                // 'i32' Identifier '?='
     && lk != 852423                // 'i64' Identifier '?='
     && lk != 855683                // Identifier '++' '?='
     && lk != 855684                // Null '++' '?='
     && lk != 855685                // True '++' '?='
     && lk != 855686                // False '++' '?='
     && lk != 855687                // Character '++' '?='
     && lk != 855688                // String '++' '?='
     && lk != 855689                // Integer '++' '?='
     && lk != 855690                // Complex '++' '?='
     && lk != 855691                // Real '++' '?='
     && lk != 856195                // Identifier '--' '?='
     && lk != 856196                // Null '--' '?='
     && lk != 856197                // True '--' '?='
     && lk != 856198                // False '--' '?='
     && lk != 856199                // Character '--' '?='
     && lk != 856200                // String '--' '?='
     && lk != 856201                // Integer '--' '?='
     && lk != 856202                // Complex '--' '?='
     && lk != 856203                // Real '--' '?='
     && lk != 858933                // '[' ']' '?='
     && lk != 863187                // '{' '}' '?='
     && lk != 875317                // '[' ']' '['
     && lk != 879571                // '{' '}' '['
     && lk != 885185                // 'f32' Identifier ']'
     && lk != 885186                // 'f64' Identifier ']'
     && lk != 885190                // 'i32' Identifier ']'
     && lk != 885191                // 'i64' Identifier ']'
     && lk != 888451                // Identifier '++' ']'
     && lk != 888452                // Null '++' ']'
     && lk != 888453                // True '++' ']'
     && lk != 888454                // False '++' ']'
     && lk != 888455                // Character '++' ']'
     && lk != 888456                // String '++' ']'
     && lk != 888457                // Integer '++' ']'
     && lk != 888458                // Complex '++' ']'
     && lk != 888459                // Real '++' ']'
     && lk != 888963                // Identifier '--' ']'
     && lk != 888964                // Null '--' ']'
     && lk != 888965                // True '--' ']'
     && lk != 888966                // False '--' ']'
     && lk != 888967                // Character '--' ']'
     && lk != 888968                // String '--' ']'
     && lk != 888969                // Integer '--' ']'
     && lk != 888970                // Complex '--' ']'
     && lk != 888971                // Real '--' ']'
     && lk != 891701                // '[' ']' ']'
     && lk != 895955                // '{' '}' ']'
     && lk != 901569                // 'f32' Identifier '^'
     && lk != 901570                // 'f64' Identifier '^'
     && lk != 901574                // 'i32' Identifier '^'
     && lk != 901575                // 'i64' Identifier '^'
     && lk != 904835                // Identifier '++' '^'
     && lk != 904836                // Null '++' '^'
     && lk != 904837                // True '++' '^'
     && lk != 904838                // False '++' '^'
     && lk != 904839                // Character '++' '^'
     && lk != 904840                // String '++' '^'
     && lk != 904841                // Integer '++' '^'
     && lk != 904842                // Complex '++' '^'
     && lk != 904843                // Real '++' '^'
     && lk != 905347                // Identifier '--' '^'
     && lk != 905348                // Null '--' '^'
     && lk != 905349                // True '--' '^'
     && lk != 905350                // False '--' '^'
     && lk != 905351                // Character '--' '^'
     && lk != 905352                // String '--' '^'
     && lk != 905353                // Integer '--' '^'
     && lk != 905354                // Complex '--' '^'
     && lk != 905355                // Real '--' '^'
     && lk != 908085                // '[' ']' '^'
     && lk != 912339                // '{' '}' '^'
     && lk != 917953                // 'f32' Identifier '^='
     && lk != 917954                // 'f64' Identifier '^='
     && lk != 917958                // 'i32' Identifier '^='
     && lk != 917959                // 'i64' Identifier '^='
     && lk != 921219                // Identifier '++' '^='
     && lk != 921220                // Null '++' '^='
     && lk != 921221                // True '++' '^='
     && lk != 921222                // False '++' '^='
     && lk != 921223                // Character '++' '^='
     && lk != 921224                // String '++' '^='
     && lk != 921225                // Integer '++' '^='
     && lk != 921226                // Complex '++' '^='
     && lk != 921227                // Real '++' '^='
     && lk != 921731                // Identifier '--' '^='
     && lk != 921732                // Null '--' '^='
     && lk != 921733                // True '--' '^='
     && lk != 921734                // False '--' '^='
     && lk != 921735                // Character '--' '^='
     && lk != 921736                // String '--' '^='
     && lk != 921737                // Integer '--' '^='
     && lk != 921738                // Complex '--' '^='
     && lk != 921739                // Real '--' '^='
     && lk != 924469                // '[' ']' '^='
     && lk != 928723                // '{' '}' '^='
     && lk != 934337                // 'f32' Identifier 'break'
     && lk != 934338                // 'f64' Identifier 'break'
     && lk != 934342                // 'i32' Identifier 'break'
     && lk != 934343                // 'i64' Identifier 'break'
     && lk != 937603                // Identifier '++' 'break'
     && lk != 937604                // Null '++' 'break'
     && lk != 937605                // True '++' 'break'
     && lk != 937606                // False '++' 'break'
     && lk != 937607                // Character '++' 'break'
     && lk != 937608                // String '++' 'break'
     && lk != 937609                // Integer '++' 'break'
     && lk != 937610                // Complex '++' 'break'
     && lk != 937611                // Real '++' 'break'
     && lk != 938115                // Identifier '--' 'break'
     && lk != 938116                // Null '--' 'break'
     && lk != 938117                // True '--' 'break'
     && lk != 938118                // False '--' 'break'
     && lk != 938119                // Character '--' 'break'
     && lk != 938120                // String '--' 'break'
     && lk != 938121                // Integer '--' 'break'
     && lk != 938122                // Complex '--' 'break'
     && lk != 938123                // Real '--' 'break'
     && lk != 940853                // '[' ']' 'break'
     && lk != 945107                // '{' '}' 'break'
     && lk != 950721                // 'f32' Identifier 'case'
     && lk != 950722                // 'f64' Identifier 'case'
     && lk != 950726                // 'i32' Identifier 'case'
     && lk != 950727                // 'i64' Identifier 'case'
     && lk != 953987                // Identifier '++' 'case'
     && lk != 953988                // Null '++' 'case'
     && lk != 953989                // True '++' 'case'
     && lk != 953990                // False '++' 'case'
     && lk != 953991                // Character '++' 'case'
     && lk != 953992                // String '++' 'case'
     && lk != 953993                // Integer '++' 'case'
     && lk != 953994                // Complex '++' 'case'
     && lk != 953995                // Real '++' 'case'
     && lk != 954499                // Identifier '--' 'case'
     && lk != 954500                // Null '--' 'case'
     && lk != 954501                // True '--' 'case'
     && lk != 954502                // False '--' 'case'
     && lk != 954503                // Character '--' 'case'
     && lk != 954504                // String '--' 'case'
     && lk != 954505                // Integer '--' 'case'
     && lk != 954506                // Complex '--' 'case'
     && lk != 954507                // Real '--' 'case'
     && lk != 957237                // '[' ']' 'case'
     && lk != 961491                // '{' '}' 'case'
     && lk != 967105                // 'f32' Identifier 'catch'
     && lk != 967106                // 'f64' Identifier 'catch'
     && lk != 967110                // 'i32' Identifier 'catch'
     && lk != 967111                // 'i64' Identifier 'catch'
     && lk != 970371                // Identifier '++' 'catch'
     && lk != 970372                // Null '++' 'catch'
     && lk != 970373                // True '++' 'catch'
     && lk != 970374                // False '++' 'catch'
     && lk != 970375                // Character '++' 'catch'
     && lk != 970376                // String '++' 'catch'
     && lk != 970377                // Integer '++' 'catch'
     && lk != 970378                // Complex '++' 'catch'
     && lk != 970379                // Real '++' 'catch'
     && lk != 970883                // Identifier '--' 'catch'
     && lk != 970884                // Null '--' 'catch'
     && lk != 970885                // True '--' 'catch'
     && lk != 970886                // False '--' 'catch'
     && lk != 970887                // Character '--' 'catch'
     && lk != 970888                // String '--' 'catch'
     && lk != 970889                // Integer '--' 'catch'
     && lk != 970890                // Complex '--' 'catch'
     && lk != 970891                // Real '--' 'catch'
     && lk != 973621                // '[' ']' 'catch'
     && lk != 977875                // '{' '}' 'catch'
     && lk != 983489                // 'f32' Identifier 'continue'
     && lk != 983490                // 'f64' Identifier 'continue'
     && lk != 983494                // 'i32' Identifier 'continue'
     && lk != 983495                // 'i64' Identifier 'continue'
     && lk != 986755                // Identifier '++' 'continue'
     && lk != 986756                // Null '++' 'continue'
     && lk != 986757                // True '++' 'continue'
     && lk != 986758                // False '++' 'continue'
     && lk != 986759                // Character '++' 'continue'
     && lk != 986760                // String '++' 'continue'
     && lk != 986761                // Integer '++' 'continue'
     && lk != 986762                // Complex '++' 'continue'
     && lk != 986763                // Real '++' 'continue'
     && lk != 987267                // Identifier '--' 'continue'
     && lk != 987268                // Null '--' 'continue'
     && lk != 987269                // True '--' 'continue'
     && lk != 987270                // False '--' 'continue'
     && lk != 987271                // Character '--' 'continue'
     && lk != 987272                // String '--' 'continue'
     && lk != 987273                // Integer '--' 'continue'
     && lk != 987274                // Complex '--' 'continue'
     && lk != 987275                // Real '--' 'continue'
     && lk != 990005                // '[' ']' 'continue'
     && lk != 994259                // '{' '}' 'continue'
     && lk != 999873                // 'f32' Identifier 'default'
     && lk != 999874                // 'f64' Identifier 'default'
     && lk != 999878                // 'i32' Identifier 'default'
     && lk != 999879                // 'i64' Identifier 'default'
     && lk != 1003139               // Identifier '++' 'default'
     && lk != 1003140               // Null '++' 'default'
     && lk != 1003141               // True '++' 'default'
     && lk != 1003142               // False '++' 'default'
     && lk != 1003143               // Character '++' 'default'
     && lk != 1003144               // String '++' 'default'
     && lk != 1003145               // Integer '++' 'default'
     && lk != 1003146               // Complex '++' 'default'
     && lk != 1003147               // Real '++' 'default'
     && lk != 1003651               // Identifier '--' 'default'
     && lk != 1003652               // Null '--' 'default'
     && lk != 1003653               // True '--' 'default'
     && lk != 1003654               // False '--' 'default'
     && lk != 1003655               // Character '--' 'default'
     && lk != 1003656               // String '--' 'default'
     && lk != 1003657               // Integer '--' 'default'
     && lk != 1003658               // Complex '--' 'default'
     && lk != 1003659               // Real '--' 'default'
     && lk != 1006389               // '[' ']' 'default'
     && lk != 1010643               // '{' '}' 'default'
     && lk != 1016257               // 'f32' Identifier 'do'
     && lk != 1016258               // 'f64' Identifier 'do'
     && lk != 1016262               // 'i32' Identifier 'do'
     && lk != 1016263               // 'i64' Identifier 'do'
     && lk != 1019523               // Identifier '++' 'do'
     && lk != 1019524               // Null '++' 'do'
     && lk != 1019525               // True '++' 'do'
     && lk != 1019526               // False '++' 'do'
     && lk != 1019527               // Character '++' 'do'
     && lk != 1019528               // String '++' 'do'
     && lk != 1019529               // Integer '++' 'do'
     && lk != 1019530               // Complex '++' 'do'
     && lk != 1019531               // Real '++' 'do'
     && lk != 1020035               // Identifier '--' 'do'
     && lk != 1020036               // Null '--' 'do'
     && lk != 1020037               // True '--' 'do'
     && lk != 1020038               // False '--' 'do'
     && lk != 1020039               // Character '--' 'do'
     && lk != 1020040               // String '--' 'do'
     && lk != 1020041               // Integer '--' 'do'
     && lk != 1020042               // Complex '--' 'do'
     && lk != 1020043               // Real '--' 'do'
     && lk != 1022773               // '[' ']' 'do'
     && lk != 1027027               // '{' '}' 'do'
     && lk != 1032641               // 'f32' Identifier 'else'
     && lk != 1032642               // 'f64' Identifier 'else'
     && lk != 1032646               // 'i32' Identifier 'else'
     && lk != 1032647               // 'i64' Identifier 'else'
     && lk != 1035907               // Identifier '++' 'else'
     && lk != 1035908               // Null '++' 'else'
     && lk != 1035909               // True '++' 'else'
     && lk != 1035910               // False '++' 'else'
     && lk != 1035911               // Character '++' 'else'
     && lk != 1035912               // String '++' 'else'
     && lk != 1035913               // Integer '++' 'else'
     && lk != 1035914               // Complex '++' 'else'
     && lk != 1035915               // Real '++' 'else'
     && lk != 1036419               // Identifier '--' 'else'
     && lk != 1036420               // Null '--' 'else'
     && lk != 1036421               // True '--' 'else'
     && lk != 1036422               // False '--' 'else'
     && lk != 1036423               // Character '--' 'else'
     && lk != 1036424               // String '--' 'else'
     && lk != 1036425               // Integer '--' 'else'
     && lk != 1036426               // Complex '--' 'else'
     && lk != 1036427               // Real '--' 'else'
     && lk != 1039157               // '[' ']' 'else'
     && lk != 1043411               // '{' '}' 'else'
     && lk != 1049025               // 'f32' Identifier 'export'
     && lk != 1049026               // 'f64' Identifier 'export'
     && lk != 1049030               // 'i32' Identifier 'export'
     && lk != 1049031               // 'i64' Identifier 'export'
     && lk != 1052291               // Identifier '++' 'export'
     && lk != 1052292               // Null '++' 'export'
     && lk != 1052293               // True '++' 'export'
     && lk != 1052294               // False '++' 'export'
     && lk != 1052295               // Character '++' 'export'
     && lk != 1052296               // String '++' 'export'
     && lk != 1052297               // Integer '++' 'export'
     && lk != 1052298               // Complex '++' 'export'
     && lk != 1052299               // Real '++' 'export'
     && lk != 1052803               // Identifier '--' 'export'
     && lk != 1052804               // Null '--' 'export'
     && lk != 1052805               // True '--' 'export'
     && lk != 1052806               // False '--' 'export'
     && lk != 1052807               // Character '--' 'export'
     && lk != 1052808               // String '--' 'export'
     && lk != 1052809               // Integer '--' 'export'
     && lk != 1052810               // Complex '--' 'export'
     && lk != 1052811               // Real '--' 'export'
     && lk != 1055541               // '[' ']' 'export'
     && lk != 1059795               // '{' '}' 'export'
     && lk != 1065409               // 'f32' Identifier 'f32'
     && lk != 1065410               // 'f64' Identifier 'f32'
     && lk != 1065414               // 'i32' Identifier 'f32'
     && lk != 1065415               // 'i64' Identifier 'f32'
     && lk != 1071925               // '[' ']' 'f32'
     && lk != 1076179               // '{' '}' 'f32'
     && lk != 1081793               // 'f32' Identifier 'f64'
     && lk != 1081794               // 'f64' Identifier 'f64'
     && lk != 1081798               // 'i32' Identifier 'f64'
     && lk != 1081799               // 'i64' Identifier 'f64'
     && lk != 1088309               // '[' ']' 'f64'
     && lk != 1092563               // '{' '}' 'f64'
     && lk != 1098177               // 'f32' Identifier 'for'
     && lk != 1098178               // 'f64' Identifier 'for'
     && lk != 1098182               // 'i32' Identifier 'for'
     && lk != 1098183               // 'i64' Identifier 'for'
     && lk != 1101443               // Identifier '++' 'for'
     && lk != 1101444               // Null '++' 'for'
     && lk != 1101445               // True '++' 'for'
     && lk != 1101446               // False '++' 'for'
     && lk != 1101447               // Character '++' 'for'
     && lk != 1101448               // String '++' 'for'
     && lk != 1101449               // Integer '++' 'for'
     && lk != 1101450               // Complex '++' 'for'
     && lk != 1101451               // Real '++' 'for'
     && lk != 1101955               // Identifier '--' 'for'
     && lk != 1101956               // Null '--' 'for'
     && lk != 1101957               // True '--' 'for'
     && lk != 1101958               // False '--' 'for'
     && lk != 1101959               // Character '--' 'for'
     && lk != 1101960               // String '--' 'for'
     && lk != 1101961               // Integer '--' 'for'
     && lk != 1101962               // Complex '--' 'for'
     && lk != 1101963               // Real '--' 'for'
     && lk != 1104693               // '[' ']' 'for'
     && lk != 1108947               // '{' '}' 'for'
     && lk != 1114561               // 'f32' Identifier 'foreach'
     && lk != 1114562               // 'f64' Identifier 'foreach'
     && lk != 1114566               // 'i32' Identifier 'foreach'
     && lk != 1114567               // 'i64' Identifier 'foreach'
     && lk != 1117827               // Identifier '++' 'foreach'
     && lk != 1117828               // Null '++' 'foreach'
     && lk != 1117829               // True '++' 'foreach'
     && lk != 1117830               // False '++' 'foreach'
     && lk != 1117831               // Character '++' 'foreach'
     && lk != 1117832               // String '++' 'foreach'
     && lk != 1117833               // Integer '++' 'foreach'
     && lk != 1117834               // Complex '++' 'foreach'
     && lk != 1117835               // Real '++' 'foreach'
     && lk != 1118339               // Identifier '--' 'foreach'
     && lk != 1118340               // Null '--' 'foreach'
     && lk != 1118341               // True '--' 'foreach'
     && lk != 1118342               // False '--' 'foreach'
     && lk != 1118343               // Character '--' 'foreach'
     && lk != 1118344               // String '--' 'foreach'
     && lk != 1118345               // Integer '--' 'foreach'
     && lk != 1118346               // Complex '--' 'foreach'
     && lk != 1118347               // Real '--' 'foreach'
     && lk != 1121077               // '[' ']' 'foreach'
     && lk != 1125331               // '{' '}' 'foreach'
     && lk != 1130945               // 'f32' Identifier 'global'
     && lk != 1130946               // 'f64' Identifier 'global'
     && lk != 1130950               // 'i32' Identifier 'global'
     && lk != 1130951               // 'i64' Identifier 'global'
     && lk != 1134211               // Identifier '++' 'global'
     && lk != 1134212               // Null '++' 'global'
     && lk != 1134213               // True '++' 'global'
     && lk != 1134214               // False '++' 'global'
     && lk != 1134215               // Character '++' 'global'
     && lk != 1134216               // String '++' 'global'
     && lk != 1134217               // Integer '++' 'global'
     && lk != 1134218               // Complex '++' 'global'
     && lk != 1134219               // Real '++' 'global'
     && lk != 1134723               // Identifier '--' 'global'
     && lk != 1134724               // Null '--' 'global'
     && lk != 1134725               // True '--' 'global'
     && lk != 1134726               // False '--' 'global'
     && lk != 1134727               // Character '--' 'global'
     && lk != 1134728               // String '--' 'global'
     && lk != 1134729               // Integer '--' 'global'
     && lk != 1134730               // Complex '--' 'global'
     && lk != 1134731               // Real '--' 'global'
     && lk != 1137461               // '[' ']' 'global'
     && lk != 1141715               // '{' '}' 'global'
     && lk != 1147329               // 'f32' Identifier 'i32'
     && lk != 1147330               // 'f64' Identifier 'i32'
     && lk != 1147334               // 'i32' Identifier 'i32'
     && lk != 1147335               // 'i64' Identifier 'i32'
     && lk != 1153845               // '[' ']' 'i32'
     && lk != 1158099               // '{' '}' 'i32'
     && lk != 1163713               // 'f32' Identifier 'i64'
     && lk != 1163714               // 'f64' Identifier 'i64'
     && lk != 1163718               // 'i32' Identifier 'i64'
     && lk != 1163719               // 'i64' Identifier 'i64'
     && lk != 1170229               // '[' ']' 'i64'
     && lk != 1174483               // '{' '}' 'i64'
     && lk != 1180097               // 'f32' Identifier 'if'
     && lk != 1180098               // 'f64' Identifier 'if'
     && lk != 1180102               // 'i32' Identifier 'if'
     && lk != 1180103               // 'i64' Identifier 'if'
     && lk != 1183363               // Identifier '++' 'if'
     && lk != 1183364               // Null '++' 'if'
     && lk != 1183365               // True '++' 'if'
     && lk != 1183366               // False '++' 'if'
     && lk != 1183367               // Character '++' 'if'
     && lk != 1183368               // String '++' 'if'
     && lk != 1183369               // Integer '++' 'if'
     && lk != 1183370               // Complex '++' 'if'
     && lk != 1183371               // Real '++' 'if'
     && lk != 1183875               // Identifier '--' 'if'
     && lk != 1183876               // Null '--' 'if'
     && lk != 1183877               // True '--' 'if'
     && lk != 1183878               // False '--' 'if'
     && lk != 1183879               // Character '--' 'if'
     && lk != 1183880               // String '--' 'if'
     && lk != 1183881               // Integer '--' 'if'
     && lk != 1183882               // Complex '--' 'if'
     && lk != 1183883               // Real '--' 'if'
     && lk != 1186613               // '[' ']' 'if'
     && lk != 1190867               // '{' '}' 'if'
     && lk != 1196481               // 'f32' Identifier 'import'
     && lk != 1196482               // 'f64' Identifier 'import'
     && lk != 1196486               // 'i32' Identifier 'import'
     && lk != 1196487               // 'i64' Identifier 'import'
     && lk != 1199747               // Identifier '++' 'import'
     && lk != 1199748               // Null '++' 'import'
     && lk != 1199749               // True '++' 'import'
     && lk != 1199750               // False '++' 'import'
     && lk != 1199751               // Character '++' 'import'
     && lk != 1199752               // String '++' 'import'
     && lk != 1199753               // Integer '++' 'import'
     && lk != 1199754               // Complex '++' 'import'
     && lk != 1199755               // Real '++' 'import'
     && lk != 1200259               // Identifier '--' 'import'
     && lk != 1200260               // Null '--' 'import'
     && lk != 1200261               // True '--' 'import'
     && lk != 1200262               // False '--' 'import'
     && lk != 1200263               // Character '--' 'import'
     && lk != 1200264               // String '--' 'import'
     && lk != 1200265               // Integer '--' 'import'
     && lk != 1200266               // Complex '--' 'import'
     && lk != 1200267               // Real '--' 'import'
     && lk != 1202997               // '[' ']' 'import'
     && lk != 1207251               // '{' '}' 'import'
     && lk != 1212865               // 'f32' Identifier 'include'
     && lk != 1212866               // 'f64' Identifier 'include'
     && lk != 1212870               // 'i32' Identifier 'include'
     && lk != 1212871               // 'i64' Identifier 'include'
     && lk != 1216131               // Identifier '++' 'include'
     && lk != 1216132               // Null '++' 'include'
     && lk != 1216133               // True '++' 'include'
     && lk != 1216134               // False '++' 'include'
     && lk != 1216135               // Character '++' 'include'
     && lk != 1216136               // String '++' 'include'
     && lk != 1216137               // Integer '++' 'include'
     && lk != 1216138               // Complex '++' 'include'
     && lk != 1216139               // Real '++' 'include'
     && lk != 1216643               // Identifier '--' 'include'
     && lk != 1216644               // Null '--' 'include'
     && lk != 1216645               // True '--' 'include'
     && lk != 1216646               // False '--' 'include'
     && lk != 1216647               // Character '--' 'include'
     && lk != 1216648               // String '--' 'include'
     && lk != 1216649               // Integer '--' 'include'
     && lk != 1216650               // Complex '--' 'include'
     && lk != 1216651               // Real '--' 'include'
     && lk != 1219381               // '[' ']' 'include'
     && lk != 1223635               // '{' '}' 'include'
     && lk != 1229249               // 'f32' Identifier 'local'
     && lk != 1229250               // 'f64' Identifier 'local'
     && lk != 1229254               // 'i32' Identifier 'local'
     && lk != 1229255               // 'i64' Identifier 'local'
     && lk != 1232515               // Identifier '++' 'local'
     && lk != 1232516               // Null '++' 'local'
     && lk != 1232517               // True '++' 'local'
     && lk != 1232518               // False '++' 'local'
     && lk != 1232519               // Character '++' 'local'
     && lk != 1232520               // String '++' 'local'
     && lk != 1232521               // Integer '++' 'local'
     && lk != 1232522               // Complex '++' 'local'
     && lk != 1232523               // Real '++' 'local'
     && lk != 1233027               // Identifier '--' 'local'
     && lk != 1233028               // Null '--' 'local'
     && lk != 1233029               // True '--' 'local'
     && lk != 1233030               // False '--' 'local'
     && lk != 1233031               // Character '--' 'local'
     && lk != 1233032               // String '--' 'local'
     && lk != 1233033               // Integer '--' 'local'
     && lk != 1233034               // Complex '--' 'local'
     && lk != 1233035               // Real '--' 'local'
     && lk != 1235765               // '[' ']' 'local'
     && lk != 1240019               // '{' '}' 'local'
     && lk != 1245633               // 'f32' Identifier 'return'
     && lk != 1245634               // 'f64' Identifier 'return'
     && lk != 1245638               // 'i32' Identifier 'return'
     && lk != 1245639               // 'i64' Identifier 'return'
     && lk != 1248899               // Identifier '++' 'return'
     && lk != 1248900               // Null '++' 'return'
     && lk != 1248901               // True '++' 'return'
     && lk != 1248902               // False '++' 'return'
     && lk != 1248903               // Character '++' 'return'
     && lk != 1248904               // String '++' 'return'
     && lk != 1248905               // Integer '++' 'return'
     && lk != 1248906               // Complex '++' 'return'
     && lk != 1248907               // Real '++' 'return'
     && lk != 1249411               // Identifier '--' 'return'
     && lk != 1249412               // Null '--' 'return'
     && lk != 1249413               // True '--' 'return'
     && lk != 1249414               // False '--' 'return'
     && lk != 1249415               // Character '--' 'return'
     && lk != 1249416               // String '--' 'return'
     && lk != 1249417               // Integer '--' 'return'
     && lk != 1249418               // Complex '--' 'return'
     && lk != 1249419               // Real '--' 'return'
     && lk != 1252149               // '[' ']' 'return'
     && lk != 1256403               // '{' '}' 'return'
     && lk != 1262017               // 'f32' Identifier 'switch'
     && lk != 1262018               // 'f64' Identifier 'switch'
     && lk != 1262022               // 'i32' Identifier 'switch'
     && lk != 1262023               // 'i64' Identifier 'switch'
     && lk != 1265283               // Identifier '++' 'switch'
     && lk != 1265284               // Null '++' 'switch'
     && lk != 1265285               // True '++' 'switch'
     && lk != 1265286               // False '++' 'switch'
     && lk != 1265287               // Character '++' 'switch'
     && lk != 1265288               // String '++' 'switch'
     && lk != 1265289               // Integer '++' 'switch'
     && lk != 1265290               // Complex '++' 'switch'
     && lk != 1265291               // Real '++' 'switch'
     && lk != 1265795               // Identifier '--' 'switch'
     && lk != 1265796               // Null '--' 'switch'
     && lk != 1265797               // True '--' 'switch'
     && lk != 1265798               // False '--' 'switch'
     && lk != 1265799               // Character '--' 'switch'
     && lk != 1265800               // String '--' 'switch'
     && lk != 1265801               // Integer '--' 'switch'
     && lk != 1265802               // Complex '--' 'switch'
     && lk != 1265803               // Real '--' 'switch'
     && lk != 1268533               // '[' ']' 'switch'
     && lk != 1272787               // '{' '}' 'switch'
     && lk != 1278401               // 'f32' Identifier 'test'
     && lk != 1278402               // 'f64' Identifier 'test'
     && lk != 1278406               // 'i32' Identifier 'test'
     && lk != 1278407               // 'i64' Identifier 'test'
     && lk != 1281667               // Identifier '++' 'test'
     && lk != 1281668               // Null '++' 'test'
     && lk != 1281669               // True '++' 'test'
     && lk != 1281670               // False '++' 'test'
     && lk != 1281671               // Character '++' 'test'
     && lk != 1281672               // String '++' 'test'
     && lk != 1281673               // Integer '++' 'test'
     && lk != 1281674               // Complex '++' 'test'
     && lk != 1281675               // Real '++' 'test'
     && lk != 1282179               // Identifier '--' 'test'
     && lk != 1282180               // Null '--' 'test'
     && lk != 1282181               // True '--' 'test'
     && lk != 1282182               // False '--' 'test'
     && lk != 1282183               // Character '--' 'test'
     && lk != 1282184               // String '--' 'test'
     && lk != 1282185               // Integer '--' 'test'
     && lk != 1282186               // Complex '--' 'test'
     && lk != 1282187               // Real '--' 'test'
     && lk != 1284917               // '[' ']' 'test'
     && lk != 1289171               // '{' '}' 'test'
     && lk != 1294785               // 'f32' Identifier 'throw'
     && lk != 1294786               // 'f64' Identifier 'throw'
     && lk != 1294790               // 'i32' Identifier 'throw'
     && lk != 1294791               // 'i64' Identifier 'throw'
     && lk != 1298051               // Identifier '++' 'throw'
     && lk != 1298052               // Null '++' 'throw'
     && lk != 1298053               // True '++' 'throw'
     && lk != 1298054               // False '++' 'throw'
     && lk != 1298055               // Character '++' 'throw'
     && lk != 1298056               // String '++' 'throw'
     && lk != 1298057               // Integer '++' 'throw'
     && lk != 1298058               // Complex '++' 'throw'
     && lk != 1298059               // Real '++' 'throw'
     && lk != 1298563               // Identifier '--' 'throw'
     && lk != 1298564               // Null '--' 'throw'
     && lk != 1298565               // True '--' 'throw'
     && lk != 1298566               // False '--' 'throw'
     && lk != 1298567               // Character '--' 'throw'
     && lk != 1298568               // String '--' 'throw'
     && lk != 1298569               // Integer '--' 'throw'
     && lk != 1298570               // Complex '--' 'throw'
     && lk != 1298571               // Real '--' 'throw'
     && lk != 1301301               // '[' ']' 'throw'
     && lk != 1305555               // '{' '}' 'throw'
     && lk != 1311169               // 'f32' Identifier 'try'
     && lk != 1311170               // 'f64' Identifier 'try'
     && lk != 1311174               // 'i32' Identifier 'try'
     && lk != 1311175               // 'i64' Identifier 'try'
     && lk != 1314435               // Identifier '++' 'try'
     && lk != 1314436               // Null '++' 'try'
     && lk != 1314437               // True '++' 'try'
     && lk != 1314438               // False '++' 'try'
     && lk != 1314439               // Character '++' 'try'
     && lk != 1314440               // String '++' 'try'
     && lk != 1314441               // Integer '++' 'try'
     && lk != 1314442               // Complex '++' 'try'
     && lk != 1314443               // Real '++' 'try'
     && lk != 1314947               // Identifier '--' 'try'
     && lk != 1314948               // Null '--' 'try'
     && lk != 1314949               // True '--' 'try'
     && lk != 1314950               // False '--' 'try'
     && lk != 1314951               // Character '--' 'try'
     && lk != 1314952               // String '--' 'try'
     && lk != 1314953               // Integer '--' 'try'
     && lk != 1314954               // Complex '--' 'try'
     && lk != 1314955               // Real '--' 'try'
     && lk != 1317685               // '[' ']' 'try'
     && lk != 1321939               // '{' '}' 'try'
     && lk != 1327553               // 'f32' Identifier 'typeof'
     && lk != 1327554               // 'f64' Identifier 'typeof'
     && lk != 1327558               // 'i32' Identifier 'typeof'
     && lk != 1327559               // 'i64' Identifier 'typeof'
     && lk != 1330819               // Identifier '++' 'typeof'
     && lk != 1330820               // Null '++' 'typeof'
     && lk != 1330821               // True '++' 'typeof'
     && lk != 1330822               // False '++' 'typeof'
     && lk != 1330823               // Character '++' 'typeof'
     && lk != 1330824               // String '++' 'typeof'
     && lk != 1330825               // Integer '++' 'typeof'
     && lk != 1330826               // Complex '++' 'typeof'
     && lk != 1330827               // Real '++' 'typeof'
     && lk != 1331331               // Identifier '--' 'typeof'
     && lk != 1331332               // Null '--' 'typeof'
     && lk != 1331333               // True '--' 'typeof'
     && lk != 1331334               // False '--' 'typeof'
     && lk != 1331335               // Character '--' 'typeof'
     && lk != 1331336               // String '--' 'typeof'
     && lk != 1331337               // Integer '--' 'typeof'
     && lk != 1331338               // Complex '--' 'typeof'
     && lk != 1331339               // Real '--' 'typeof'
     && lk != 1334069               // '[' ']' 'typeof'
     && lk != 1338323               // '{' '}' 'typeof'
     && lk != 1343937               // 'f32' Identifier 'while'
     && lk != 1343938               // 'f64' Identifier 'while'
     && lk != 1343942               // 'i32' Identifier 'while'
     && lk != 1343943               // 'i64' Identifier 'while'
     && lk != 1347203               // Identifier '++' 'while'
     && lk != 1347204               // Null '++' 'while'
     && lk != 1347205               // True '++' 'while'
     && lk != 1347206               // False '++' 'while'
     && lk != 1347207               // Character '++' 'while'
     && lk != 1347208               // String '++' 'while'
     && lk != 1347209               // Integer '++' 'while'
     && lk != 1347210               // Complex '++' 'while'
     && lk != 1347211               // Real '++' 'while'
     && lk != 1347715               // Identifier '--' 'while'
     && lk != 1347716               // Null '--' 'while'
     && lk != 1347717               // True '--' 'while'
     && lk != 1347718               // False '--' 'while'
     && lk != 1347719               // Character '--' 'while'
     && lk != 1347720               // String '--' 'while'
     && lk != 1347721               // Integer '--' 'while'
     && lk != 1347722               // Complex '--' 'while'
     && lk != 1347723               // Real '--' 'while'
     && lk != 1350453               // '[' ']' 'while'
     && lk != 1354707               // '{' '}' 'while'
     && lk != 1360321               // 'f32' Identifier '{'
     && lk != 1360322               // 'f64' Identifier '{'
     && lk != 1360326               // 'i32' Identifier '{'
     && lk != 1360327               // 'i64' Identifier '{'
     && lk != 1366837               // '[' ']' '{'
     && lk != 1371091               // '{' '}' '{'
     && lk != 1376705               // 'f32' Identifier '|'
     && lk != 1376706               // 'f64' Identifier '|'
     && lk != 1376710               // 'i32' Identifier '|'
     && lk != 1376711               // 'i64' Identifier '|'
     && lk != 1379971               // Identifier '++' '|'
     && lk != 1379972               // Null '++' '|'
     && lk != 1379973               // True '++' '|'
     && lk != 1379974               // False '++' '|'
     && lk != 1379975               // Character '++' '|'
     && lk != 1379976               // String '++' '|'
     && lk != 1379977               // Integer '++' '|'
     && lk != 1379978               // Complex '++' '|'
     && lk != 1379979               // Real '++' '|'
     && lk != 1380483               // Identifier '--' '|'
     && lk != 1380484               // Null '--' '|'
     && lk != 1380485               // True '--' '|'
     && lk != 1380486               // False '--' '|'
     && lk != 1380487               // Character '--' '|'
     && lk != 1380488               // String '--' '|'
     && lk != 1380489               // Integer '--' '|'
     && lk != 1380490               // Complex '--' '|'
     && lk != 1380491               // Real '--' '|'
     && lk != 1383221               // '[' ']' '|'
     && lk != 1387475               // '{' '}' '|'
     && lk != 1393089               // 'f32' Identifier '|='
     && lk != 1393090               // 'f64' Identifier '|='
     && lk != 1393094               // 'i32' Identifier '|='
     && lk != 1393095               // 'i64' Identifier '|='
     && lk != 1396355               // Identifier '++' '|='
     && lk != 1396356               // Null '++' '|='
     && lk != 1396357               // True '++' '|='
     && lk != 1396358               // False '++' '|='
     && lk != 1396359               // Character '++' '|='
     && lk != 1396360               // String '++' '|='
     && lk != 1396361               // Integer '++' '|='
     && lk != 1396362               // Complex '++' '|='
     && lk != 1396363               // Real '++' '|='
     && lk != 1396867               // Identifier '--' '|='
     && lk != 1396868               // Null '--' '|='
     && lk != 1396869               // True '--' '|='
     && lk != 1396870               // False '--' '|='
     && lk != 1396871               // Character '--' '|='
     && lk != 1396872               // String '--' '|='
     && lk != 1396873               // Integer '--' '|='
     && lk != 1396874               // Complex '--' '|='
     && lk != 1396875               // Real '--' '|='
     && lk != 1399605               // '[' ']' '|='
     && lk != 1403859               // '{' '}' '|='
     && lk != 1409473               // 'f32' Identifier '||'
     && lk != 1409474               // 'f64' Identifier '||'
     && lk != 1409478               // 'i32' Identifier '||'
     && lk != 1409479               // 'i64' Identifier '||'
     && lk != 1412739               // Identifier '++' '||'
     && lk != 1412740               // Null '++' '||'
     && lk != 1412741               // True '++' '||'
     && lk != 1412742               // False '++' '||'
     && lk != 1412743               // Character '++' '||'
     && lk != 1412744               // String '++' '||'
     && lk != 1412745               // Integer '++' '||'
     && lk != 1412746               // Complex '++' '||'
     && lk != 1412747               // Real '++' '||'
     && lk != 1413251               // Identifier '--' '||'
     && lk != 1413252               // Null '--' '||'
     && lk != 1413253               // True '--' '||'
     && lk != 1413254               // False '--' '||'
     && lk != 1413255               // Character '--' '||'
     && lk != 1413256               // String '--' '||'
     && lk != 1413257               // Integer '--' '||'
     && lk != 1413258               // Complex '--' '||'
     && lk != 1413259               // Real '--' '||'
     && lk != 1415989               // '[' ']' '||'
     && lk != 1420243               // '{' '}' '||'
     && lk != 1425857               // 'f32' Identifier '}'
     && lk != 1425858               // 'f64' Identifier '}'
     && lk != 1425862               // 'i32' Identifier '}'
     && lk != 1425863               // 'i64' Identifier '}'
     && lk != 1429123               // Identifier '++' '}'
     && lk != 1429124               // Null '++' '}'
     && lk != 1429125               // True '++' '}'
     && lk != 1429126               // False '++' '}'
     && lk != 1429127               // Character '++' '}'
     && lk != 1429128               // String '++' '}'
     && lk != 1429129               // Integer '++' '}'
     && lk != 1429130               // Complex '++' '}'
     && lk != 1429131               // Real '++' '}'
     && lk != 1429635               // Identifier '--' '}'
     && lk != 1429636               // Null '--' '}'
     && lk != 1429637               // True '--' '}'
     && lk != 1429638               // False '--' '}'
     && lk != 1429639               // Character '--' '}'
     && lk != 1429640               // String '--' '}'
     && lk != 1429641               // Integer '--' '}'
     && lk != 1429642               // Complex '--' '}'
     && lk != 1429643               // Real '--' '}'
     && lk != 1432373               // '[' ']' '}'
     && lk != 1436627               // '{' '}' '}'
     && lk != 1442241               // 'f32' Identifier '~'
     && lk != 1442242               // 'f64' Identifier '~'
     && lk != 1442246               // 'i32' Identifier '~'
     && lk != 1442247               // 'i64' Identifier '~'
     && lk != 1445507               // Identifier '++' '~'
     && lk != 1445508               // Null '++' '~'
     && lk != 1445509               // True '++' '~'
     && lk != 1445510               // False '++' '~'
     && lk != 1445511               // Character '++' '~'
     && lk != 1445512               // String '++' '~'
     && lk != 1445513               // Integer '++' '~'
     && lk != 1445514               // Complex '++' '~'
     && lk != 1445515               // Real '++' '~'
     && lk != 1446019               // Identifier '--' '~'
     && lk != 1446020               // Null '--' '~'
     && lk != 1446021               // True '--' '~'
     && lk != 1446022               // False '--' '~'
     && lk != 1446023               // Character '--' '~'
     && lk != 1446024               // String '--' '~'
     && lk != 1446025               // Integer '--' '~'
     && lk != 1446026               // Complex '--' '~'
     && lk != 1446027               // Real '--' '~'
     && lk != 1448757               // '[' ']' '~'
     && lk != 1453011)              // '{' '}' '~'
    {
      lk = memoized(3, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2; var l3A = l3;
        var b3A = b3; var e3A = e3;
        try
        {
          try_Primary();
          lookahead1W(5);           // WhiteSpace^token | '++'
          consumeT(29);             // '++'
          lk = -1;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
            b3 = b3A; e3 = e3A; end = e3A; }}}
            try_Primary();
            lookahead1W(6);         // WhiteSpace^token | '--'
            consumeT(33);           // '--'
            lk = -2;
          }
          catch (p2A)
          {
            lk = -9;
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
        b3 = b3A; e3 = e3A; end = e3A; }}}
        memoize(3, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
    case 20099:                     // Identifier '++' END
    case 20100:                     // Null '++' END
    case 20101:                     // True '++' END
    case 20102:                     // False '++' END
    case 20103:                     // Character '++' END
    case 20104:                     // String '++' END
    case 20105:                     // Integer '++' END
    case 20106:                     // Complex '++' END
    case 20107:                     // Real '++' END
    case 200323:                    // Identifier '++' Comment
    case 200324:                    // Null '++' Comment
    case 200325:                    // True '++' Comment
    case 200326:                    // False '++' Comment
    case 200327:                    // Character '++' Comment
    case 200328:                    // String '++' Comment
    case 200329:                    // Integer '++' Comment
    case 200330:                    // Complex '++' Comment
    case 200331:                    // Real '++' Comment
    case 249475:                    // Identifier '++' '!'
    case 249476:                    // Null '++' '!'
    case 249477:                    // True '++' '!'
    case 249478:                    // False '++' '!'
    case 249479:                    // Character '++' '!'
    case 249480:                    // String '++' '!'
    case 249481:                    // Integer '++' '!'
    case 249482:                    // Complex '++' '!'
    case 249483:                    // Real '++' '!'
    case 265859:                    // Identifier '++' '!='
    case 265860:                    // Null '++' '!='
    case 265861:                    // True '++' '!='
    case 265862:                    // False '++' '!='
    case 265863:                    // Character '++' '!='
    case 265864:                    // String '++' '!='
    case 265865:                    // Integer '++' '!='
    case 265866:                    // Complex '++' '!='
    case 265867:                    // Real '++' '!='
    case 298627:                    // Identifier '++' '%'
    case 298628:                    // Null '++' '%'
    case 298629:                    // True '++' '%'
    case 298630:                    // False '++' '%'
    case 298631:                    // Character '++' '%'
    case 298632:                    // String '++' '%'
    case 298633:                    // Integer '++' '%'
    case 298634:                    // Complex '++' '%'
    case 298635:                    // Real '++' '%'
    case 315011:                    // Identifier '++' '%='
    case 315012:                    // Null '++' '%='
    case 315013:                    // True '++' '%='
    case 315014:                    // False '++' '%='
    case 315015:                    // Character '++' '%='
    case 315016:                    // String '++' '%='
    case 315017:                    // Integer '++' '%='
    case 315018:                    // Complex '++' '%='
    case 315019:                    // Real '++' '%='
    case 331395:                    // Identifier '++' '&'
    case 331396:                    // Null '++' '&'
    case 331397:                    // True '++' '&'
    case 331398:                    // False '++' '&'
    case 331399:                    // Character '++' '&'
    case 331400:                    // String '++' '&'
    case 331401:                    // Integer '++' '&'
    case 331402:                    // Complex '++' '&'
    case 331403:                    // Real '++' '&'
    case 347779:                    // Identifier '++' '&&'
    case 347780:                    // Null '++' '&&'
    case 347781:                    // True '++' '&&'
    case 347782:                    // False '++' '&&'
    case 347783:                    // Character '++' '&&'
    case 347784:                    // String '++' '&&'
    case 347785:                    // Integer '++' '&&'
    case 347786:                    // Complex '++' '&&'
    case 347787:                    // Real '++' '&&'
    case 364163:                    // Identifier '++' '&='
    case 364164:                    // Null '++' '&='
    case 364165:                    // True '++' '&='
    case 364166:                    // False '++' '&='
    case 364167:                    // Character '++' '&='
    case 364168:                    // String '++' '&='
    case 364169:                    // Integer '++' '&='
    case 364170:                    // Complex '++' '&='
    case 364171:                    // Real '++' '&='
    case 396931:                    // Identifier '++' ')'
    case 396932:                    // Null '++' ')'
    case 396933:                    // True '++' ')'
    case 396934:                    // False '++' ')'
    case 396935:                    // Character '++' ')'
    case 396936:                    // String '++' ')'
    case 396937:                    // Integer '++' ')'
    case 396938:                    // Complex '++' ')'
    case 396939:                    // Real '++' ')'
    case 413315:                    // Identifier '++' '*'
    case 413316:                    // Null '++' '*'
    case 413317:                    // True '++' '*'
    case 413318:                    // False '++' '*'
    case 413319:                    // Character '++' '*'
    case 413320:                    // String '++' '*'
    case 413321:                    // Integer '++' '*'
    case 413322:                    // Complex '++' '*'
    case 413323:                    // Real '++' '*'
    case 429699:                    // Identifier '++' '**'
    case 429700:                    // Null '++' '**'
    case 429701:                    // True '++' '**'
    case 429702:                    // False '++' '**'
    case 429703:                    // Character '++' '**'
    case 429704:                    // String '++' '**'
    case 429705:                    // Integer '++' '**'
    case 429706:                    // Complex '++' '**'
    case 429707:                    // Real '++' '**'
    case 446083:                    // Identifier '++' '*='
    case 446084:                    // Null '++' '*='
    case 446085:                    // True '++' '*='
    case 446086:                    // False '++' '*='
    case 446087:                    // Character '++' '*='
    case 446088:                    // String '++' '*='
    case 446089:                    // Integer '++' '*='
    case 446090:                    // Complex '++' '*='
    case 446091:                    // Real '++' '*='
    case 462467:                    // Identifier '++' '+'
    case 462468:                    // Null '++' '+'
    case 462469:                    // True '++' '+'
    case 462470:                    // False '++' '+'
    case 462471:                    // Character '++' '+'
    case 462472:                    // String '++' '+'
    case 462473:                    // Integer '++' '+'
    case 462474:                    // Complex '++' '+'
    case 462475:                    // Real '++' '+'
    case 478851:                    // Identifier '++' '++'
    case 478852:                    // Null '++' '++'
    case 478853:                    // True '++' '++'
    case 478854:                    // False '++' '++'
    case 478855:                    // Character '++' '++'
    case 478856:                    // String '++' '++'
    case 478857:                    // Integer '++' '++'
    case 478858:                    // Complex '++' '++'
    case 478859:                    // Real '++' '++'
    case 495235:                    // Identifier '++' '+='
    case 495236:                    // Null '++' '+='
    case 495237:                    // True '++' '+='
    case 495238:                    // False '++' '+='
    case 495239:                    // Character '++' '+='
    case 495240:                    // String '++' '+='
    case 495241:                    // Integer '++' '+='
    case 495242:                    // Complex '++' '+='
    case 495243:                    // Real '++' '+='
    case 511619:                    // Identifier '++' ','
    case 511620:                    // Null '++' ','
    case 511621:                    // True '++' ','
    case 511622:                    // False '++' ','
    case 511623:                    // Character '++' ','
    case 511624:                    // String '++' ','
    case 511625:                    // Integer '++' ','
    case 511626:                    // Complex '++' ','
    case 511627:                    // Real '++' ','
    case 528003:                    // Identifier '++' '-'
    case 528004:                    // Null '++' '-'
    case 528005:                    // True '++' '-'
    case 528006:                    // False '++' '-'
    case 528007:                    // Character '++' '-'
    case 528008:                    // String '++' '-'
    case 528009:                    // Integer '++' '-'
    case 528010:                    // Complex '++' '-'
    case 528011:                    // Real '++' '-'
    case 544387:                    // Identifier '++' '--'
    case 544388:                    // Null '++' '--'
    case 544389:                    // True '++' '--'
    case 544390:                    // False '++' '--'
    case 544391:                    // Character '++' '--'
    case 544392:                    // String '++' '--'
    case 544393:                    // Integer '++' '--'
    case 544394:                    // Complex '++' '--'
    case 544395:                    // Real '++' '--'
    case 560771:                    // Identifier '++' '-='
    case 560772:                    // Null '++' '-='
    case 560773:                    // True '++' '-='
    case 560774:                    // False '++' '-='
    case 560775:                    // Character '++' '-='
    case 560776:                    // String '++' '-='
    case 560777:                    // Integer '++' '-='
    case 560778:                    // Complex '++' '-='
    case 560779:                    // Real '++' '-='
    case 593539:                    // Identifier '++' '/'
    case 593540:                    // Null '++' '/'
    case 593541:                    // True '++' '/'
    case 593542:                    // False '++' '/'
    case 593543:                    // Character '++' '/'
    case 593544:                    // String '++' '/'
    case 593545:                    // Integer '++' '/'
    case 593546:                    // Complex '++' '/'
    case 593547:                    // Real '++' '/'
    case 609923:                    // Identifier '++' '/='
    case 609924:                    // Null '++' '/='
    case 609925:                    // True '++' '/='
    case 609926:                    // False '++' '/='
    case 609927:                    // Character '++' '/='
    case 609928:                    // String '++' '/='
    case 609929:                    // Integer '++' '/='
    case 609930:                    // Complex '++' '/='
    case 609931:                    // Real '++' '/='
    case 626307:                    // Identifier '++' ':'
    case 626308:                    // Null '++' ':'
    case 626309:                    // True '++' ':'
    case 626310:                    // False '++' ':'
    case 626311:                    // Character '++' ':'
    case 626312:                    // String '++' ':'
    case 626313:                    // Integer '++' ':'
    case 626314:                    // Complex '++' ':'
    case 626315:                    // Real '++' ':'
    case 642691:                    // Identifier '++' ':='
    case 642692:                    // Null '++' ':='
    case 642693:                    // True '++' ':='
    case 642694:                    // False '++' ':='
    case 642695:                    // Character '++' ':='
    case 642696:                    // String '++' ':='
    case 642697:                    // Integer '++' ':='
    case 642698:                    // Complex '++' ':='
    case 642699:                    // Real '++' ':='
    case 659075:                    // Identifier '++' ';'
    case 659076:                    // Null '++' ';'
    case 659077:                    // True '++' ';'
    case 659078:                    // False '++' ';'
    case 659079:                    // Character '++' ';'
    case 659080:                    // String '++' ';'
    case 659081:                    // Integer '++' ';'
    case 659082:                    // Complex '++' ';'
    case 659083:                    // Real '++' ';'
    case 675459:                    // Identifier '++' '<'
    case 675460:                    // Null '++' '<'
    case 675461:                    // True '++' '<'
    case 675462:                    // False '++' '<'
    case 675463:                    // Character '++' '<'
    case 675464:                    // String '++' '<'
    case 675465:                    // Integer '++' '<'
    case 675466:                    // Complex '++' '<'
    case 675467:                    // Real '++' '<'
    case 691843:                    // Identifier '++' '<<'
    case 691844:                    // Null '++' '<<'
    case 691845:                    // True '++' '<<'
    case 691846:                    // False '++' '<<'
    case 691847:                    // Character '++' '<<'
    case 691848:                    // String '++' '<<'
    case 691849:                    // Integer '++' '<<'
    case 691850:                    // Complex '++' '<<'
    case 691851:                    // Real '++' '<<'
    case 708227:                    // Identifier '++' '<<='
    case 708228:                    // Null '++' '<<='
    case 708229:                    // True '++' '<<='
    case 708230:                    // False '++' '<<='
    case 708231:                    // Character '++' '<<='
    case 708232:                    // String '++' '<<='
    case 708233:                    // Integer '++' '<<='
    case 708234:                    // Complex '++' '<<='
    case 708235:                    // Real '++' '<<='
    case 724611:                    // Identifier '++' '<='
    case 724612:                    // Null '++' '<='
    case 724613:                    // True '++' '<='
    case 724614:                    // False '++' '<='
    case 724615:                    // Character '++' '<='
    case 724616:                    // String '++' '<='
    case 724617:                    // Integer '++' '<='
    case 724618:                    // Complex '++' '<='
    case 724619:                    // Real '++' '<='
    case 740995:                    // Identifier '++' '='
    case 740996:                    // Null '++' '='
    case 740997:                    // True '++' '='
    case 740998:                    // False '++' '='
    case 740999:                    // Character '++' '='
    case 741000:                    // String '++' '='
    case 741001:                    // Integer '++' '='
    case 741002:                    // Complex '++' '='
    case 741003:                    // Real '++' '='
    case 757379:                    // Identifier '++' '=='
    case 757380:                    // Null '++' '=='
    case 757381:                    // True '++' '=='
    case 757382:                    // False '++' '=='
    case 757383:                    // Character '++' '=='
    case 757384:                    // String '++' '=='
    case 757385:                    // Integer '++' '=='
    case 757386:                    // Complex '++' '=='
    case 757387:                    // Real '++' '=='
    case 773763:                    // Identifier '++' '>'
    case 773764:                    // Null '++' '>'
    case 773765:                    // True '++' '>'
    case 773766:                    // False '++' '>'
    case 773767:                    // Character '++' '>'
    case 773768:                    // String '++' '>'
    case 773769:                    // Integer '++' '>'
    case 773770:                    // Complex '++' '>'
    case 773771:                    // Real '++' '>'
    case 790147:                    // Identifier '++' '>='
    case 790148:                    // Null '++' '>='
    case 790149:                    // True '++' '>='
    case 790150:                    // False '++' '>='
    case 790151:                    // Character '++' '>='
    case 790152:                    // String '++' '>='
    case 790153:                    // Integer '++' '>='
    case 790154:                    // Complex '++' '>='
    case 790155:                    // Real '++' '>='
    case 806531:                    // Identifier '++' '>>'
    case 806532:                    // Null '++' '>>'
    case 806533:                    // True '++' '>>'
    case 806534:                    // False '++' '>>'
    case 806535:                    // Character '++' '>>'
    case 806536:                    // String '++' '>>'
    case 806537:                    // Integer '++' '>>'
    case 806538:                    // Complex '++' '>>'
    case 806539:                    // Real '++' '>>'
    case 822915:                    // Identifier '++' '>>='
    case 822916:                    // Null '++' '>>='
    case 822917:                    // True '++' '>>='
    case 822918:                    // False '++' '>>='
    case 822919:                    // Character '++' '>>='
    case 822920:                    // String '++' '>>='
    case 822921:                    // Integer '++' '>>='
    case 822922:                    // Complex '++' '>>='
    case 822923:                    // Real '++' '>>='
    case 839299:                    // Identifier '++' '?'
    case 839300:                    // Null '++' '?'
    case 839301:                    // True '++' '?'
    case 839302:                    // False '++' '?'
    case 839303:                    // Character '++' '?'
    case 839304:                    // String '++' '?'
    case 839305:                    // Integer '++' '?'
    case 839306:                    // Complex '++' '?'
    case 839307:                    // Real '++' '?'
    case 855683:                    // Identifier '++' '?='
    case 855684:                    // Null '++' '?='
    case 855685:                    // True '++' '?='
    case 855686:                    // False '++' '?='
    case 855687:                    // Character '++' '?='
    case 855688:                    // String '++' '?='
    case 855689:                    // Integer '++' '?='
    case 855690:                    // Complex '++' '?='
    case 855691:                    // Real '++' '?='
    case 888451:                    // Identifier '++' ']'
    case 888452:                    // Null '++' ']'
    case 888453:                    // True '++' ']'
    case 888454:                    // False '++' ']'
    case 888455:                    // Character '++' ']'
    case 888456:                    // String '++' ']'
    case 888457:                    // Integer '++' ']'
    case 888458:                    // Complex '++' ']'
    case 888459:                    // Real '++' ']'
    case 904835:                    // Identifier '++' '^'
    case 904836:                    // Null '++' '^'
    case 904837:                    // True '++' '^'
    case 904838:                    // False '++' '^'
    case 904839:                    // Character '++' '^'
    case 904840:                    // String '++' '^'
    case 904841:                    // Integer '++' '^'
    case 904842:                    // Complex '++' '^'
    case 904843:                    // Real '++' '^'
    case 921219:                    // Identifier '++' '^='
    case 921220:                    // Null '++' '^='
    case 921221:                    // True '++' '^='
    case 921222:                    // False '++' '^='
    case 921223:                    // Character '++' '^='
    case 921224:                    // String '++' '^='
    case 921225:                    // Integer '++' '^='
    case 921226:                    // Complex '++' '^='
    case 921227:                    // Real '++' '^='
    case 937603:                    // Identifier '++' 'break'
    case 937604:                    // Null '++' 'break'
    case 937605:                    // True '++' 'break'
    case 937606:                    // False '++' 'break'
    case 937607:                    // Character '++' 'break'
    case 937608:                    // String '++' 'break'
    case 937609:                    // Integer '++' 'break'
    case 937610:                    // Complex '++' 'break'
    case 937611:                    // Real '++' 'break'
    case 953987:                    // Identifier '++' 'case'
    case 953988:                    // Null '++' 'case'
    case 953989:                    // True '++' 'case'
    case 953990:                    // False '++' 'case'
    case 953991:                    // Character '++' 'case'
    case 953992:                    // String '++' 'case'
    case 953993:                    // Integer '++' 'case'
    case 953994:                    // Complex '++' 'case'
    case 953995:                    // Real '++' 'case'
    case 970371:                    // Identifier '++' 'catch'
    case 970372:                    // Null '++' 'catch'
    case 970373:                    // True '++' 'catch'
    case 970374:                    // False '++' 'catch'
    case 970375:                    // Character '++' 'catch'
    case 970376:                    // String '++' 'catch'
    case 970377:                    // Integer '++' 'catch'
    case 970378:                    // Complex '++' 'catch'
    case 970379:                    // Real '++' 'catch'
    case 986755:                    // Identifier '++' 'continue'
    case 986756:                    // Null '++' 'continue'
    case 986757:                    // True '++' 'continue'
    case 986758:                    // False '++' 'continue'
    case 986759:                    // Character '++' 'continue'
    case 986760:                    // String '++' 'continue'
    case 986761:                    // Integer '++' 'continue'
    case 986762:                    // Complex '++' 'continue'
    case 986763:                    // Real '++' 'continue'
    case 1003139:                   // Identifier '++' 'default'
    case 1003140:                   // Null '++' 'default'
    case 1003141:                   // True '++' 'default'
    case 1003142:                   // False '++' 'default'
    case 1003143:                   // Character '++' 'default'
    case 1003144:                   // String '++' 'default'
    case 1003145:                   // Integer '++' 'default'
    case 1003146:                   // Complex '++' 'default'
    case 1003147:                   // Real '++' 'default'
    case 1019523:                   // Identifier '++' 'do'
    case 1019524:                   // Null '++' 'do'
    case 1019525:                   // True '++' 'do'
    case 1019526:                   // False '++' 'do'
    case 1019527:                   // Character '++' 'do'
    case 1019528:                   // String '++' 'do'
    case 1019529:                   // Integer '++' 'do'
    case 1019530:                   // Complex '++' 'do'
    case 1019531:                   // Real '++' 'do'
    case 1035907:                   // Identifier '++' 'else'
    case 1035908:                   // Null '++' 'else'
    case 1035909:                   // True '++' 'else'
    case 1035910:                   // False '++' 'else'
    case 1035911:                   // Character '++' 'else'
    case 1035912:                   // String '++' 'else'
    case 1035913:                   // Integer '++' 'else'
    case 1035914:                   // Complex '++' 'else'
    case 1035915:                   // Real '++' 'else'
    case 1052291:                   // Identifier '++' 'export'
    case 1052292:                   // Null '++' 'export'
    case 1052293:                   // True '++' 'export'
    case 1052294:                   // False '++' 'export'
    case 1052295:                   // Character '++' 'export'
    case 1052296:                   // String '++' 'export'
    case 1052297:                   // Integer '++' 'export'
    case 1052298:                   // Complex '++' 'export'
    case 1052299:                   // Real '++' 'export'
    case 1101443:                   // Identifier '++' 'for'
    case 1101444:                   // Null '++' 'for'
    case 1101445:                   // True '++' 'for'
    case 1101446:                   // False '++' 'for'
    case 1101447:                   // Character '++' 'for'
    case 1101448:                   // String '++' 'for'
    case 1101449:                   // Integer '++' 'for'
    case 1101450:                   // Complex '++' 'for'
    case 1101451:                   // Real '++' 'for'
    case 1117827:                   // Identifier '++' 'foreach'
    case 1117828:                   // Null '++' 'foreach'
    case 1117829:                   // True '++' 'foreach'
    case 1117830:                   // False '++' 'foreach'
    case 1117831:                   // Character '++' 'foreach'
    case 1117832:                   // String '++' 'foreach'
    case 1117833:                   // Integer '++' 'foreach'
    case 1117834:                   // Complex '++' 'foreach'
    case 1117835:                   // Real '++' 'foreach'
    case 1134211:                   // Identifier '++' 'global'
    case 1134212:                   // Null '++' 'global'
    case 1134213:                   // True '++' 'global'
    case 1134214:                   // False '++' 'global'
    case 1134215:                   // Character '++' 'global'
    case 1134216:                   // String '++' 'global'
    case 1134217:                   // Integer '++' 'global'
    case 1134218:                   // Complex '++' 'global'
    case 1134219:                   // Real '++' 'global'
    case 1183363:                   // Identifier '++' 'if'
    case 1183364:                   // Null '++' 'if'
    case 1183365:                   // True '++' 'if'
    case 1183366:                   // False '++' 'if'
    case 1183367:                   // Character '++' 'if'
    case 1183368:                   // String '++' 'if'
    case 1183369:                   // Integer '++' 'if'
    case 1183370:                   // Complex '++' 'if'
    case 1183371:                   // Real '++' 'if'
    case 1199747:                   // Identifier '++' 'import'
    case 1199748:                   // Null '++' 'import'
    case 1199749:                   // True '++' 'import'
    case 1199750:                   // False '++' 'import'
    case 1199751:                   // Character '++' 'import'
    case 1199752:                   // String '++' 'import'
    case 1199753:                   // Integer '++' 'import'
    case 1199754:                   // Complex '++' 'import'
    case 1199755:                   // Real '++' 'import'
    case 1216131:                   // Identifier '++' 'include'
    case 1216132:                   // Null '++' 'include'
    case 1216133:                   // True '++' 'include'
    case 1216134:                   // False '++' 'include'
    case 1216135:                   // Character '++' 'include'
    case 1216136:                   // String '++' 'include'
    case 1216137:                   // Integer '++' 'include'
    case 1216138:                   // Complex '++' 'include'
    case 1216139:                   // Real '++' 'include'
    case 1232515:                   // Identifier '++' 'local'
    case 1232516:                   // Null '++' 'local'
    case 1232517:                   // True '++' 'local'
    case 1232518:                   // False '++' 'local'
    case 1232519:                   // Character '++' 'local'
    case 1232520:                   // String '++' 'local'
    case 1232521:                   // Integer '++' 'local'
    case 1232522:                   // Complex '++' 'local'
    case 1232523:                   // Real '++' 'local'
    case 1248899:                   // Identifier '++' 'return'
    case 1248900:                   // Null '++' 'return'
    case 1248901:                   // True '++' 'return'
    case 1248902:                   // False '++' 'return'
    case 1248903:                   // Character '++' 'return'
    case 1248904:                   // String '++' 'return'
    case 1248905:                   // Integer '++' 'return'
    case 1248906:                   // Complex '++' 'return'
    case 1248907:                   // Real '++' 'return'
    case 1265283:                   // Identifier '++' 'switch'
    case 1265284:                   // Null '++' 'switch'
    case 1265285:                   // True '++' 'switch'
    case 1265286:                   // False '++' 'switch'
    case 1265287:                   // Character '++' 'switch'
    case 1265288:                   // String '++' 'switch'
    case 1265289:                   // Integer '++' 'switch'
    case 1265290:                   // Complex '++' 'switch'
    case 1265291:                   // Real '++' 'switch'
    case 1281667:                   // Identifier '++' 'test'
    case 1281668:                   // Null '++' 'test'
    case 1281669:                   // True '++' 'test'
    case 1281670:                   // False '++' 'test'
    case 1281671:                   // Character '++' 'test'
    case 1281672:                   // String '++' 'test'
    case 1281673:                   // Integer '++' 'test'
    case 1281674:                   // Complex '++' 'test'
    case 1281675:                   // Real '++' 'test'
    case 1298051:                   // Identifier '++' 'throw'
    case 1298052:                   // Null '++' 'throw'
    case 1298053:                   // True '++' 'throw'
    case 1298054:                   // False '++' 'throw'
    case 1298055:                   // Character '++' 'throw'
    case 1298056:                   // String '++' 'throw'
    case 1298057:                   // Integer '++' 'throw'
    case 1298058:                   // Complex '++' 'throw'
    case 1298059:                   // Real '++' 'throw'
    case 1314435:                   // Identifier '++' 'try'
    case 1314436:                   // Null '++' 'try'
    case 1314437:                   // True '++' 'try'
    case 1314438:                   // False '++' 'try'
    case 1314439:                   // Character '++' 'try'
    case 1314440:                   // String '++' 'try'
    case 1314441:                   // Integer '++' 'try'
    case 1314442:                   // Complex '++' 'try'
    case 1314443:                   // Real '++' 'try'
    case 1330819:                   // Identifier '++' 'typeof'
    case 1330820:                   // Null '++' 'typeof'
    case 1330821:                   // True '++' 'typeof'
    case 1330822:                   // False '++' 'typeof'
    case 1330823:                   // Character '++' 'typeof'
    case 1330824:                   // String '++' 'typeof'
    case 1330825:                   // Integer '++' 'typeof'
    case 1330826:                   // Complex '++' 'typeof'
    case 1330827:                   // Real '++' 'typeof'
    case 1347203:                   // Identifier '++' 'while'
    case 1347204:                   // Null '++' 'while'
    case 1347205:                   // True '++' 'while'
    case 1347206:                   // False '++' 'while'
    case 1347207:                   // Character '++' 'while'
    case 1347208:                   // String '++' 'while'
    case 1347209:                   // Integer '++' 'while'
    case 1347210:                   // Complex '++' 'while'
    case 1347211:                   // Real '++' 'while'
    case 1379971:                   // Identifier '++' '|'
    case 1379972:                   // Null '++' '|'
    case 1379973:                   // True '++' '|'
    case 1379974:                   // False '++' '|'
    case 1379975:                   // Character '++' '|'
    case 1379976:                   // String '++' '|'
    case 1379977:                   // Integer '++' '|'
    case 1379978:                   // Complex '++' '|'
    case 1379979:                   // Real '++' '|'
    case 1396355:                   // Identifier '++' '|='
    case 1396356:                   // Null '++' '|='
    case 1396357:                   // True '++' '|='
    case 1396358:                   // False '++' '|='
    case 1396359:                   // Character '++' '|='
    case 1396360:                   // String '++' '|='
    case 1396361:                   // Integer '++' '|='
    case 1396362:                   // Complex '++' '|='
    case 1396363:                   // Real '++' '|='
    case 1412739:                   // Identifier '++' '||'
    case 1412740:                   // Null '++' '||'
    case 1412741:                   // True '++' '||'
    case 1412742:                   // False '++' '||'
    case 1412743:                   // Character '++' '||'
    case 1412744:                   // String '++' '||'
    case 1412745:                   // Integer '++' '||'
    case 1412746:                   // Complex '++' '||'
    case 1412747:                   // Real '++' '||'
    case 1429123:                   // Identifier '++' '}'
    case 1429124:                   // Null '++' '}'
    case 1429125:                   // True '++' '}'
    case 1429126:                   // False '++' '}'
    case 1429127:                   // Character '++' '}'
    case 1429128:                   // String '++' '}'
    case 1429129:                   // Integer '++' '}'
    case 1429130:                   // Complex '++' '}'
    case 1429131:                   // Real '++' '}'
    case 1445507:                   // Identifier '++' '~'
    case 1445508:                   // Null '++' '~'
    case 1445509:                   // True '++' '~'
    case 1445510:                   // False '++' '~'
    case 1445511:                   // Character '++' '~'
    case 1445512:                   // String '++' '~'
    case 1445513:                   // Integer '++' '~'
    case 1445514:                   // Complex '++' '~'
    case 1445515:                   // Real '++' '~'
      parse_Primary();
      lookahead1W(5);               // WhiteSpace^token | '++'
      consume(29);                  // '++'
      break;
    case -2:
    case 20611:                     // Identifier '--' END
    case 20612:                     // Null '--' END
    case 20613:                     // True '--' END
    case 20614:                     // False '--' END
    case 20615:                     // Character '--' END
    case 20616:                     // String '--' END
    case 20617:                     // Integer '--' END
    case 20618:                     // Complex '--' END
    case 20619:                     // Real '--' END
    case 200835:                    // Identifier '--' Comment
    case 200836:                    // Null '--' Comment
    case 200837:                    // True '--' Comment
    case 200838:                    // False '--' Comment
    case 200839:                    // Character '--' Comment
    case 200840:                    // String '--' Comment
    case 200841:                    // Integer '--' Comment
    case 200842:                    // Complex '--' Comment
    case 200843:                    // Real '--' Comment
    case 249987:                    // Identifier '--' '!'
    case 249988:                    // Null '--' '!'
    case 249989:                    // True '--' '!'
    case 249990:                    // False '--' '!'
    case 249991:                    // Character '--' '!'
    case 249992:                    // String '--' '!'
    case 249993:                    // Integer '--' '!'
    case 249994:                    // Complex '--' '!'
    case 249995:                    // Real '--' '!'
    case 266371:                    // Identifier '--' '!='
    case 266372:                    // Null '--' '!='
    case 266373:                    // True '--' '!='
    case 266374:                    // False '--' '!='
    case 266375:                    // Character '--' '!='
    case 266376:                    // String '--' '!='
    case 266377:                    // Integer '--' '!='
    case 266378:                    // Complex '--' '!='
    case 266379:                    // Real '--' '!='
    case 299139:                    // Identifier '--' '%'
    case 299140:                    // Null '--' '%'
    case 299141:                    // True '--' '%'
    case 299142:                    // False '--' '%'
    case 299143:                    // Character '--' '%'
    case 299144:                    // String '--' '%'
    case 299145:                    // Integer '--' '%'
    case 299146:                    // Complex '--' '%'
    case 299147:                    // Real '--' '%'
    case 315523:                    // Identifier '--' '%='
    case 315524:                    // Null '--' '%='
    case 315525:                    // True '--' '%='
    case 315526:                    // False '--' '%='
    case 315527:                    // Character '--' '%='
    case 315528:                    // String '--' '%='
    case 315529:                    // Integer '--' '%='
    case 315530:                    // Complex '--' '%='
    case 315531:                    // Real '--' '%='
    case 331907:                    // Identifier '--' '&'
    case 331908:                    // Null '--' '&'
    case 331909:                    // True '--' '&'
    case 331910:                    // False '--' '&'
    case 331911:                    // Character '--' '&'
    case 331912:                    // String '--' '&'
    case 331913:                    // Integer '--' '&'
    case 331914:                    // Complex '--' '&'
    case 331915:                    // Real '--' '&'
    case 348291:                    // Identifier '--' '&&'
    case 348292:                    // Null '--' '&&'
    case 348293:                    // True '--' '&&'
    case 348294:                    // False '--' '&&'
    case 348295:                    // Character '--' '&&'
    case 348296:                    // String '--' '&&'
    case 348297:                    // Integer '--' '&&'
    case 348298:                    // Complex '--' '&&'
    case 348299:                    // Real '--' '&&'
    case 364675:                    // Identifier '--' '&='
    case 364676:                    // Null '--' '&='
    case 364677:                    // True '--' '&='
    case 364678:                    // False '--' '&='
    case 364679:                    // Character '--' '&='
    case 364680:                    // String '--' '&='
    case 364681:                    // Integer '--' '&='
    case 364682:                    // Complex '--' '&='
    case 364683:                    // Real '--' '&='
    case 397443:                    // Identifier '--' ')'
    case 397444:                    // Null '--' ')'
    case 397445:                    // True '--' ')'
    case 397446:                    // False '--' ')'
    case 397447:                    // Character '--' ')'
    case 397448:                    // String '--' ')'
    case 397449:                    // Integer '--' ')'
    case 397450:                    // Complex '--' ')'
    case 397451:                    // Real '--' ')'
    case 413827:                    // Identifier '--' '*'
    case 413828:                    // Null '--' '*'
    case 413829:                    // True '--' '*'
    case 413830:                    // False '--' '*'
    case 413831:                    // Character '--' '*'
    case 413832:                    // String '--' '*'
    case 413833:                    // Integer '--' '*'
    case 413834:                    // Complex '--' '*'
    case 413835:                    // Real '--' '*'
    case 430211:                    // Identifier '--' '**'
    case 430212:                    // Null '--' '**'
    case 430213:                    // True '--' '**'
    case 430214:                    // False '--' '**'
    case 430215:                    // Character '--' '**'
    case 430216:                    // String '--' '**'
    case 430217:                    // Integer '--' '**'
    case 430218:                    // Complex '--' '**'
    case 430219:                    // Real '--' '**'
    case 446595:                    // Identifier '--' '*='
    case 446596:                    // Null '--' '*='
    case 446597:                    // True '--' '*='
    case 446598:                    // False '--' '*='
    case 446599:                    // Character '--' '*='
    case 446600:                    // String '--' '*='
    case 446601:                    // Integer '--' '*='
    case 446602:                    // Complex '--' '*='
    case 446603:                    // Real '--' '*='
    case 462979:                    // Identifier '--' '+'
    case 462980:                    // Null '--' '+'
    case 462981:                    // True '--' '+'
    case 462982:                    // False '--' '+'
    case 462983:                    // Character '--' '+'
    case 462984:                    // String '--' '+'
    case 462985:                    // Integer '--' '+'
    case 462986:                    // Complex '--' '+'
    case 462987:                    // Real '--' '+'
    case 479363:                    // Identifier '--' '++'
    case 479364:                    // Null '--' '++'
    case 479365:                    // True '--' '++'
    case 479366:                    // False '--' '++'
    case 479367:                    // Character '--' '++'
    case 479368:                    // String '--' '++'
    case 479369:                    // Integer '--' '++'
    case 479370:                    // Complex '--' '++'
    case 479371:                    // Real '--' '++'
    case 495747:                    // Identifier '--' '+='
    case 495748:                    // Null '--' '+='
    case 495749:                    // True '--' '+='
    case 495750:                    // False '--' '+='
    case 495751:                    // Character '--' '+='
    case 495752:                    // String '--' '+='
    case 495753:                    // Integer '--' '+='
    case 495754:                    // Complex '--' '+='
    case 495755:                    // Real '--' '+='
    case 512131:                    // Identifier '--' ','
    case 512132:                    // Null '--' ','
    case 512133:                    // True '--' ','
    case 512134:                    // False '--' ','
    case 512135:                    // Character '--' ','
    case 512136:                    // String '--' ','
    case 512137:                    // Integer '--' ','
    case 512138:                    // Complex '--' ','
    case 512139:                    // Real '--' ','
    case 528515:                    // Identifier '--' '-'
    case 528516:                    // Null '--' '-'
    case 528517:                    // True '--' '-'
    case 528518:                    // False '--' '-'
    case 528519:                    // Character '--' '-'
    case 528520:                    // String '--' '-'
    case 528521:                    // Integer '--' '-'
    case 528522:                    // Complex '--' '-'
    case 528523:                    // Real '--' '-'
    case 544899:                    // Identifier '--' '--'
    case 544900:                    // Null '--' '--'
    case 544901:                    // True '--' '--'
    case 544902:                    // False '--' '--'
    case 544903:                    // Character '--' '--'
    case 544904:                    // String '--' '--'
    case 544905:                    // Integer '--' '--'
    case 544906:                    // Complex '--' '--'
    case 544907:                    // Real '--' '--'
    case 561283:                    // Identifier '--' '-='
    case 561284:                    // Null '--' '-='
    case 561285:                    // True '--' '-='
    case 561286:                    // False '--' '-='
    case 561287:                    // Character '--' '-='
    case 561288:                    // String '--' '-='
    case 561289:                    // Integer '--' '-='
    case 561290:                    // Complex '--' '-='
    case 561291:                    // Real '--' '-='
    case 594051:                    // Identifier '--' '/'
    case 594052:                    // Null '--' '/'
    case 594053:                    // True '--' '/'
    case 594054:                    // False '--' '/'
    case 594055:                    // Character '--' '/'
    case 594056:                    // String '--' '/'
    case 594057:                    // Integer '--' '/'
    case 594058:                    // Complex '--' '/'
    case 594059:                    // Real '--' '/'
    case 610435:                    // Identifier '--' '/='
    case 610436:                    // Null '--' '/='
    case 610437:                    // True '--' '/='
    case 610438:                    // False '--' '/='
    case 610439:                    // Character '--' '/='
    case 610440:                    // String '--' '/='
    case 610441:                    // Integer '--' '/='
    case 610442:                    // Complex '--' '/='
    case 610443:                    // Real '--' '/='
    case 626819:                    // Identifier '--' ':'
    case 626820:                    // Null '--' ':'
    case 626821:                    // True '--' ':'
    case 626822:                    // False '--' ':'
    case 626823:                    // Character '--' ':'
    case 626824:                    // String '--' ':'
    case 626825:                    // Integer '--' ':'
    case 626826:                    // Complex '--' ':'
    case 626827:                    // Real '--' ':'
    case 643203:                    // Identifier '--' ':='
    case 643204:                    // Null '--' ':='
    case 643205:                    // True '--' ':='
    case 643206:                    // False '--' ':='
    case 643207:                    // Character '--' ':='
    case 643208:                    // String '--' ':='
    case 643209:                    // Integer '--' ':='
    case 643210:                    // Complex '--' ':='
    case 643211:                    // Real '--' ':='
    case 659587:                    // Identifier '--' ';'
    case 659588:                    // Null '--' ';'
    case 659589:                    // True '--' ';'
    case 659590:                    // False '--' ';'
    case 659591:                    // Character '--' ';'
    case 659592:                    // String '--' ';'
    case 659593:                    // Integer '--' ';'
    case 659594:                    // Complex '--' ';'
    case 659595:                    // Real '--' ';'
    case 675971:                    // Identifier '--' '<'
    case 675972:                    // Null '--' '<'
    case 675973:                    // True '--' '<'
    case 675974:                    // False '--' '<'
    case 675975:                    // Character '--' '<'
    case 675976:                    // String '--' '<'
    case 675977:                    // Integer '--' '<'
    case 675978:                    // Complex '--' '<'
    case 675979:                    // Real '--' '<'
    case 692355:                    // Identifier '--' '<<'
    case 692356:                    // Null '--' '<<'
    case 692357:                    // True '--' '<<'
    case 692358:                    // False '--' '<<'
    case 692359:                    // Character '--' '<<'
    case 692360:                    // String '--' '<<'
    case 692361:                    // Integer '--' '<<'
    case 692362:                    // Complex '--' '<<'
    case 692363:                    // Real '--' '<<'
    case 708739:                    // Identifier '--' '<<='
    case 708740:                    // Null '--' '<<='
    case 708741:                    // True '--' '<<='
    case 708742:                    // False '--' '<<='
    case 708743:                    // Character '--' '<<='
    case 708744:                    // String '--' '<<='
    case 708745:                    // Integer '--' '<<='
    case 708746:                    // Complex '--' '<<='
    case 708747:                    // Real '--' '<<='
    case 725123:                    // Identifier '--' '<='
    case 725124:                    // Null '--' '<='
    case 725125:                    // True '--' '<='
    case 725126:                    // False '--' '<='
    case 725127:                    // Character '--' '<='
    case 725128:                    // String '--' '<='
    case 725129:                    // Integer '--' '<='
    case 725130:                    // Complex '--' '<='
    case 725131:                    // Real '--' '<='
    case 741507:                    // Identifier '--' '='
    case 741508:                    // Null '--' '='
    case 741509:                    // True '--' '='
    case 741510:                    // False '--' '='
    case 741511:                    // Character '--' '='
    case 741512:                    // String '--' '='
    case 741513:                    // Integer '--' '='
    case 741514:                    // Complex '--' '='
    case 741515:                    // Real '--' '='
    case 757891:                    // Identifier '--' '=='
    case 757892:                    // Null '--' '=='
    case 757893:                    // True '--' '=='
    case 757894:                    // False '--' '=='
    case 757895:                    // Character '--' '=='
    case 757896:                    // String '--' '=='
    case 757897:                    // Integer '--' '=='
    case 757898:                    // Complex '--' '=='
    case 757899:                    // Real '--' '=='
    case 774275:                    // Identifier '--' '>'
    case 774276:                    // Null '--' '>'
    case 774277:                    // True '--' '>'
    case 774278:                    // False '--' '>'
    case 774279:                    // Character '--' '>'
    case 774280:                    // String '--' '>'
    case 774281:                    // Integer '--' '>'
    case 774282:                    // Complex '--' '>'
    case 774283:                    // Real '--' '>'
    case 790659:                    // Identifier '--' '>='
    case 790660:                    // Null '--' '>='
    case 790661:                    // True '--' '>='
    case 790662:                    // False '--' '>='
    case 790663:                    // Character '--' '>='
    case 790664:                    // String '--' '>='
    case 790665:                    // Integer '--' '>='
    case 790666:                    // Complex '--' '>='
    case 790667:                    // Real '--' '>='
    case 807043:                    // Identifier '--' '>>'
    case 807044:                    // Null '--' '>>'
    case 807045:                    // True '--' '>>'
    case 807046:                    // False '--' '>>'
    case 807047:                    // Character '--' '>>'
    case 807048:                    // String '--' '>>'
    case 807049:                    // Integer '--' '>>'
    case 807050:                    // Complex '--' '>>'
    case 807051:                    // Real '--' '>>'
    case 823427:                    // Identifier '--' '>>='
    case 823428:                    // Null '--' '>>='
    case 823429:                    // True '--' '>>='
    case 823430:                    // False '--' '>>='
    case 823431:                    // Character '--' '>>='
    case 823432:                    // String '--' '>>='
    case 823433:                    // Integer '--' '>>='
    case 823434:                    // Complex '--' '>>='
    case 823435:                    // Real '--' '>>='
    case 839811:                    // Identifier '--' '?'
    case 839812:                    // Null '--' '?'
    case 839813:                    // True '--' '?'
    case 839814:                    // False '--' '?'
    case 839815:                    // Character '--' '?'
    case 839816:                    // String '--' '?'
    case 839817:                    // Integer '--' '?'
    case 839818:                    // Complex '--' '?'
    case 839819:                    // Real '--' '?'
    case 856195:                    // Identifier '--' '?='
    case 856196:                    // Null '--' '?='
    case 856197:                    // True '--' '?='
    case 856198:                    // False '--' '?='
    case 856199:                    // Character '--' '?='
    case 856200:                    // String '--' '?='
    case 856201:                    // Integer '--' '?='
    case 856202:                    // Complex '--' '?='
    case 856203:                    // Real '--' '?='
    case 888963:                    // Identifier '--' ']'
    case 888964:                    // Null '--' ']'
    case 888965:                    // True '--' ']'
    case 888966:                    // False '--' ']'
    case 888967:                    // Character '--' ']'
    case 888968:                    // String '--' ']'
    case 888969:                    // Integer '--' ']'
    case 888970:                    // Complex '--' ']'
    case 888971:                    // Real '--' ']'
    case 905347:                    // Identifier '--' '^'
    case 905348:                    // Null '--' '^'
    case 905349:                    // True '--' '^'
    case 905350:                    // False '--' '^'
    case 905351:                    // Character '--' '^'
    case 905352:                    // String '--' '^'
    case 905353:                    // Integer '--' '^'
    case 905354:                    // Complex '--' '^'
    case 905355:                    // Real '--' '^'
    case 921731:                    // Identifier '--' '^='
    case 921732:                    // Null '--' '^='
    case 921733:                    // True '--' '^='
    case 921734:                    // False '--' '^='
    case 921735:                    // Character '--' '^='
    case 921736:                    // String '--' '^='
    case 921737:                    // Integer '--' '^='
    case 921738:                    // Complex '--' '^='
    case 921739:                    // Real '--' '^='
    case 938115:                    // Identifier '--' 'break'
    case 938116:                    // Null '--' 'break'
    case 938117:                    // True '--' 'break'
    case 938118:                    // False '--' 'break'
    case 938119:                    // Character '--' 'break'
    case 938120:                    // String '--' 'break'
    case 938121:                    // Integer '--' 'break'
    case 938122:                    // Complex '--' 'break'
    case 938123:                    // Real '--' 'break'
    case 954499:                    // Identifier '--' 'case'
    case 954500:                    // Null '--' 'case'
    case 954501:                    // True '--' 'case'
    case 954502:                    // False '--' 'case'
    case 954503:                    // Character '--' 'case'
    case 954504:                    // String '--' 'case'
    case 954505:                    // Integer '--' 'case'
    case 954506:                    // Complex '--' 'case'
    case 954507:                    // Real '--' 'case'
    case 970883:                    // Identifier '--' 'catch'
    case 970884:                    // Null '--' 'catch'
    case 970885:                    // True '--' 'catch'
    case 970886:                    // False '--' 'catch'
    case 970887:                    // Character '--' 'catch'
    case 970888:                    // String '--' 'catch'
    case 970889:                    // Integer '--' 'catch'
    case 970890:                    // Complex '--' 'catch'
    case 970891:                    // Real '--' 'catch'
    case 987267:                    // Identifier '--' 'continue'
    case 987268:                    // Null '--' 'continue'
    case 987269:                    // True '--' 'continue'
    case 987270:                    // False '--' 'continue'
    case 987271:                    // Character '--' 'continue'
    case 987272:                    // String '--' 'continue'
    case 987273:                    // Integer '--' 'continue'
    case 987274:                    // Complex '--' 'continue'
    case 987275:                    // Real '--' 'continue'
    case 1003651:                   // Identifier '--' 'default'
    case 1003652:                   // Null '--' 'default'
    case 1003653:                   // True '--' 'default'
    case 1003654:                   // False '--' 'default'
    case 1003655:                   // Character '--' 'default'
    case 1003656:                   // String '--' 'default'
    case 1003657:                   // Integer '--' 'default'
    case 1003658:                   // Complex '--' 'default'
    case 1003659:                   // Real '--' 'default'
    case 1020035:                   // Identifier '--' 'do'
    case 1020036:                   // Null '--' 'do'
    case 1020037:                   // True '--' 'do'
    case 1020038:                   // False '--' 'do'
    case 1020039:                   // Character '--' 'do'
    case 1020040:                   // String '--' 'do'
    case 1020041:                   // Integer '--' 'do'
    case 1020042:                   // Complex '--' 'do'
    case 1020043:                   // Real '--' 'do'
    case 1036419:                   // Identifier '--' 'else'
    case 1036420:                   // Null '--' 'else'
    case 1036421:                   // True '--' 'else'
    case 1036422:                   // False '--' 'else'
    case 1036423:                   // Character '--' 'else'
    case 1036424:                   // String '--' 'else'
    case 1036425:                   // Integer '--' 'else'
    case 1036426:                   // Complex '--' 'else'
    case 1036427:                   // Real '--' 'else'
    case 1052803:                   // Identifier '--' 'export'
    case 1052804:                   // Null '--' 'export'
    case 1052805:                   // True '--' 'export'
    case 1052806:                   // False '--' 'export'
    case 1052807:                   // Character '--' 'export'
    case 1052808:                   // String '--' 'export'
    case 1052809:                   // Integer '--' 'export'
    case 1052810:                   // Complex '--' 'export'
    case 1052811:                   // Real '--' 'export'
    case 1101955:                   // Identifier '--' 'for'
    case 1101956:                   // Null '--' 'for'
    case 1101957:                   // True '--' 'for'
    case 1101958:                   // False '--' 'for'
    case 1101959:                   // Character '--' 'for'
    case 1101960:                   // String '--' 'for'
    case 1101961:                   // Integer '--' 'for'
    case 1101962:                   // Complex '--' 'for'
    case 1101963:                   // Real '--' 'for'
    case 1118339:                   // Identifier '--' 'foreach'
    case 1118340:                   // Null '--' 'foreach'
    case 1118341:                   // True '--' 'foreach'
    case 1118342:                   // False '--' 'foreach'
    case 1118343:                   // Character '--' 'foreach'
    case 1118344:                   // String '--' 'foreach'
    case 1118345:                   // Integer '--' 'foreach'
    case 1118346:                   // Complex '--' 'foreach'
    case 1118347:                   // Real '--' 'foreach'
    case 1134723:                   // Identifier '--' 'global'
    case 1134724:                   // Null '--' 'global'
    case 1134725:                   // True '--' 'global'
    case 1134726:                   // False '--' 'global'
    case 1134727:                   // Character '--' 'global'
    case 1134728:                   // String '--' 'global'
    case 1134729:                   // Integer '--' 'global'
    case 1134730:                   // Complex '--' 'global'
    case 1134731:                   // Real '--' 'global'
    case 1183875:                   // Identifier '--' 'if'
    case 1183876:                   // Null '--' 'if'
    case 1183877:                   // True '--' 'if'
    case 1183878:                   // False '--' 'if'
    case 1183879:                   // Character '--' 'if'
    case 1183880:                   // String '--' 'if'
    case 1183881:                   // Integer '--' 'if'
    case 1183882:                   // Complex '--' 'if'
    case 1183883:                   // Real '--' 'if'
    case 1200259:                   // Identifier '--' 'import'
    case 1200260:                   // Null '--' 'import'
    case 1200261:                   // True '--' 'import'
    case 1200262:                   // False '--' 'import'
    case 1200263:                   // Character '--' 'import'
    case 1200264:                   // String '--' 'import'
    case 1200265:                   // Integer '--' 'import'
    case 1200266:                   // Complex '--' 'import'
    case 1200267:                   // Real '--' 'import'
    case 1216643:                   // Identifier '--' 'include'
    case 1216644:                   // Null '--' 'include'
    case 1216645:                   // True '--' 'include'
    case 1216646:                   // False '--' 'include'
    case 1216647:                   // Character '--' 'include'
    case 1216648:                   // String '--' 'include'
    case 1216649:                   // Integer '--' 'include'
    case 1216650:                   // Complex '--' 'include'
    case 1216651:                   // Real '--' 'include'
    case 1233027:                   // Identifier '--' 'local'
    case 1233028:                   // Null '--' 'local'
    case 1233029:                   // True '--' 'local'
    case 1233030:                   // False '--' 'local'
    case 1233031:                   // Character '--' 'local'
    case 1233032:                   // String '--' 'local'
    case 1233033:                   // Integer '--' 'local'
    case 1233034:                   // Complex '--' 'local'
    case 1233035:                   // Real '--' 'local'
    case 1249411:                   // Identifier '--' 'return'
    case 1249412:                   // Null '--' 'return'
    case 1249413:                   // True '--' 'return'
    case 1249414:                   // False '--' 'return'
    case 1249415:                   // Character '--' 'return'
    case 1249416:                   // String '--' 'return'
    case 1249417:                   // Integer '--' 'return'
    case 1249418:                   // Complex '--' 'return'
    case 1249419:                   // Real '--' 'return'
    case 1265795:                   // Identifier '--' 'switch'
    case 1265796:                   // Null '--' 'switch'
    case 1265797:                   // True '--' 'switch'
    case 1265798:                   // False '--' 'switch'
    case 1265799:                   // Character '--' 'switch'
    case 1265800:                   // String '--' 'switch'
    case 1265801:                   // Integer '--' 'switch'
    case 1265802:                   // Complex '--' 'switch'
    case 1265803:                   // Real '--' 'switch'
    case 1282179:                   // Identifier '--' 'test'
    case 1282180:                   // Null '--' 'test'
    case 1282181:                   // True '--' 'test'
    case 1282182:                   // False '--' 'test'
    case 1282183:                   // Character '--' 'test'
    case 1282184:                   // String '--' 'test'
    case 1282185:                   // Integer '--' 'test'
    case 1282186:                   // Complex '--' 'test'
    case 1282187:                   // Real '--' 'test'
    case 1298563:                   // Identifier '--' 'throw'
    case 1298564:                   // Null '--' 'throw'
    case 1298565:                   // True '--' 'throw'
    case 1298566:                   // False '--' 'throw'
    case 1298567:                   // Character '--' 'throw'
    case 1298568:                   // String '--' 'throw'
    case 1298569:                   // Integer '--' 'throw'
    case 1298570:                   // Complex '--' 'throw'
    case 1298571:                   // Real '--' 'throw'
    case 1314947:                   // Identifier '--' 'try'
    case 1314948:                   // Null '--' 'try'
    case 1314949:                   // True '--' 'try'
    case 1314950:                   // False '--' 'try'
    case 1314951:                   // Character '--' 'try'
    case 1314952:                   // String '--' 'try'
    case 1314953:                   // Integer '--' 'try'
    case 1314954:                   // Complex '--' 'try'
    case 1314955:                   // Real '--' 'try'
    case 1331331:                   // Identifier '--' 'typeof'
    case 1331332:                   // Null '--' 'typeof'
    case 1331333:                   // True '--' 'typeof'
    case 1331334:                   // False '--' 'typeof'
    case 1331335:                   // Character '--' 'typeof'
    case 1331336:                   // String '--' 'typeof'
    case 1331337:                   // Integer '--' 'typeof'
    case 1331338:                   // Complex '--' 'typeof'
    case 1331339:                   // Real '--' 'typeof'
    case 1347715:                   // Identifier '--' 'while'
    case 1347716:                   // Null '--' 'while'
    case 1347717:                   // True '--' 'while'
    case 1347718:                   // False '--' 'while'
    case 1347719:                   // Character '--' 'while'
    case 1347720:                   // String '--' 'while'
    case 1347721:                   // Integer '--' 'while'
    case 1347722:                   // Complex '--' 'while'
    case 1347723:                   // Real '--' 'while'
    case 1380483:                   // Identifier '--' '|'
    case 1380484:                   // Null '--' '|'
    case 1380485:                   // True '--' '|'
    case 1380486:                   // False '--' '|'
    case 1380487:                   // Character '--' '|'
    case 1380488:                   // String '--' '|'
    case 1380489:                   // Integer '--' '|'
    case 1380490:                   // Complex '--' '|'
    case 1380491:                   // Real '--' '|'
    case 1396867:                   // Identifier '--' '|='
    case 1396868:                   // Null '--' '|='
    case 1396869:                   // True '--' '|='
    case 1396870:                   // False '--' '|='
    case 1396871:                   // Character '--' '|='
    case 1396872:                   // String '--' '|='
    case 1396873:                   // Integer '--' '|='
    case 1396874:                   // Complex '--' '|='
    case 1396875:                   // Real '--' '|='
    case 1413251:                   // Identifier '--' '||'
    case 1413252:                   // Null '--' '||'
    case 1413253:                   // True '--' '||'
    case 1413254:                   // False '--' '||'
    case 1413255:                   // Character '--' '||'
    case 1413256:                   // String '--' '||'
    case 1413257:                   // Integer '--' '||'
    case 1413258:                   // Complex '--' '||'
    case 1413259:                   // Real '--' '||'
    case 1429635:                   // Identifier '--' '}'
    case 1429636:                   // Null '--' '}'
    case 1429637:                   // True '--' '}'
    case 1429638:                   // False '--' '}'
    case 1429639:                   // Character '--' '}'
    case 1429640:                   // String '--' '}'
    case 1429641:                   // Integer '--' '}'
    case 1429642:                   // Complex '--' '}'
    case 1429643:                   // Real '--' '}'
    case 1446019:                   // Identifier '--' '~'
    case 1446020:                   // Null '--' '~'
    case 1446021:                   // True '--' '~'
    case 1446022:                   // False '--' '~'
    case 1446023:                   // Character '--' '~'
    case 1446024:                   // String '--' '~'
    case 1446025:                   // Integer '--' '~'
    case 1446026:                   // Complex '--' '~'
    case 1446027:                   // Real '--' '~'
      parse_Primary();
      lookahead1W(6);               // WhiteSpace^token | '--'
      consume(33);                  // '--'
      break;
    case 29:                        // '++'
      consume(29);                  // '++'
      lookahead1W(22);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
      whitespace();
      parse_Primary();
      break;
    case 33:                        // '--'
      consume(33);                  // '--'
      lookahead1W(22);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
      whitespace();
      parse_Primary();
      break;
    case 28:                        // '+'
      consume(28);                  // '+'
      lookahead1W(22);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
      whitespace();
      parse_Primary();
      break;
    case 32:                        // '-'
      consume(32);                  // '-'
      lookahead1W(22);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
      whitespace();
      parse_Primary();
      break;
    case 88:                        // '~'
      consume(88);                  // '~'
      lookahead1W(22);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
      whitespace();
      parse_Primary();
      break;
    case 15:                        // '!'
      consume(15);                  // '!'
      lookahead1W(22);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
      whitespace();
      parse_Primary();
      break;
    default:
      parse_Primary();
    }
    eventHandler.endNonterminal("UnaryExpression", e0);
  }

  function try_UnaryExpression()
  {
    switch (l1)
    {
    case 3:                         // Identifier
      lookahead2W(45);              // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' |
                                    // '.' | '/' | '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' |
                                    // '>' | '>=' | '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' |
                                    // 'case' | 'catch' | 'continue' | 'default' | 'do' | 'else' | 'export' | 'f32' |
                                    // 'f64' | 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' |
                                    // 'include' | 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' |
                                    // 'while' | '{' | '|' | '|=' | '||' | '}' | '~'
      switch (lk)
      {
      case 2947:                    // Identifier '('
        lookahead3W(33);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        break;
      case 4483:                    // Identifier '.'
        lookahead3W(0);             // Identifier | WhiteSpace^token
        break;
      case 6787:                    // Identifier '['
        lookahead3W(34);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | ']' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        break;
      case 3715:                    // Identifier '++'
      case 4227:                    // Identifier '--'
        lookahead3W(44);            // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' |
                                    // '/' | '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' |
                                    // '>=' | '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' |
                                    // 'catch' | 'continue' | 'default' | 'do' | 'else' | 'export' | 'f32' | 'f64' |
                                    // 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' |
                                    // 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' |
                                    // '{' | '|' | '|=' | '||' | '}' | '~'
        break;
      }
      break;
    case 23:                        // '('
      lookahead2W(29);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
      switch (lk)
      {
      case 407:                     // '(' Identifier
        lookahead3W(28);            // WhiteSpace^token | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' | '*' |
                                    // '**' | '*=' | '+' | '++' | '+=' | '-' | '--' | '-=' | '.' | '/' | '/=' | ':=' |
                                    // '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '?' | '?=' |
                                    // '[' | '^' | '^=' | '{' | '|' | '|=' | '||'
        break;
      case 6807:                    // '(' '['
        lookahead3W(34);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | ']' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        break;
      case 10647:                   // '(' '{'
        lookahead3W(38);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '}' |
                                    // '~'
        break;
      case 1559:                    // '(' Comment
      case 5143:                    // '(' ';'
      case 7319:                    // '(' 'break'
      case 7703:                    // '(' 'continue'
        lookahead3W(4);             // WhiteSpace^token | ')'
        break;
      case 8343:                    // '(' 'f32'
      case 8471:                    // '(' 'f64'
      case 8983:                    // '(' 'i32'
      case 9111:                    // '(' 'i64'
        lookahead3W(0);             // Identifier | WhiteSpace^token
        break;
      case 1943:                    // '(' '!'
      case 3607:                    // '(' '+'
      case 3735:                    // '(' '++'
      case 4119:                    // '(' '-'
      case 4247:                    // '(' '--'
      case 11287:                   // '(' '~'
        lookahead3W(22);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
        break;
      case 8599:                    // '(' 'for'
      case 8727:                    // '(' 'foreach'
      case 9239:                    // '(' 'if'
      case 9879:                    // '(' 'switch'
      case 10007:                   // '(' 'test'
      case 10519:                   // '(' 'while'
        lookahead3W(3);             // WhiteSpace^token | '('
        break;
      case 535:                     // '(' Null
      case 663:                     // '(' True
      case 791:                     // '(' False
      case 919:                     // '(' Character
      case 1047:                    // '(' String
      case 1175:                    // '(' Integer
      case 1303:                    // '(' Complex
      case 1431:                    // '(' Real
        lookahead3W(24);            // WhiteSpace^token | '!=' | '%' | '%=' | '&' | '&&' | '&=' | ')' | '*' | '**' |
                                    // '*=' | '+' | '++' | '+=' | '-' | '--' | '-=' | '/' | '/=' | ':=' | '<' | '<<' |
                                    // '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '?' | '?=' | '^' | '^=' |
                                    // '|' | '|=' | '||'
        break;
      case 2967:                    // '(' '('
      case 7959:                    // '(' 'do'
      case 8215:                    // '(' 'export'
      case 8855:                    // '(' 'global'
      case 9367:                    // '(' 'import'
      case 9495:                    // '(' 'include'
      case 9623:                    // '(' 'local'
      case 9751:                    // '(' 'return'
      case 10135:                   // '(' 'throw'
      case 10263:                   // '(' 'try'
      case 10391:                   // '(' 'typeof'
        lookahead3W(29);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        break;
      }
      break;
    case 53:                        // '['
      lookahead2W(34);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | ']' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
      switch (lk)
      {
      case 437:                     // '[' Identifier
        lookahead3W(31);            // WhiteSpace^token | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | '*' | '**' |
                                    // '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' | '/=' | ':=' |
                                    // ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '?' |
                                    // '?=' | '[' | ']' | '^' | '^=' | '{' | '|' | '|=' | '||'
        break;
      case 5173:                    // '[' ';'
        lookahead3W(37);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' |
                                    // ';' | '[' | ']' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' |
                                    // 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' |
                                    // 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' |
                                    // '{' | '~'
        break;
      case 6837:                    // '[' '['
        lookahead3W(34);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | ']' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        break;
      case 6965:                    // '[' ']'
        lookahead3W(44);            // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' |
                                    // '/' | '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' |
                                    // '>=' | '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' |
                                    // 'catch' | 'continue' | 'default' | 'do' | 'else' | 'export' | 'f32' | 'f64' |
                                    // 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' |
                                    // 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' |
                                    // '{' | '|' | '|=' | '||' | '}' | '~'
        break;
      case 10677:                   // '[' '{'
        lookahead3W(38);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '}' |
                                    // '~'
        break;
      case 1589:                    // '[' Comment
      case 7349:                    // '[' 'break'
      case 7733:                    // '[' 'continue'
        lookahead3W(21);            // WhiteSpace^token | ',' | ';' | ']'
        break;
      case 8373:                    // '[' 'f32'
      case 8501:                    // '[' 'f64'
      case 9013:                    // '[' 'i32'
      case 9141:                    // '[' 'i64'
        lookahead3W(0);             // Identifier | WhiteSpace^token
        break;
      case 1973:                    // '[' '!'
      case 3637:                    // '[' '+'
      case 3765:                    // '[' '++'
      case 4149:                    // '[' '-'
      case 4277:                    // '[' '--'
      case 11317:                   // '[' '~'
        lookahead3W(22);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
        break;
      case 8629:                    // '[' 'for'
      case 8757:                    // '[' 'foreach'
      case 9269:                    // '[' 'if'
      case 9909:                    // '[' 'switch'
      case 10037:                   // '[' 'test'
      case 10549:                   // '[' 'while'
        lookahead3W(3);             // WhiteSpace^token | '('
        break;
      case 565:                     // '[' Null
      case 693:                     // '[' True
      case 821:                     // '[' False
      case 949:                     // '[' Character
      case 1077:                    // '[' String
      case 1205:                    // '[' Integer
      case 1333:                    // '[' Complex
      case 1461:                    // '[' Real
        lookahead3W(27);            // WhiteSpace^token | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '*' | '**' | '*=' |
                                    // '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' | ':=' | ';' | '<' |
                                    // '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '?' | '?=' | ']' |
                                    // '^' | '^=' | '|' | '|=' | '||'
        break;
      case 2997:                    // '[' '('
      case 7989:                    // '[' 'do'
      case 8245:                    // '[' 'export'
      case 8885:                    // '[' 'global'
      case 9397:                    // '[' 'import'
      case 9525:                    // '[' 'include'
      case 9653:                    // '[' 'local'
      case 9781:                    // '[' 'return'
      case 10165:                   // '[' 'throw'
      case 10293:                   // '[' 'try'
      case 10421:                   // '[' 'typeof'
        lookahead3W(29);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        break;
      }
      break;
    case 83:                        // '{'
      lookahead2W(38);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '}' |
                                    // '~'
      switch (lk)
      {
      case 467:                     // '{' Identifier
        lookahead3W(30);            // WhiteSpace^token | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | '*' | '**' |
                                    // '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' | '/=' | ':' |
                                    // ':=' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '?' |
                                    // '?=' | '[' | '^' | '^=' | '{' | '|' | '|=' | '||' | '}'
        break;
      case 1107:                    // '{' String
        lookahead3W(26);            // WhiteSpace^token | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '*' | '**' | '*=' |
                                    // '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' | ':' | ':=' | '<' |
                                    // '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '?' | '?=' | '^' |
                                    // '^=' | '|' | '|=' | '||' | '}'
        break;
      case 6867:                    // '{' '['
        lookahead3W(34);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | ']' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        break;
      case 10707:                   // '{' '{'
        lookahead3W(38);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '}' |
                                    // '~'
        break;
      case 11219:                   // '{' '}'
        lookahead3W(44);            // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' |
                                    // '/' | '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' |
                                    // '>=' | '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' |
                                    // 'catch' | 'continue' | 'default' | 'do' | 'else' | 'export' | 'f32' | 'f64' |
                                    // 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' |
                                    // 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' |
                                    // '{' | '|' | '|=' | '||' | '}' | '~'
        break;
      case 1619:                    // '{' Comment
      case 5203:                    // '{' ';'
      case 7379:                    // '{' 'break'
      case 7763:                    // '{' 'continue'
        lookahead3W(17);            // WhiteSpace^token | ',' | '}'
        break;
      case 8403:                    // '{' 'f32'
      case 8531:                    // '{' 'f64'
      case 9043:                    // '{' 'i32'
      case 9171:                    // '{' 'i64'
        lookahead3W(0);             // Identifier | WhiteSpace^token
        break;
      case 2003:                    // '{' '!'
      case 3667:                    // '{' '+'
      case 3795:                    // '{' '++'
      case 4179:                    // '{' '-'
      case 4307:                    // '{' '--'
      case 11347:                   // '{' '~'
        lookahead3W(22);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
        break;
      case 8659:                    // '{' 'for'
      case 8787:                    // '{' 'foreach'
      case 9299:                    // '{' 'if'
      case 9939:                    // '{' 'switch'
      case 10067:                   // '{' 'test'
      case 10579:                   // '{' 'while'
        lookahead3W(3);             // WhiteSpace^token | '('
        break;
      case 595:                     // '{' Null
      case 723:                     // '{' True
      case 851:                     // '{' False
      case 979:                     // '{' Character
      case 1235:                    // '{' Integer
      case 1363:                    // '{' Complex
      case 1491:                    // '{' Real
        lookahead3W(25);            // WhiteSpace^token | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '*' | '**' | '*=' |
                                    // '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' | ':=' | '<' | '<<' |
                                    // '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '?' | '?=' | '^' | '^=' |
                                    // '|' | '|=' | '||' | '}'
        break;
      case 3027:                    // '{' '('
      case 4051:                    // '{' ','
      case 8019:                    // '{' 'do'
      case 8275:                    // '{' 'export'
      case 8915:                    // '{' 'global'
      case 9427:                    // '{' 'import'
      case 9555:                    // '{' 'include'
      case 9683:                    // '{' 'local'
      case 9811:                    // '{' 'return'
      case 10195:                   // '{' 'throw'
      case 10323:                   // '{' 'try'
      case 10451:                   // '{' 'typeof'
        lookahead3W(29);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        break;
      }
      break;
    case 65:                        // 'f32'
    case 66:                        // 'f64'
    case 70:                        // 'i32'
    case 71:                        // 'i64'
      lookahead2W(0);               // Identifier | WhiteSpace^token
      switch (lk)
      {
      case 449:                     // 'f32' Identifier
      case 450:                     // 'f64' Identifier
      case 454:                     // 'i32' Identifier
      case 455:                     // 'i64' Identifier
        lookahead3W(45);            // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' |
                                    // '.' | '/' | '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' |
                                    // '>' | '>=' | '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' |
                                    // 'case' | 'catch' | 'continue' | 'default' | 'do' | 'else' | 'export' | 'f32' |
                                    // 'f64' | 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' |
                                    // 'include' | 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' |
                                    // 'while' | '{' | '|' | '|=' | '||' | '}' | '~'
        break;
      }
      break;
    case 4:                         // Null
    case 5:                         // True
    case 6:                         // False
    case 7:                         // Character
    case 8:                         // String
    case 9:                         // Integer
    case 10:                        // Complex
    case 11:                        // Real
      lookahead2W(44);              // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' |
                                    // '/' | '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' |
                                    // '>=' | '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' |
                                    // 'catch' | 'continue' | 'default' | 'do' | 'else' | 'export' | 'f32' | 'f64' |
                                    // 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' |
                                    // 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' |
                                    // '{' | '|' | '|=' | '||' | '}' | '~'
      switch (lk)
      {
      case 3716:                    // Null '++'
      case 4228:                    // Null '--'
      case 3717:                    // True '++'
      case 4229:                    // True '--'
      case 3718:                    // False '++'
      case 4230:                    // False '--'
      case 3719:                    // Character '++'
      case 4231:                    // Character '--'
      case 3720:                    // String '++'
      case 4232:                    // String '--'
      case 3721:                    // Integer '++'
      case 4233:                    // Integer '--'
      case 3722:                    // Complex '++'
      case 4234:                    // Complex '--'
      case 3723:                    // Real '++'
      case 4235:                    // Real '--'
        lookahead3W(44);            // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' |
                                    // '/' | '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' |
                                    // '>=' | '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' |
                                    // 'catch' | 'continue' | 'default' | 'do' | 'else' | 'export' | 'f32' | 'f64' |
                                    // 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' |
                                    // 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' |
                                    // '{' | '|' | '|=' | '||' | '}' | '~'
        break;
      }
      break;
    default:
      lk = l1;
    }
    if (lk != 15                    // '!'
     && lk != 28                    // '+'
     && lk != 29                    // '++'
     && lk != 32                    // '-'
     && lk != 33                    // '--'
     && lk != 88                    // '~'
     && lk != 131                   // Identifier END
     && lk != 132                   // Null END
     && lk != 133                   // True END
     && lk != 134                   // False END
     && lk != 135                   // Character END
     && lk != 136                   // String END
     && lk != 137                   // Integer END
     && lk != 138                   // Complex END
     && lk != 139                   // Real END
     && lk != 387                   // Identifier Identifier
     && lk != 388                   // Null Identifier
     && lk != 389                   // True Identifier
     && lk != 390                   // False Identifier
     && lk != 391                   // Character Identifier
     && lk != 392                   // String Identifier
     && lk != 393                   // Integer Identifier
     && lk != 394                   // Complex Identifier
     && lk != 395                   // Real Identifier
     && lk != 515                   // Identifier Null
     && lk != 516                   // Null Null
     && lk != 517                   // True Null
     && lk != 518                   // False Null
     && lk != 519                   // Character Null
     && lk != 520                   // String Null
     && lk != 521                   // Integer Null
     && lk != 522                   // Complex Null
     && lk != 523                   // Real Null
     && lk != 643                   // Identifier True
     && lk != 644                   // Null True
     && lk != 645                   // True True
     && lk != 646                   // False True
     && lk != 647                   // Character True
     && lk != 648                   // String True
     && lk != 649                   // Integer True
     && lk != 650                   // Complex True
     && lk != 651                   // Real True
     && lk != 771                   // Identifier False
     && lk != 772                   // Null False
     && lk != 773                   // True False
     && lk != 774                   // False False
     && lk != 775                   // Character False
     && lk != 776                   // String False
     && lk != 777                   // Integer False
     && lk != 778                   // Complex False
     && lk != 779                   // Real False
     && lk != 899                   // Identifier Character
     && lk != 900                   // Null Character
     && lk != 901                   // True Character
     && lk != 902                   // False Character
     && lk != 903                   // Character Character
     && lk != 904                   // String Character
     && lk != 905                   // Integer Character
     && lk != 906                   // Complex Character
     && lk != 907                   // Real Character
     && lk != 1027                  // Identifier String
     && lk != 1028                  // Null String
     && lk != 1029                  // True String
     && lk != 1030                  // False String
     && lk != 1031                  // Character String
     && lk != 1032                  // String String
     && lk != 1033                  // Integer String
     && lk != 1034                  // Complex String
     && lk != 1035                  // Real String
     && lk != 1155                  // Identifier Integer
     && lk != 1156                  // Null Integer
     && lk != 1157                  // True Integer
     && lk != 1158                  // False Integer
     && lk != 1159                  // Character Integer
     && lk != 1160                  // String Integer
     && lk != 1161                  // Integer Integer
     && lk != 1162                  // Complex Integer
     && lk != 1163                  // Real Integer
     && lk != 1283                  // Identifier Complex
     && lk != 1284                  // Null Complex
     && lk != 1285                  // True Complex
     && lk != 1286                  // False Complex
     && lk != 1287                  // Character Complex
     && lk != 1288                  // String Complex
     && lk != 1289                  // Integer Complex
     && lk != 1290                  // Complex Complex
     && lk != 1291                  // Real Complex
     && lk != 1411                  // Identifier Real
     && lk != 1412                  // Null Real
     && lk != 1413                  // True Real
     && lk != 1414                  // False Real
     && lk != 1415                  // Character Real
     && lk != 1416                  // String Real
     && lk != 1417                  // Integer Real
     && lk != 1418                  // Complex Real
     && lk != 1419                  // Real Real
     && lk != 1539                  // Identifier Comment
     && lk != 1540                  // Null Comment
     && lk != 1541                  // True Comment
     && lk != 1542                  // False Comment
     && lk != 1543                  // Character Comment
     && lk != 1544                  // String Comment
     && lk != 1545                  // Integer Comment
     && lk != 1546                  // Complex Comment
     && lk != 1547                  // Real Comment
     && lk != 1923                  // Identifier '!'
     && lk != 1924                  // Null '!'
     && lk != 1925                  // True '!'
     && lk != 1926                  // False '!'
     && lk != 1927                  // Character '!'
     && lk != 1928                  // String '!'
     && lk != 1929                  // Integer '!'
     && lk != 1930                  // Complex '!'
     && lk != 1931                  // Real '!'
     && lk != 2051                  // Identifier '!='
     && lk != 2052                  // Null '!='
     && lk != 2053                  // True '!='
     && lk != 2054                  // False '!='
     && lk != 2055                  // Character '!='
     && lk != 2056                  // String '!='
     && lk != 2057                  // Integer '!='
     && lk != 2058                  // Complex '!='
     && lk != 2059                  // Real '!='
     && lk != 2307                  // Identifier '%'
     && lk != 2308                  // Null '%'
     && lk != 2309                  // True '%'
     && lk != 2310                  // False '%'
     && lk != 2311                  // Character '%'
     && lk != 2312                  // String '%'
     && lk != 2313                  // Integer '%'
     && lk != 2314                  // Complex '%'
     && lk != 2315                  // Real '%'
     && lk != 2435                  // Identifier '%='
     && lk != 2436                  // Null '%='
     && lk != 2437                  // True '%='
     && lk != 2438                  // False '%='
     && lk != 2439                  // Character '%='
     && lk != 2440                  // String '%='
     && lk != 2441                  // Integer '%='
     && lk != 2442                  // Complex '%='
     && lk != 2443                  // Real '%='
     && lk != 2563                  // Identifier '&'
     && lk != 2564                  // Null '&'
     && lk != 2565                  // True '&'
     && lk != 2566                  // False '&'
     && lk != 2567                  // Character '&'
     && lk != 2568                  // String '&'
     && lk != 2569                  // Integer '&'
     && lk != 2570                  // Complex '&'
     && lk != 2571                  // Real '&'
     && lk != 2691                  // Identifier '&&'
     && lk != 2692                  // Null '&&'
     && lk != 2693                  // True '&&'
     && lk != 2694                  // False '&&'
     && lk != 2695                  // Character '&&'
     && lk != 2696                  // String '&&'
     && lk != 2697                  // Integer '&&'
     && lk != 2698                  // Complex '&&'
     && lk != 2699                  // Real '&&'
     && lk != 2819                  // Identifier '&='
     && lk != 2820                  // Null '&='
     && lk != 2821                  // True '&='
     && lk != 2822                  // False '&='
     && lk != 2823                  // Character '&='
     && lk != 2824                  // String '&='
     && lk != 2825                  // Integer '&='
     && lk != 2826                  // Complex '&='
     && lk != 2827                  // Real '&='
     && lk != 2948                  // Null '('
     && lk != 2949                  // True '('
     && lk != 2950                  // False '('
     && lk != 2951                  // Character '('
     && lk != 2952                  // String '('
     && lk != 2953                  // Integer '('
     && lk != 2954                  // Complex '('
     && lk != 2955                  // Real '('
     && lk != 3075                  // Identifier ')'
     && lk != 3076                  // Null ')'
     && lk != 3077                  // True ')'
     && lk != 3078                  // False ')'
     && lk != 3079                  // Character ')'
     && lk != 3080                  // String ')'
     && lk != 3081                  // Integer ')'
     && lk != 3082                  // Complex ')'
     && lk != 3083                  // Real ')'
     && lk != 3203                  // Identifier '*'
     && lk != 3204                  // Null '*'
     && lk != 3205                  // True '*'
     && lk != 3206                  // False '*'
     && lk != 3207                  // Character '*'
     && lk != 3208                  // String '*'
     && lk != 3209                  // Integer '*'
     && lk != 3210                  // Complex '*'
     && lk != 3211                  // Real '*'
     && lk != 3331                  // Identifier '**'
     && lk != 3332                  // Null '**'
     && lk != 3333                  // True '**'
     && lk != 3334                  // False '**'
     && lk != 3335                  // Character '**'
     && lk != 3336                  // String '**'
     && lk != 3337                  // Integer '**'
     && lk != 3338                  // Complex '**'
     && lk != 3339                  // Real '**'
     && lk != 3459                  // Identifier '*='
     && lk != 3460                  // Null '*='
     && lk != 3461                  // True '*='
     && lk != 3462                  // False '*='
     && lk != 3463                  // Character '*='
     && lk != 3464                  // String '*='
     && lk != 3465                  // Integer '*='
     && lk != 3466                  // Complex '*='
     && lk != 3467                  // Real '*='
     && lk != 3587                  // Identifier '+'
     && lk != 3588                  // Null '+'
     && lk != 3589                  // True '+'
     && lk != 3590                  // False '+'
     && lk != 3591                  // Character '+'
     && lk != 3592                  // String '+'
     && lk != 3593                  // Integer '+'
     && lk != 3594                  // Complex '+'
     && lk != 3595                  // Real '+'
     && lk != 3843                  // Identifier '+='
     && lk != 3844                  // Null '+='
     && lk != 3845                  // True '+='
     && lk != 3846                  // False '+='
     && lk != 3847                  // Character '+='
     && lk != 3848                  // String '+='
     && lk != 3849                  // Integer '+='
     && lk != 3850                  // Complex '+='
     && lk != 3851                  // Real '+='
     && lk != 3971                  // Identifier ','
     && lk != 3972                  // Null ','
     && lk != 3973                  // True ','
     && lk != 3974                  // False ','
     && lk != 3975                  // Character ','
     && lk != 3976                  // String ','
     && lk != 3977                  // Integer ','
     && lk != 3978                  // Complex ','
     && lk != 3979                  // Real ','
     && lk != 4099                  // Identifier '-'
     && lk != 4100                  // Null '-'
     && lk != 4101                  // True '-'
     && lk != 4102                  // False '-'
     && lk != 4103                  // Character '-'
     && lk != 4104                  // String '-'
     && lk != 4105                  // Integer '-'
     && lk != 4106                  // Complex '-'
     && lk != 4107                  // Real '-'
     && lk != 4355                  // Identifier '-='
     && lk != 4356                  // Null '-='
     && lk != 4357                  // True '-='
     && lk != 4358                  // False '-='
     && lk != 4359                  // Character '-='
     && lk != 4360                  // String '-='
     && lk != 4361                  // Integer '-='
     && lk != 4362                  // Complex '-='
     && lk != 4363                  // Real '-='
     && lk != 4611                  // Identifier '/'
     && lk != 4612                  // Null '/'
     && lk != 4613                  // True '/'
     && lk != 4614                  // False '/'
     && lk != 4615                  // Character '/'
     && lk != 4616                  // String '/'
     && lk != 4617                  // Integer '/'
     && lk != 4618                  // Complex '/'
     && lk != 4619                  // Real '/'
     && lk != 4739                  // Identifier '/='
     && lk != 4740                  // Null '/='
     && lk != 4741                  // True '/='
     && lk != 4742                  // False '/='
     && lk != 4743                  // Character '/='
     && lk != 4744                  // String '/='
     && lk != 4745                  // Integer '/='
     && lk != 4746                  // Complex '/='
     && lk != 4747                  // Real '/='
     && lk != 4867                  // Identifier ':'
     && lk != 4868                  // Null ':'
     && lk != 4869                  // True ':'
     && lk != 4870                  // False ':'
     && lk != 4871                  // Character ':'
     && lk != 4872                  // String ':'
     && lk != 4873                  // Integer ':'
     && lk != 4874                  // Complex ':'
     && lk != 4875                  // Real ':'
     && lk != 4995                  // Identifier ':='
     && lk != 4996                  // Null ':='
     && lk != 4997                  // True ':='
     && lk != 4998                  // False ':='
     && lk != 4999                  // Character ':='
     && lk != 5000                  // String ':='
     && lk != 5001                  // Integer ':='
     && lk != 5002                  // Complex ':='
     && lk != 5003                  // Real ':='
     && lk != 5123                  // Identifier ';'
     && lk != 5124                  // Null ';'
     && lk != 5125                  // True ';'
     && lk != 5126                  // False ';'
     && lk != 5127                  // Character ';'
     && lk != 5128                  // String ';'
     && lk != 5129                  // Integer ';'
     && lk != 5130                  // Complex ';'
     && lk != 5131                  // Real ';'
     && lk != 5251                  // Identifier '<'
     && lk != 5252                  // Null '<'
     && lk != 5253                  // True '<'
     && lk != 5254                  // False '<'
     && lk != 5255                  // Character '<'
     && lk != 5256                  // String '<'
     && lk != 5257                  // Integer '<'
     && lk != 5258                  // Complex '<'
     && lk != 5259                  // Real '<'
     && lk != 5379                  // Identifier '<<'
     && lk != 5380                  // Null '<<'
     && lk != 5381                  // True '<<'
     && lk != 5382                  // False '<<'
     && lk != 5383                  // Character '<<'
     && lk != 5384                  // String '<<'
     && lk != 5385                  // Integer '<<'
     && lk != 5386                  // Complex '<<'
     && lk != 5387                  // Real '<<'
     && lk != 5507                  // Identifier '<<='
     && lk != 5508                  // Null '<<='
     && lk != 5509                  // True '<<='
     && lk != 5510                  // False '<<='
     && lk != 5511                  // Character '<<='
     && lk != 5512                  // String '<<='
     && lk != 5513                  // Integer '<<='
     && lk != 5514                  // Complex '<<='
     && lk != 5515                  // Real '<<='
     && lk != 5635                  // Identifier '<='
     && lk != 5636                  // Null '<='
     && lk != 5637                  // True '<='
     && lk != 5638                  // False '<='
     && lk != 5639                  // Character '<='
     && lk != 5640                  // String '<='
     && lk != 5641                  // Integer '<='
     && lk != 5642                  // Complex '<='
     && lk != 5643                  // Real '<='
     && lk != 5763                  // Identifier '='
     && lk != 5764                  // Null '='
     && lk != 5765                  // True '='
     && lk != 5766                  // False '='
     && lk != 5767                  // Character '='
     && lk != 5768                  // String '='
     && lk != 5769                  // Integer '='
     && lk != 5770                  // Complex '='
     && lk != 5771                  // Real '='
     && lk != 5891                  // Identifier '=='
     && lk != 5892                  // Null '=='
     && lk != 5893                  // True '=='
     && lk != 5894                  // False '=='
     && lk != 5895                  // Character '=='
     && lk != 5896                  // String '=='
     && lk != 5897                  // Integer '=='
     && lk != 5898                  // Complex '=='
     && lk != 5899                  // Real '=='
     && lk != 6019                  // Identifier '>'
     && lk != 6020                  // Null '>'
     && lk != 6021                  // True '>'
     && lk != 6022                  // False '>'
     && lk != 6023                  // Character '>'
     && lk != 6024                  // String '>'
     && lk != 6025                  // Integer '>'
     && lk != 6026                  // Complex '>'
     && lk != 6027                  // Real '>'
     && lk != 6147                  // Identifier '>='
     && lk != 6148                  // Null '>='
     && lk != 6149                  // True '>='
     && lk != 6150                  // False '>='
     && lk != 6151                  // Character '>='
     && lk != 6152                  // String '>='
     && lk != 6153                  // Integer '>='
     && lk != 6154                  // Complex '>='
     && lk != 6155                  // Real '>='
     && lk != 6275                  // Identifier '>>'
     && lk != 6276                  // Null '>>'
     && lk != 6277                  // True '>>'
     && lk != 6278                  // False '>>'
     && lk != 6279                  // Character '>>'
     && lk != 6280                  // String '>>'
     && lk != 6281                  // Integer '>>'
     && lk != 6282                  // Complex '>>'
     && lk != 6283                  // Real '>>'
     && lk != 6403                  // Identifier '>>='
     && lk != 6404                  // Null '>>='
     && lk != 6405                  // True '>>='
     && lk != 6406                  // False '>>='
     && lk != 6407                  // Character '>>='
     && lk != 6408                  // String '>>='
     && lk != 6409                  // Integer '>>='
     && lk != 6410                  // Complex '>>='
     && lk != 6411                  // Real '>>='
     && lk != 6531                  // Identifier '?'
     && lk != 6532                  // Null '?'
     && lk != 6533                  // True '?'
     && lk != 6534                  // False '?'
     && lk != 6535                  // Character '?'
     && lk != 6536                  // String '?'
     && lk != 6537                  // Integer '?'
     && lk != 6538                  // Complex '?'
     && lk != 6539                  // Real '?'
     && lk != 6659                  // Identifier '?='
     && lk != 6660                  // Null '?='
     && lk != 6661                  // True '?='
     && lk != 6662                  // False '?='
     && lk != 6663                  // Character '?='
     && lk != 6664                  // String '?='
     && lk != 6665                  // Integer '?='
     && lk != 6666                  // Complex '?='
     && lk != 6667                  // Real '?='
     && lk != 6788                  // Null '['
     && lk != 6789                  // True '['
     && lk != 6790                  // False '['
     && lk != 6791                  // Character '['
     && lk != 6792                  // String '['
     && lk != 6793                  // Integer '['
     && lk != 6794                  // Complex '['
     && lk != 6795                  // Real '['
     && lk != 6915                  // Identifier ']'
     && lk != 6916                  // Null ']'
     && lk != 6917                  // True ']'
     && lk != 6918                  // False ']'
     && lk != 6919                  // Character ']'
     && lk != 6920                  // String ']'
     && lk != 6921                  // Integer ']'
     && lk != 6922                  // Complex ']'
     && lk != 6923                  // Real ']'
     && lk != 7043                  // Identifier '^'
     && lk != 7044                  // Null '^'
     && lk != 7045                  // True '^'
     && lk != 7046                  // False '^'
     && lk != 7047                  // Character '^'
     && lk != 7048                  // String '^'
     && lk != 7049                  // Integer '^'
     && lk != 7050                  // Complex '^'
     && lk != 7051                  // Real '^'
     && lk != 7171                  // Identifier '^='
     && lk != 7172                  // Null '^='
     && lk != 7173                  // True '^='
     && lk != 7174                  // False '^='
     && lk != 7175                  // Character '^='
     && lk != 7176                  // String '^='
     && lk != 7177                  // Integer '^='
     && lk != 7178                  // Complex '^='
     && lk != 7179                  // Real '^='
     && lk != 7299                  // Identifier 'break'
     && lk != 7300                  // Null 'break'
     && lk != 7301                  // True 'break'
     && lk != 7302                  // False 'break'
     && lk != 7303                  // Character 'break'
     && lk != 7304                  // String 'break'
     && lk != 7305                  // Integer 'break'
     && lk != 7306                  // Complex 'break'
     && lk != 7307                  // Real 'break'
     && lk != 7427                  // Identifier 'case'
     && lk != 7428                  // Null 'case'
     && lk != 7429                  // True 'case'
     && lk != 7430                  // False 'case'
     && lk != 7431                  // Character 'case'
     && lk != 7432                  // String 'case'
     && lk != 7433                  // Integer 'case'
     && lk != 7434                  // Complex 'case'
     && lk != 7435                  // Real 'case'
     && lk != 7555                  // Identifier 'catch'
     && lk != 7556                  // Null 'catch'
     && lk != 7557                  // True 'catch'
     && lk != 7558                  // False 'catch'
     && lk != 7559                  // Character 'catch'
     && lk != 7560                  // String 'catch'
     && lk != 7561                  // Integer 'catch'
     && lk != 7562                  // Complex 'catch'
     && lk != 7563                  // Real 'catch'
     && lk != 7683                  // Identifier 'continue'
     && lk != 7684                  // Null 'continue'
     && lk != 7685                  // True 'continue'
     && lk != 7686                  // False 'continue'
     && lk != 7687                  // Character 'continue'
     && lk != 7688                  // String 'continue'
     && lk != 7689                  // Integer 'continue'
     && lk != 7690                  // Complex 'continue'
     && lk != 7691                  // Real 'continue'
     && lk != 7811                  // Identifier 'default'
     && lk != 7812                  // Null 'default'
     && lk != 7813                  // True 'default'
     && lk != 7814                  // False 'default'
     && lk != 7815                  // Character 'default'
     && lk != 7816                  // String 'default'
     && lk != 7817                  // Integer 'default'
     && lk != 7818                  // Complex 'default'
     && lk != 7819                  // Real 'default'
     && lk != 7939                  // Identifier 'do'
     && lk != 7940                  // Null 'do'
     && lk != 7941                  // True 'do'
     && lk != 7942                  // False 'do'
     && lk != 7943                  // Character 'do'
     && lk != 7944                  // String 'do'
     && lk != 7945                  // Integer 'do'
     && lk != 7946                  // Complex 'do'
     && lk != 7947                  // Real 'do'
     && lk != 8067                  // Identifier 'else'
     && lk != 8068                  // Null 'else'
     && lk != 8069                  // True 'else'
     && lk != 8070                  // False 'else'
     && lk != 8071                  // Character 'else'
     && lk != 8072                  // String 'else'
     && lk != 8073                  // Integer 'else'
     && lk != 8074                  // Complex 'else'
     && lk != 8075                  // Real 'else'
     && lk != 8195                  // Identifier 'export'
     && lk != 8196                  // Null 'export'
     && lk != 8197                  // True 'export'
     && lk != 8198                  // False 'export'
     && lk != 8199                  // Character 'export'
     && lk != 8200                  // String 'export'
     && lk != 8201                  // Integer 'export'
     && lk != 8202                  // Complex 'export'
     && lk != 8203                  // Real 'export'
     && lk != 8323                  // Identifier 'f32'
     && lk != 8324                  // Null 'f32'
     && lk != 8325                  // True 'f32'
     && lk != 8326                  // False 'f32'
     && lk != 8327                  // Character 'f32'
     && lk != 8328                  // String 'f32'
     && lk != 8329                  // Integer 'f32'
     && lk != 8330                  // Complex 'f32'
     && lk != 8331                  // Real 'f32'
     && lk != 8451                  // Identifier 'f64'
     && lk != 8452                  // Null 'f64'
     && lk != 8453                  // True 'f64'
     && lk != 8454                  // False 'f64'
     && lk != 8455                  // Character 'f64'
     && lk != 8456                  // String 'f64'
     && lk != 8457                  // Integer 'f64'
     && lk != 8458                  // Complex 'f64'
     && lk != 8459                  // Real 'f64'
     && lk != 8579                  // Identifier 'for'
     && lk != 8580                  // Null 'for'
     && lk != 8581                  // True 'for'
     && lk != 8582                  // False 'for'
     && lk != 8583                  // Character 'for'
     && lk != 8584                  // String 'for'
     && lk != 8585                  // Integer 'for'
     && lk != 8586                  // Complex 'for'
     && lk != 8587                  // Real 'for'
     && lk != 8707                  // Identifier 'foreach'
     && lk != 8708                  // Null 'foreach'
     && lk != 8709                  // True 'foreach'
     && lk != 8710                  // False 'foreach'
     && lk != 8711                  // Character 'foreach'
     && lk != 8712                  // String 'foreach'
     && lk != 8713                  // Integer 'foreach'
     && lk != 8714                  // Complex 'foreach'
     && lk != 8715                  // Real 'foreach'
     && lk != 8835                  // Identifier 'global'
     && lk != 8836                  // Null 'global'
     && lk != 8837                  // True 'global'
     && lk != 8838                  // False 'global'
     && lk != 8839                  // Character 'global'
     && lk != 8840                  // String 'global'
     && lk != 8841                  // Integer 'global'
     && lk != 8842                  // Complex 'global'
     && lk != 8843                  // Real 'global'
     && lk != 8963                  // Identifier 'i32'
     && lk != 8964                  // Null 'i32'
     && lk != 8965                  // True 'i32'
     && lk != 8966                  // False 'i32'
     && lk != 8967                  // Character 'i32'
     && lk != 8968                  // String 'i32'
     && lk != 8969                  // Integer 'i32'
     && lk != 8970                  // Complex 'i32'
     && lk != 8971                  // Real 'i32'
     && lk != 9091                  // Identifier 'i64'
     && lk != 9092                  // Null 'i64'
     && lk != 9093                  // True 'i64'
     && lk != 9094                  // False 'i64'
     && lk != 9095                  // Character 'i64'
     && lk != 9096                  // String 'i64'
     && lk != 9097                  // Integer 'i64'
     && lk != 9098                  // Complex 'i64'
     && lk != 9099                  // Real 'i64'
     && lk != 9219                  // Identifier 'if'
     && lk != 9220                  // Null 'if'
     && lk != 9221                  // True 'if'
     && lk != 9222                  // False 'if'
     && lk != 9223                  // Character 'if'
     && lk != 9224                  // String 'if'
     && lk != 9225                  // Integer 'if'
     && lk != 9226                  // Complex 'if'
     && lk != 9227                  // Real 'if'
     && lk != 9347                  // Identifier 'import'
     && lk != 9348                  // Null 'import'
     && lk != 9349                  // True 'import'
     && lk != 9350                  // False 'import'
     && lk != 9351                  // Character 'import'
     && lk != 9352                  // String 'import'
     && lk != 9353                  // Integer 'import'
     && lk != 9354                  // Complex 'import'
     && lk != 9355                  // Real 'import'
     && lk != 9475                  // Identifier 'include'
     && lk != 9476                  // Null 'include'
     && lk != 9477                  // True 'include'
     && lk != 9478                  // False 'include'
     && lk != 9479                  // Character 'include'
     && lk != 9480                  // String 'include'
     && lk != 9481                  // Integer 'include'
     && lk != 9482                  // Complex 'include'
     && lk != 9483                  // Real 'include'
     && lk != 9603                  // Identifier 'local'
     && lk != 9604                  // Null 'local'
     && lk != 9605                  // True 'local'
     && lk != 9606                  // False 'local'
     && lk != 9607                  // Character 'local'
     && lk != 9608                  // String 'local'
     && lk != 9609                  // Integer 'local'
     && lk != 9610                  // Complex 'local'
     && lk != 9611                  // Real 'local'
     && lk != 9731                  // Identifier 'return'
     && lk != 9732                  // Null 'return'
     && lk != 9733                  // True 'return'
     && lk != 9734                  // False 'return'
     && lk != 9735                  // Character 'return'
     && lk != 9736                  // String 'return'
     && lk != 9737                  // Integer 'return'
     && lk != 9738                  // Complex 'return'
     && lk != 9739                  // Real 'return'
     && lk != 9859                  // Identifier 'switch'
     && lk != 9860                  // Null 'switch'
     && lk != 9861                  // True 'switch'
     && lk != 9862                  // False 'switch'
     && lk != 9863                  // Character 'switch'
     && lk != 9864                  // String 'switch'
     && lk != 9865                  // Integer 'switch'
     && lk != 9866                  // Complex 'switch'
     && lk != 9867                  // Real 'switch'
     && lk != 9987                  // Identifier 'test'
     && lk != 9988                  // Null 'test'
     && lk != 9989                  // True 'test'
     && lk != 9990                  // False 'test'
     && lk != 9991                  // Character 'test'
     && lk != 9992                  // String 'test'
     && lk != 9993                  // Integer 'test'
     && lk != 9994                  // Complex 'test'
     && lk != 9995                  // Real 'test'
     && lk != 10115                 // Identifier 'throw'
     && lk != 10116                 // Null 'throw'
     && lk != 10117                 // True 'throw'
     && lk != 10118                 // False 'throw'
     && lk != 10119                 // Character 'throw'
     && lk != 10120                 // String 'throw'
     && lk != 10121                 // Integer 'throw'
     && lk != 10122                 // Complex 'throw'
     && lk != 10123                 // Real 'throw'
     && lk != 10243                 // Identifier 'try'
     && lk != 10244                 // Null 'try'
     && lk != 10245                 // True 'try'
     && lk != 10246                 // False 'try'
     && lk != 10247                 // Character 'try'
     && lk != 10248                 // String 'try'
     && lk != 10249                 // Integer 'try'
     && lk != 10250                 // Complex 'try'
     && lk != 10251                 // Real 'try'
     && lk != 10371                 // Identifier 'typeof'
     && lk != 10372                 // Null 'typeof'
     && lk != 10373                 // True 'typeof'
     && lk != 10374                 // False 'typeof'
     && lk != 10375                 // Character 'typeof'
     && lk != 10376                 // String 'typeof'
     && lk != 10377                 // Integer 'typeof'
     && lk != 10378                 // Complex 'typeof'
     && lk != 10379                 // Real 'typeof'
     && lk != 10499                 // Identifier 'while'
     && lk != 10500                 // Null 'while'
     && lk != 10501                 // True 'while'
     && lk != 10502                 // False 'while'
     && lk != 10503                 // Character 'while'
     && lk != 10504                 // String 'while'
     && lk != 10505                 // Integer 'while'
     && lk != 10506                 // Complex 'while'
     && lk != 10507                 // Real 'while'
     && lk != 10627                 // Identifier '{'
     && lk != 10628                 // Null '{'
     && lk != 10629                 // True '{'
     && lk != 10630                 // False '{'
     && lk != 10631                 // Character '{'
     && lk != 10632                 // String '{'
     && lk != 10633                 // Integer '{'
     && lk != 10634                 // Complex '{'
     && lk != 10635                 // Real '{'
     && lk != 10755                 // Identifier '|'
     && lk != 10756                 // Null '|'
     && lk != 10757                 // True '|'
     && lk != 10758                 // False '|'
     && lk != 10759                 // Character '|'
     && lk != 10760                 // String '|'
     && lk != 10761                 // Integer '|'
     && lk != 10762                 // Complex '|'
     && lk != 10763                 // Real '|'
     && lk != 10883                 // Identifier '|='
     && lk != 10884                 // Null '|='
     && lk != 10885                 // True '|='
     && lk != 10886                 // False '|='
     && lk != 10887                 // Character '|='
     && lk != 10888                 // String '|='
     && lk != 10889                 // Integer '|='
     && lk != 10890                 // Complex '|='
     && lk != 10891                 // Real '|='
     && lk != 11011                 // Identifier '||'
     && lk != 11012                 // Null '||'
     && lk != 11013                 // True '||'
     && lk != 11014                 // False '||'
     && lk != 11015                 // Character '||'
     && lk != 11016                 // String '||'
     && lk != 11017                 // Integer '||'
     && lk != 11018                 // Complex '||'
     && lk != 11019                 // Real '||'
     && lk != 11139                 // Identifier '}'
     && lk != 11140                 // Null '}'
     && lk != 11141                 // True '}'
     && lk != 11142                 // False '}'
     && lk != 11143                 // Character '}'
     && lk != 11144                 // String '}'
     && lk != 11145                 // Integer '}'
     && lk != 11146                 // Complex '}'
     && lk != 11147                 // Real '}'
     && lk != 11267                 // Identifier '~'
     && lk != 11268                 // Null '~'
     && lk != 11269                 // True '~'
     && lk != 11270                 // False '~'
     && lk != 11271                 // Character '~'
     && lk != 11272                 // String '~'
     && lk != 11273                 // Integer '~'
     && lk != 11274                 // Complex '~'
     && lk != 11275                 // Real '~'
     && lk != 16833                 // 'f32' Identifier END
     && lk != 16834                 // 'f64' Identifier END
     && lk != 16838                 // 'i32' Identifier END
     && lk != 16839                 // 'i64' Identifier END
     && lk != 20099                 // Identifier '++' END
     && lk != 20100                 // Null '++' END
     && lk != 20101                 // True '++' END
     && lk != 20102                 // False '++' END
     && lk != 20103                 // Character '++' END
     && lk != 20104                 // String '++' END
     && lk != 20105                 // Integer '++' END
     && lk != 20106                 // Complex '++' END
     && lk != 20107                 // Real '++' END
     && lk != 20611                 // Identifier '--' END
     && lk != 20612                 // Null '--' END
     && lk != 20613                 // True '--' END
     && lk != 20614                 // False '--' END
     && lk != 20615                 // Character '--' END
     && lk != 20616                 // String '--' END
     && lk != 20617                 // Integer '--' END
     && lk != 20618                 // Complex '--' END
     && lk != 20619                 // Real '--' END
     && lk != 23349                 // '[' ']' END
     && lk != 27603                 // '{' '}' END
     && lk != 49601                 // 'f32' Identifier Identifier
     && lk != 49602                 // 'f64' Identifier Identifier
     && lk != 49606                 // 'i32' Identifier Identifier
     && lk != 49607                 // 'i64' Identifier Identifier
     && lk != 56117                 // '[' ']' Identifier
     && lk != 60371                 // '{' '}' Identifier
     && lk != 65985                 // 'f32' Identifier Null
     && lk != 65986                 // 'f64' Identifier Null
     && lk != 65990                 // 'i32' Identifier Null
     && lk != 65991                 // 'i64' Identifier Null
     && lk != 72501                 // '[' ']' Null
     && lk != 76755                 // '{' '}' Null
     && lk != 82369                 // 'f32' Identifier True
     && lk != 82370                 // 'f64' Identifier True
     && lk != 82374                 // 'i32' Identifier True
     && lk != 82375                 // 'i64' Identifier True
     && lk != 88885                 // '[' ']' True
     && lk != 93139                 // '{' '}' True
     && lk != 98753                 // 'f32' Identifier False
     && lk != 98754                 // 'f64' Identifier False
     && lk != 98758                 // 'i32' Identifier False
     && lk != 98759                 // 'i64' Identifier False
     && lk != 105269                // '[' ']' False
     && lk != 109523                // '{' '}' False
     && lk != 115137                // 'f32' Identifier Character
     && lk != 115138                // 'f64' Identifier Character
     && lk != 115142                // 'i32' Identifier Character
     && lk != 115143                // 'i64' Identifier Character
     && lk != 121653                // '[' ']' Character
     && lk != 125907                // '{' '}' Character
     && lk != 131521                // 'f32' Identifier String
     && lk != 131522                // 'f64' Identifier String
     && lk != 131526                // 'i32' Identifier String
     && lk != 131527                // 'i64' Identifier String
     && lk != 138037                // '[' ']' String
     && lk != 142291                // '{' '}' String
     && lk != 147905                // 'f32' Identifier Integer
     && lk != 147906                // 'f64' Identifier Integer
     && lk != 147910                // 'i32' Identifier Integer
     && lk != 147911                // 'i64' Identifier Integer
     && lk != 154421                // '[' ']' Integer
     && lk != 158675                // '{' '}' Integer
     && lk != 164289                // 'f32' Identifier Complex
     && lk != 164290                // 'f64' Identifier Complex
     && lk != 164294                // 'i32' Identifier Complex
     && lk != 164295                // 'i64' Identifier Complex
     && lk != 170805                // '[' ']' Complex
     && lk != 175059                // '{' '}' Complex
     && lk != 180673                // 'f32' Identifier Real
     && lk != 180674                // 'f64' Identifier Real
     && lk != 180678                // 'i32' Identifier Real
     && lk != 180679                // 'i64' Identifier Real
     && lk != 187189                // '[' ']' Real
     && lk != 191443                // '{' '}' Real
     && lk != 197057                // 'f32' Identifier Comment
     && lk != 197058                // 'f64' Identifier Comment
     && lk != 197062                // 'i32' Identifier Comment
     && lk != 197063                // 'i64' Identifier Comment
     && lk != 200323                // Identifier '++' Comment
     && lk != 200324                // Null '++' Comment
     && lk != 200325                // True '++' Comment
     && lk != 200326                // False '++' Comment
     && lk != 200327                // Character '++' Comment
     && lk != 200328                // String '++' Comment
     && lk != 200329                // Integer '++' Comment
     && lk != 200330                // Complex '++' Comment
     && lk != 200331                // Real '++' Comment
     && lk != 200835                // Identifier '--' Comment
     && lk != 200836                // Null '--' Comment
     && lk != 200837                // True '--' Comment
     && lk != 200838                // False '--' Comment
     && lk != 200839                // Character '--' Comment
     && lk != 200840                // String '--' Comment
     && lk != 200841                // Integer '--' Comment
     && lk != 200842                // Complex '--' Comment
     && lk != 200843                // Real '--' Comment
     && lk != 203573                // '[' ']' Comment
     && lk != 207827                // '{' '}' Comment
     && lk != 246209                // 'f32' Identifier '!'
     && lk != 246210                // 'f64' Identifier '!'
     && lk != 246214                // 'i32' Identifier '!'
     && lk != 246215                // 'i64' Identifier '!'
     && lk != 249475                // Identifier '++' '!'
     && lk != 249476                // Null '++' '!'
     && lk != 249477                // True '++' '!'
     && lk != 249478                // False '++' '!'
     && lk != 249479                // Character '++' '!'
     && lk != 249480                // String '++' '!'
     && lk != 249481                // Integer '++' '!'
     && lk != 249482                // Complex '++' '!'
     && lk != 249483                // Real '++' '!'
     && lk != 249987                // Identifier '--' '!'
     && lk != 249988                // Null '--' '!'
     && lk != 249989                // True '--' '!'
     && lk != 249990                // False '--' '!'
     && lk != 249991                // Character '--' '!'
     && lk != 249992                // String '--' '!'
     && lk != 249993                // Integer '--' '!'
     && lk != 249994                // Complex '--' '!'
     && lk != 249995                // Real '--' '!'
     && lk != 252725                // '[' ']' '!'
     && lk != 256979                // '{' '}' '!'
     && lk != 262593                // 'f32' Identifier '!='
     && lk != 262594                // 'f64' Identifier '!='
     && lk != 262598                // 'i32' Identifier '!='
     && lk != 262599                // 'i64' Identifier '!='
     && lk != 265859                // Identifier '++' '!='
     && lk != 265860                // Null '++' '!='
     && lk != 265861                // True '++' '!='
     && lk != 265862                // False '++' '!='
     && lk != 265863                // Character '++' '!='
     && lk != 265864                // String '++' '!='
     && lk != 265865                // Integer '++' '!='
     && lk != 265866                // Complex '++' '!='
     && lk != 265867                // Real '++' '!='
     && lk != 266371                // Identifier '--' '!='
     && lk != 266372                // Null '--' '!='
     && lk != 266373                // True '--' '!='
     && lk != 266374                // False '--' '!='
     && lk != 266375                // Character '--' '!='
     && lk != 266376                // String '--' '!='
     && lk != 266377                // Integer '--' '!='
     && lk != 266378                // Complex '--' '!='
     && lk != 266379                // Real '--' '!='
     && lk != 269109                // '[' ']' '!='
     && lk != 273363                // '{' '}' '!='
     && lk != 295361                // 'f32' Identifier '%'
     && lk != 295362                // 'f64' Identifier '%'
     && lk != 295366                // 'i32' Identifier '%'
     && lk != 295367                // 'i64' Identifier '%'
     && lk != 298627                // Identifier '++' '%'
     && lk != 298628                // Null '++' '%'
     && lk != 298629                // True '++' '%'
     && lk != 298630                // False '++' '%'
     && lk != 298631                // Character '++' '%'
     && lk != 298632                // String '++' '%'
     && lk != 298633                // Integer '++' '%'
     && lk != 298634                // Complex '++' '%'
     && lk != 298635                // Real '++' '%'
     && lk != 299139                // Identifier '--' '%'
     && lk != 299140                // Null '--' '%'
     && lk != 299141                // True '--' '%'
     && lk != 299142                // False '--' '%'
     && lk != 299143                // Character '--' '%'
     && lk != 299144                // String '--' '%'
     && lk != 299145                // Integer '--' '%'
     && lk != 299146                // Complex '--' '%'
     && lk != 299147                // Real '--' '%'
     && lk != 301877                // '[' ']' '%'
     && lk != 306131                // '{' '}' '%'
     && lk != 311745                // 'f32' Identifier '%='
     && lk != 311746                // 'f64' Identifier '%='
     && lk != 311750                // 'i32' Identifier '%='
     && lk != 311751                // 'i64' Identifier '%='
     && lk != 315011                // Identifier '++' '%='
     && lk != 315012                // Null '++' '%='
     && lk != 315013                // True '++' '%='
     && lk != 315014                // False '++' '%='
     && lk != 315015                // Character '++' '%='
     && lk != 315016                // String '++' '%='
     && lk != 315017                // Integer '++' '%='
     && lk != 315018                // Complex '++' '%='
     && lk != 315019                // Real '++' '%='
     && lk != 315523                // Identifier '--' '%='
     && lk != 315524                // Null '--' '%='
     && lk != 315525                // True '--' '%='
     && lk != 315526                // False '--' '%='
     && lk != 315527                // Character '--' '%='
     && lk != 315528                // String '--' '%='
     && lk != 315529                // Integer '--' '%='
     && lk != 315530                // Complex '--' '%='
     && lk != 315531                // Real '--' '%='
     && lk != 318261                // '[' ']' '%='
     && lk != 322515                // '{' '}' '%='
     && lk != 328129                // 'f32' Identifier '&'
     && lk != 328130                // 'f64' Identifier '&'
     && lk != 328134                // 'i32' Identifier '&'
     && lk != 328135                // 'i64' Identifier '&'
     && lk != 331395                // Identifier '++' '&'
     && lk != 331396                // Null '++' '&'
     && lk != 331397                // True '++' '&'
     && lk != 331398                // False '++' '&'
     && lk != 331399                // Character '++' '&'
     && lk != 331400                // String '++' '&'
     && lk != 331401                // Integer '++' '&'
     && lk != 331402                // Complex '++' '&'
     && lk != 331403                // Real '++' '&'
     && lk != 331907                // Identifier '--' '&'
     && lk != 331908                // Null '--' '&'
     && lk != 331909                // True '--' '&'
     && lk != 331910                // False '--' '&'
     && lk != 331911                // Character '--' '&'
     && lk != 331912                // String '--' '&'
     && lk != 331913                // Integer '--' '&'
     && lk != 331914                // Complex '--' '&'
     && lk != 331915                // Real '--' '&'
     && lk != 334645                // '[' ']' '&'
     && lk != 338899                // '{' '}' '&'
     && lk != 344513                // 'f32' Identifier '&&'
     && lk != 344514                // 'f64' Identifier '&&'
     && lk != 344518                // 'i32' Identifier '&&'
     && lk != 344519                // 'i64' Identifier '&&'
     && lk != 347779                // Identifier '++' '&&'
     && lk != 347780                // Null '++' '&&'
     && lk != 347781                // True '++' '&&'
     && lk != 347782                // False '++' '&&'
     && lk != 347783                // Character '++' '&&'
     && lk != 347784                // String '++' '&&'
     && lk != 347785                // Integer '++' '&&'
     && lk != 347786                // Complex '++' '&&'
     && lk != 347787                // Real '++' '&&'
     && lk != 348291                // Identifier '--' '&&'
     && lk != 348292                // Null '--' '&&'
     && lk != 348293                // True '--' '&&'
     && lk != 348294                // False '--' '&&'
     && lk != 348295                // Character '--' '&&'
     && lk != 348296                // String '--' '&&'
     && lk != 348297                // Integer '--' '&&'
     && lk != 348298                // Complex '--' '&&'
     && lk != 348299                // Real '--' '&&'
     && lk != 351029                // '[' ']' '&&'
     && lk != 355283                // '{' '}' '&&'
     && lk != 360897                // 'f32' Identifier '&='
     && lk != 360898                // 'f64' Identifier '&='
     && lk != 360902                // 'i32' Identifier '&='
     && lk != 360903                // 'i64' Identifier '&='
     && lk != 364163                // Identifier '++' '&='
     && lk != 364164                // Null '++' '&='
     && lk != 364165                // True '++' '&='
     && lk != 364166                // False '++' '&='
     && lk != 364167                // Character '++' '&='
     && lk != 364168                // String '++' '&='
     && lk != 364169                // Integer '++' '&='
     && lk != 364170                // Complex '++' '&='
     && lk != 364171                // Real '++' '&='
     && lk != 364675                // Identifier '--' '&='
     && lk != 364676                // Null '--' '&='
     && lk != 364677                // True '--' '&='
     && lk != 364678                // False '--' '&='
     && lk != 364679                // Character '--' '&='
     && lk != 364680                // String '--' '&='
     && lk != 364681                // Integer '--' '&='
     && lk != 364682                // Complex '--' '&='
     && lk != 364683                // Real '--' '&='
     && lk != 367413                // '[' ']' '&='
     && lk != 371667                // '{' '}' '&='
     && lk != 383797                // '[' ']' '('
     && lk != 388051                // '{' '}' '('
     && lk != 393665                // 'f32' Identifier ')'
     && lk != 393666                // 'f64' Identifier ')'
     && lk != 393670                // 'i32' Identifier ')'
     && lk != 393671                // 'i64' Identifier ')'
     && lk != 396931                // Identifier '++' ')'
     && lk != 396932                // Null '++' ')'
     && lk != 396933                // True '++' ')'
     && lk != 396934                // False '++' ')'
     && lk != 396935                // Character '++' ')'
     && lk != 396936                // String '++' ')'
     && lk != 396937                // Integer '++' ')'
     && lk != 396938                // Complex '++' ')'
     && lk != 396939                // Real '++' ')'
     && lk != 397443                // Identifier '--' ')'
     && lk != 397444                // Null '--' ')'
     && lk != 397445                // True '--' ')'
     && lk != 397446                // False '--' ')'
     && lk != 397447                // Character '--' ')'
     && lk != 397448                // String '--' ')'
     && lk != 397449                // Integer '--' ')'
     && lk != 397450                // Complex '--' ')'
     && lk != 397451                // Real '--' ')'
     && lk != 400181                // '[' ']' ')'
     && lk != 404435                // '{' '}' ')'
     && lk != 410049                // 'f32' Identifier '*'
     && lk != 410050                // 'f64' Identifier '*'
     && lk != 410054                // 'i32' Identifier '*'
     && lk != 410055                // 'i64' Identifier '*'
     && lk != 413315                // Identifier '++' '*'
     && lk != 413316                // Null '++' '*'
     && lk != 413317                // True '++' '*'
     && lk != 413318                // False '++' '*'
     && lk != 413319                // Character '++' '*'
     && lk != 413320                // String '++' '*'
     && lk != 413321                // Integer '++' '*'
     && lk != 413322                // Complex '++' '*'
     && lk != 413323                // Real '++' '*'
     && lk != 413827                // Identifier '--' '*'
     && lk != 413828                // Null '--' '*'
     && lk != 413829                // True '--' '*'
     && lk != 413830                // False '--' '*'
     && lk != 413831                // Character '--' '*'
     && lk != 413832                // String '--' '*'
     && lk != 413833                // Integer '--' '*'
     && lk != 413834                // Complex '--' '*'
     && lk != 413835                // Real '--' '*'
     && lk != 416565                // '[' ']' '*'
     && lk != 420819                // '{' '}' '*'
     && lk != 426433                // 'f32' Identifier '**'
     && lk != 426434                // 'f64' Identifier '**'
     && lk != 426438                // 'i32' Identifier '**'
     && lk != 426439                // 'i64' Identifier '**'
     && lk != 429699                // Identifier '++' '**'
     && lk != 429700                // Null '++' '**'
     && lk != 429701                // True '++' '**'
     && lk != 429702                // False '++' '**'
     && lk != 429703                // Character '++' '**'
     && lk != 429704                // String '++' '**'
     && lk != 429705                // Integer '++' '**'
     && lk != 429706                // Complex '++' '**'
     && lk != 429707                // Real '++' '**'
     && lk != 430211                // Identifier '--' '**'
     && lk != 430212                // Null '--' '**'
     && lk != 430213                // True '--' '**'
     && lk != 430214                // False '--' '**'
     && lk != 430215                // Character '--' '**'
     && lk != 430216                // String '--' '**'
     && lk != 430217                // Integer '--' '**'
     && lk != 430218                // Complex '--' '**'
     && lk != 430219                // Real '--' '**'
     && lk != 432949                // '[' ']' '**'
     && lk != 437203                // '{' '}' '**'
     && lk != 442817                // 'f32' Identifier '*='
     && lk != 442818                // 'f64' Identifier '*='
     && lk != 442822                // 'i32' Identifier '*='
     && lk != 442823                // 'i64' Identifier '*='
     && lk != 446083                // Identifier '++' '*='
     && lk != 446084                // Null '++' '*='
     && lk != 446085                // True '++' '*='
     && lk != 446086                // False '++' '*='
     && lk != 446087                // Character '++' '*='
     && lk != 446088                // String '++' '*='
     && lk != 446089                // Integer '++' '*='
     && lk != 446090                // Complex '++' '*='
     && lk != 446091                // Real '++' '*='
     && lk != 446595                // Identifier '--' '*='
     && lk != 446596                // Null '--' '*='
     && lk != 446597                // True '--' '*='
     && lk != 446598                // False '--' '*='
     && lk != 446599                // Character '--' '*='
     && lk != 446600                // String '--' '*='
     && lk != 446601                // Integer '--' '*='
     && lk != 446602                // Complex '--' '*='
     && lk != 446603                // Real '--' '*='
     && lk != 449333                // '[' ']' '*='
     && lk != 453587                // '{' '}' '*='
     && lk != 459201                // 'f32' Identifier '+'
     && lk != 459202                // 'f64' Identifier '+'
     && lk != 459206                // 'i32' Identifier '+'
     && lk != 459207                // 'i64' Identifier '+'
     && lk != 462467                // Identifier '++' '+'
     && lk != 462468                // Null '++' '+'
     && lk != 462469                // True '++' '+'
     && lk != 462470                // False '++' '+'
     && lk != 462471                // Character '++' '+'
     && lk != 462472                // String '++' '+'
     && lk != 462473                // Integer '++' '+'
     && lk != 462474                // Complex '++' '+'
     && lk != 462475                // Real '++' '+'
     && lk != 462979                // Identifier '--' '+'
     && lk != 462980                // Null '--' '+'
     && lk != 462981                // True '--' '+'
     && lk != 462982                // False '--' '+'
     && lk != 462983                // Character '--' '+'
     && lk != 462984                // String '--' '+'
     && lk != 462985                // Integer '--' '+'
     && lk != 462986                // Complex '--' '+'
     && lk != 462987                // Real '--' '+'
     && lk != 465717                // '[' ']' '+'
     && lk != 469971                // '{' '}' '+'
     && lk != 478851                // Identifier '++' '++'
     && lk != 478852                // Null '++' '++'
     && lk != 478853                // True '++' '++'
     && lk != 478854                // False '++' '++'
     && lk != 478855                // Character '++' '++'
     && lk != 478856                // String '++' '++'
     && lk != 478857                // Integer '++' '++'
     && lk != 478858                // Complex '++' '++'
     && lk != 478859                // Real '++' '++'
     && lk != 479363                // Identifier '--' '++'
     && lk != 479364                // Null '--' '++'
     && lk != 479365                // True '--' '++'
     && lk != 479366                // False '--' '++'
     && lk != 479367                // Character '--' '++'
     && lk != 479368                // String '--' '++'
     && lk != 479369                // Integer '--' '++'
     && lk != 479370                // Complex '--' '++'
     && lk != 479371                // Real '--' '++'
     && lk != 491969                // 'f32' Identifier '+='
     && lk != 491970                // 'f64' Identifier '+='
     && lk != 491974                // 'i32' Identifier '+='
     && lk != 491975                // 'i64' Identifier '+='
     && lk != 495235                // Identifier '++' '+='
     && lk != 495236                // Null '++' '+='
     && lk != 495237                // True '++' '+='
     && lk != 495238                // False '++' '+='
     && lk != 495239                // Character '++' '+='
     && lk != 495240                // String '++' '+='
     && lk != 495241                // Integer '++' '+='
     && lk != 495242                // Complex '++' '+='
     && lk != 495243                // Real '++' '+='
     && lk != 495747                // Identifier '--' '+='
     && lk != 495748                // Null '--' '+='
     && lk != 495749                // True '--' '+='
     && lk != 495750                // False '--' '+='
     && lk != 495751                // Character '--' '+='
     && lk != 495752                // String '--' '+='
     && lk != 495753                // Integer '--' '+='
     && lk != 495754                // Complex '--' '+='
     && lk != 495755                // Real '--' '+='
     && lk != 498485                // '[' ']' '+='
     && lk != 502739                // '{' '}' '+='
     && lk != 508353                // 'f32' Identifier ','
     && lk != 508354                // 'f64' Identifier ','
     && lk != 508358                // 'i32' Identifier ','
     && lk != 508359                // 'i64' Identifier ','
     && lk != 511619                // Identifier '++' ','
     && lk != 511620                // Null '++' ','
     && lk != 511621                // True '++' ','
     && lk != 511622                // False '++' ','
     && lk != 511623                // Character '++' ','
     && lk != 511624                // String '++' ','
     && lk != 511625                // Integer '++' ','
     && lk != 511626                // Complex '++' ','
     && lk != 511627                // Real '++' ','
     && lk != 512131                // Identifier '--' ','
     && lk != 512132                // Null '--' ','
     && lk != 512133                // True '--' ','
     && lk != 512134                // False '--' ','
     && lk != 512135                // Character '--' ','
     && lk != 512136                // String '--' ','
     && lk != 512137                // Integer '--' ','
     && lk != 512138                // Complex '--' ','
     && lk != 512139                // Real '--' ','
     && lk != 514869                // '[' ']' ','
     && lk != 519123                // '{' '}' ','
     && lk != 524737                // 'f32' Identifier '-'
     && lk != 524738                // 'f64' Identifier '-'
     && lk != 524742                // 'i32' Identifier '-'
     && lk != 524743                // 'i64' Identifier '-'
     && lk != 528003                // Identifier '++' '-'
     && lk != 528004                // Null '++' '-'
     && lk != 528005                // True '++' '-'
     && lk != 528006                // False '++' '-'
     && lk != 528007                // Character '++' '-'
     && lk != 528008                // String '++' '-'
     && lk != 528009                // Integer '++' '-'
     && lk != 528010                // Complex '++' '-'
     && lk != 528011                // Real '++' '-'
     && lk != 528515                // Identifier '--' '-'
     && lk != 528516                // Null '--' '-'
     && lk != 528517                // True '--' '-'
     && lk != 528518                // False '--' '-'
     && lk != 528519                // Character '--' '-'
     && lk != 528520                // String '--' '-'
     && lk != 528521                // Integer '--' '-'
     && lk != 528522                // Complex '--' '-'
     && lk != 528523                // Real '--' '-'
     && lk != 531253                // '[' ']' '-'
     && lk != 535507                // '{' '}' '-'
     && lk != 544387                // Identifier '++' '--'
     && lk != 544388                // Null '++' '--'
     && lk != 544389                // True '++' '--'
     && lk != 544390                // False '++' '--'
     && lk != 544391                // Character '++' '--'
     && lk != 544392                // String '++' '--'
     && lk != 544393                // Integer '++' '--'
     && lk != 544394                // Complex '++' '--'
     && lk != 544395                // Real '++' '--'
     && lk != 544899                // Identifier '--' '--'
     && lk != 544900                // Null '--' '--'
     && lk != 544901                // True '--' '--'
     && lk != 544902                // False '--' '--'
     && lk != 544903                // Character '--' '--'
     && lk != 544904                // String '--' '--'
     && lk != 544905                // Integer '--' '--'
     && lk != 544906                // Complex '--' '--'
     && lk != 544907                // Real '--' '--'
     && lk != 557505                // 'f32' Identifier '-='
     && lk != 557506                // 'f64' Identifier '-='
     && lk != 557510                // 'i32' Identifier '-='
     && lk != 557511                // 'i64' Identifier '-='
     && lk != 560771                // Identifier '++' '-='
     && lk != 560772                // Null '++' '-='
     && lk != 560773                // True '++' '-='
     && lk != 560774                // False '++' '-='
     && lk != 560775                // Character '++' '-='
     && lk != 560776                // String '++' '-='
     && lk != 560777                // Integer '++' '-='
     && lk != 560778                // Complex '++' '-='
     && lk != 560779                // Real '++' '-='
     && lk != 561283                // Identifier '--' '-='
     && lk != 561284                // Null '--' '-='
     && lk != 561285                // True '--' '-='
     && lk != 561286                // False '--' '-='
     && lk != 561287                // Character '--' '-='
     && lk != 561288                // String '--' '-='
     && lk != 561289                // Integer '--' '-='
     && lk != 561290                // Complex '--' '-='
     && lk != 561291                // Real '--' '-='
     && lk != 564021                // '[' ']' '-='
     && lk != 568275                // '{' '}' '-='
     && lk != 590273                // 'f32' Identifier '/'
     && lk != 590274                // 'f64' Identifier '/'
     && lk != 590278                // 'i32' Identifier '/'
     && lk != 590279                // 'i64' Identifier '/'
     && lk != 593539                // Identifier '++' '/'
     && lk != 593540                // Null '++' '/'
     && lk != 593541                // True '++' '/'
     && lk != 593542                // False '++' '/'
     && lk != 593543                // Character '++' '/'
     && lk != 593544                // String '++' '/'
     && lk != 593545                // Integer '++' '/'
     && lk != 593546                // Complex '++' '/'
     && lk != 593547                // Real '++' '/'
     && lk != 594051                // Identifier '--' '/'
     && lk != 594052                // Null '--' '/'
     && lk != 594053                // True '--' '/'
     && lk != 594054                // False '--' '/'
     && lk != 594055                // Character '--' '/'
     && lk != 594056                // String '--' '/'
     && lk != 594057                // Integer '--' '/'
     && lk != 594058                // Complex '--' '/'
     && lk != 594059                // Real '--' '/'
     && lk != 596789                // '[' ']' '/'
     && lk != 601043                // '{' '}' '/'
     && lk != 606657                // 'f32' Identifier '/='
     && lk != 606658                // 'f64' Identifier '/='
     && lk != 606662                // 'i32' Identifier '/='
     && lk != 606663                // 'i64' Identifier '/='
     && lk != 609923                // Identifier '++' '/='
     && lk != 609924                // Null '++' '/='
     && lk != 609925                // True '++' '/='
     && lk != 609926                // False '++' '/='
     && lk != 609927                // Character '++' '/='
     && lk != 609928                // String '++' '/='
     && lk != 609929                // Integer '++' '/='
     && lk != 609930                // Complex '++' '/='
     && lk != 609931                // Real '++' '/='
     && lk != 610435                // Identifier '--' '/='
     && lk != 610436                // Null '--' '/='
     && lk != 610437                // True '--' '/='
     && lk != 610438                // False '--' '/='
     && lk != 610439                // Character '--' '/='
     && lk != 610440                // String '--' '/='
     && lk != 610441                // Integer '--' '/='
     && lk != 610442                // Complex '--' '/='
     && lk != 610443                // Real '--' '/='
     && lk != 613173                // '[' ']' '/='
     && lk != 617427                // '{' '}' '/='
     && lk != 623041                // 'f32' Identifier ':'
     && lk != 623042                // 'f64' Identifier ':'
     && lk != 623046                // 'i32' Identifier ':'
     && lk != 623047                // 'i64' Identifier ':'
     && lk != 626307                // Identifier '++' ':'
     && lk != 626308                // Null '++' ':'
     && lk != 626309                // True '++' ':'
     && lk != 626310                // False '++' ':'
     && lk != 626311                // Character '++' ':'
     && lk != 626312                // String '++' ':'
     && lk != 626313                // Integer '++' ':'
     && lk != 626314                // Complex '++' ':'
     && lk != 626315                // Real '++' ':'
     && lk != 626819                // Identifier '--' ':'
     && lk != 626820                // Null '--' ':'
     && lk != 626821                // True '--' ':'
     && lk != 626822                // False '--' ':'
     && lk != 626823                // Character '--' ':'
     && lk != 626824                // String '--' ':'
     && lk != 626825                // Integer '--' ':'
     && lk != 626826                // Complex '--' ':'
     && lk != 626827                // Real '--' ':'
     && lk != 629557                // '[' ']' ':'
     && lk != 633811                // '{' '}' ':'
     && lk != 639425                // 'f32' Identifier ':='
     && lk != 639426                // 'f64' Identifier ':='
     && lk != 639430                // 'i32' Identifier ':='
     && lk != 639431                // 'i64' Identifier ':='
     && lk != 642691                // Identifier '++' ':='
     && lk != 642692                // Null '++' ':='
     && lk != 642693                // True '++' ':='
     && lk != 642694                // False '++' ':='
     && lk != 642695                // Character '++' ':='
     && lk != 642696                // String '++' ':='
     && lk != 642697                // Integer '++' ':='
     && lk != 642698                // Complex '++' ':='
     && lk != 642699                // Real '++' ':='
     && lk != 643203                // Identifier '--' ':='
     && lk != 643204                // Null '--' ':='
     && lk != 643205                // True '--' ':='
     && lk != 643206                // False '--' ':='
     && lk != 643207                // Character '--' ':='
     && lk != 643208                // String '--' ':='
     && lk != 643209                // Integer '--' ':='
     && lk != 643210                // Complex '--' ':='
     && lk != 643211                // Real '--' ':='
     && lk != 645941                // '[' ']' ':='
     && lk != 650195                // '{' '}' ':='
     && lk != 655809                // 'f32' Identifier ';'
     && lk != 655810                // 'f64' Identifier ';'
     && lk != 655814                // 'i32' Identifier ';'
     && lk != 655815                // 'i64' Identifier ';'
     && lk != 659075                // Identifier '++' ';'
     && lk != 659076                // Null '++' ';'
     && lk != 659077                // True '++' ';'
     && lk != 659078                // False '++' ';'
     && lk != 659079                // Character '++' ';'
     && lk != 659080                // String '++' ';'
     && lk != 659081                // Integer '++' ';'
     && lk != 659082                // Complex '++' ';'
     && lk != 659083                // Real '++' ';'
     && lk != 659587                // Identifier '--' ';'
     && lk != 659588                // Null '--' ';'
     && lk != 659589                // True '--' ';'
     && lk != 659590                // False '--' ';'
     && lk != 659591                // Character '--' ';'
     && lk != 659592                // String '--' ';'
     && lk != 659593                // Integer '--' ';'
     && lk != 659594                // Complex '--' ';'
     && lk != 659595                // Real '--' ';'
     && lk != 662325                // '[' ']' ';'
     && lk != 666579                // '{' '}' ';'
     && lk != 672193                // 'f32' Identifier '<'
     && lk != 672194                // 'f64' Identifier '<'
     && lk != 672198                // 'i32' Identifier '<'
     && lk != 672199                // 'i64' Identifier '<'
     && lk != 675459                // Identifier '++' '<'
     && lk != 675460                // Null '++' '<'
     && lk != 675461                // True '++' '<'
     && lk != 675462                // False '++' '<'
     && lk != 675463                // Character '++' '<'
     && lk != 675464                // String '++' '<'
     && lk != 675465                // Integer '++' '<'
     && lk != 675466                // Complex '++' '<'
     && lk != 675467                // Real '++' '<'
     && lk != 675971                // Identifier '--' '<'
     && lk != 675972                // Null '--' '<'
     && lk != 675973                // True '--' '<'
     && lk != 675974                // False '--' '<'
     && lk != 675975                // Character '--' '<'
     && lk != 675976                // String '--' '<'
     && lk != 675977                // Integer '--' '<'
     && lk != 675978                // Complex '--' '<'
     && lk != 675979                // Real '--' '<'
     && lk != 678709                // '[' ']' '<'
     && lk != 682963                // '{' '}' '<'
     && lk != 688577                // 'f32' Identifier '<<'
     && lk != 688578                // 'f64' Identifier '<<'
     && lk != 688582                // 'i32' Identifier '<<'
     && lk != 688583                // 'i64' Identifier '<<'
     && lk != 691843                // Identifier '++' '<<'
     && lk != 691844                // Null '++' '<<'
     && lk != 691845                // True '++' '<<'
     && lk != 691846                // False '++' '<<'
     && lk != 691847                // Character '++' '<<'
     && lk != 691848                // String '++' '<<'
     && lk != 691849                // Integer '++' '<<'
     && lk != 691850                // Complex '++' '<<'
     && lk != 691851                // Real '++' '<<'
     && lk != 692355                // Identifier '--' '<<'
     && lk != 692356                // Null '--' '<<'
     && lk != 692357                // True '--' '<<'
     && lk != 692358                // False '--' '<<'
     && lk != 692359                // Character '--' '<<'
     && lk != 692360                // String '--' '<<'
     && lk != 692361                // Integer '--' '<<'
     && lk != 692362                // Complex '--' '<<'
     && lk != 692363                // Real '--' '<<'
     && lk != 695093                // '[' ']' '<<'
     && lk != 699347                // '{' '}' '<<'
     && lk != 704961                // 'f32' Identifier '<<='
     && lk != 704962                // 'f64' Identifier '<<='
     && lk != 704966                // 'i32' Identifier '<<='
     && lk != 704967                // 'i64' Identifier '<<='
     && lk != 708227                // Identifier '++' '<<='
     && lk != 708228                // Null '++' '<<='
     && lk != 708229                // True '++' '<<='
     && lk != 708230                // False '++' '<<='
     && lk != 708231                // Character '++' '<<='
     && lk != 708232                // String '++' '<<='
     && lk != 708233                // Integer '++' '<<='
     && lk != 708234                // Complex '++' '<<='
     && lk != 708235                // Real '++' '<<='
     && lk != 708739                // Identifier '--' '<<='
     && lk != 708740                // Null '--' '<<='
     && lk != 708741                // True '--' '<<='
     && lk != 708742                // False '--' '<<='
     && lk != 708743                // Character '--' '<<='
     && lk != 708744                // String '--' '<<='
     && lk != 708745                // Integer '--' '<<='
     && lk != 708746                // Complex '--' '<<='
     && lk != 708747                // Real '--' '<<='
     && lk != 711477                // '[' ']' '<<='
     && lk != 715731                // '{' '}' '<<='
     && lk != 721345                // 'f32' Identifier '<='
     && lk != 721346                // 'f64' Identifier '<='
     && lk != 721350                // 'i32' Identifier '<='
     && lk != 721351                // 'i64' Identifier '<='
     && lk != 724611                // Identifier '++' '<='
     && lk != 724612                // Null '++' '<='
     && lk != 724613                // True '++' '<='
     && lk != 724614                // False '++' '<='
     && lk != 724615                // Character '++' '<='
     && lk != 724616                // String '++' '<='
     && lk != 724617                // Integer '++' '<='
     && lk != 724618                // Complex '++' '<='
     && lk != 724619                // Real '++' '<='
     && lk != 725123                // Identifier '--' '<='
     && lk != 725124                // Null '--' '<='
     && lk != 725125                // True '--' '<='
     && lk != 725126                // False '--' '<='
     && lk != 725127                // Character '--' '<='
     && lk != 725128                // String '--' '<='
     && lk != 725129                // Integer '--' '<='
     && lk != 725130                // Complex '--' '<='
     && lk != 725131                // Real '--' '<='
     && lk != 727861                // '[' ']' '<='
     && lk != 732115                // '{' '}' '<='
     && lk != 737729                // 'f32' Identifier '='
     && lk != 737730                // 'f64' Identifier '='
     && lk != 737734                // 'i32' Identifier '='
     && lk != 737735                // 'i64' Identifier '='
     && lk != 740995                // Identifier '++' '='
     && lk != 740996                // Null '++' '='
     && lk != 740997                // True '++' '='
     && lk != 740998                // False '++' '='
     && lk != 740999                // Character '++' '='
     && lk != 741000                // String '++' '='
     && lk != 741001                // Integer '++' '='
     && lk != 741002                // Complex '++' '='
     && lk != 741003                // Real '++' '='
     && lk != 741507                // Identifier '--' '='
     && lk != 741508                // Null '--' '='
     && lk != 741509                // True '--' '='
     && lk != 741510                // False '--' '='
     && lk != 741511                // Character '--' '='
     && lk != 741512                // String '--' '='
     && lk != 741513                // Integer '--' '='
     && lk != 741514                // Complex '--' '='
     && lk != 741515                // Real '--' '='
     && lk != 744245                // '[' ']' '='
     && lk != 748499                // '{' '}' '='
     && lk != 754113                // 'f32' Identifier '=='
     && lk != 754114                // 'f64' Identifier '=='
     && lk != 754118                // 'i32' Identifier '=='
     && lk != 754119                // 'i64' Identifier '=='
     && lk != 757379                // Identifier '++' '=='
     && lk != 757380                // Null '++' '=='
     && lk != 757381                // True '++' '=='
     && lk != 757382                // False '++' '=='
     && lk != 757383                // Character '++' '=='
     && lk != 757384                // String '++' '=='
     && lk != 757385                // Integer '++' '=='
     && lk != 757386                // Complex '++' '=='
     && lk != 757387                // Real '++' '=='
     && lk != 757891                // Identifier '--' '=='
     && lk != 757892                // Null '--' '=='
     && lk != 757893                // True '--' '=='
     && lk != 757894                // False '--' '=='
     && lk != 757895                // Character '--' '=='
     && lk != 757896                // String '--' '=='
     && lk != 757897                // Integer '--' '=='
     && lk != 757898                // Complex '--' '=='
     && lk != 757899                // Real '--' '=='
     && lk != 760629                // '[' ']' '=='
     && lk != 764883                // '{' '}' '=='
     && lk != 770497                // 'f32' Identifier '>'
     && lk != 770498                // 'f64' Identifier '>'
     && lk != 770502                // 'i32' Identifier '>'
     && lk != 770503                // 'i64' Identifier '>'
     && lk != 773763                // Identifier '++' '>'
     && lk != 773764                // Null '++' '>'
     && lk != 773765                // True '++' '>'
     && lk != 773766                // False '++' '>'
     && lk != 773767                // Character '++' '>'
     && lk != 773768                // String '++' '>'
     && lk != 773769                // Integer '++' '>'
     && lk != 773770                // Complex '++' '>'
     && lk != 773771                // Real '++' '>'
     && lk != 774275                // Identifier '--' '>'
     && lk != 774276                // Null '--' '>'
     && lk != 774277                // True '--' '>'
     && lk != 774278                // False '--' '>'
     && lk != 774279                // Character '--' '>'
     && lk != 774280                // String '--' '>'
     && lk != 774281                // Integer '--' '>'
     && lk != 774282                // Complex '--' '>'
     && lk != 774283                // Real '--' '>'
     && lk != 777013                // '[' ']' '>'
     && lk != 781267                // '{' '}' '>'
     && lk != 786881                // 'f32' Identifier '>='
     && lk != 786882                // 'f64' Identifier '>='
     && lk != 786886                // 'i32' Identifier '>='
     && lk != 786887                // 'i64' Identifier '>='
     && lk != 790147                // Identifier '++' '>='
     && lk != 790148                // Null '++' '>='
     && lk != 790149                // True '++' '>='
     && lk != 790150                // False '++' '>='
     && lk != 790151                // Character '++' '>='
     && lk != 790152                // String '++' '>='
     && lk != 790153                // Integer '++' '>='
     && lk != 790154                // Complex '++' '>='
     && lk != 790155                // Real '++' '>='
     && lk != 790659                // Identifier '--' '>='
     && lk != 790660                // Null '--' '>='
     && lk != 790661                // True '--' '>='
     && lk != 790662                // False '--' '>='
     && lk != 790663                // Character '--' '>='
     && lk != 790664                // String '--' '>='
     && lk != 790665                // Integer '--' '>='
     && lk != 790666                // Complex '--' '>='
     && lk != 790667                // Real '--' '>='
     && lk != 793397                // '[' ']' '>='
     && lk != 797651                // '{' '}' '>='
     && lk != 803265                // 'f32' Identifier '>>'
     && lk != 803266                // 'f64' Identifier '>>'
     && lk != 803270                // 'i32' Identifier '>>'
     && lk != 803271                // 'i64' Identifier '>>'
     && lk != 806531                // Identifier '++' '>>'
     && lk != 806532                // Null '++' '>>'
     && lk != 806533                // True '++' '>>'
     && lk != 806534                // False '++' '>>'
     && lk != 806535                // Character '++' '>>'
     && lk != 806536                // String '++' '>>'
     && lk != 806537                // Integer '++' '>>'
     && lk != 806538                // Complex '++' '>>'
     && lk != 806539                // Real '++' '>>'
     && lk != 807043                // Identifier '--' '>>'
     && lk != 807044                // Null '--' '>>'
     && lk != 807045                // True '--' '>>'
     && lk != 807046                // False '--' '>>'
     && lk != 807047                // Character '--' '>>'
     && lk != 807048                // String '--' '>>'
     && lk != 807049                // Integer '--' '>>'
     && lk != 807050                // Complex '--' '>>'
     && lk != 807051                // Real '--' '>>'
     && lk != 809781                // '[' ']' '>>'
     && lk != 814035                // '{' '}' '>>'
     && lk != 819649                // 'f32' Identifier '>>='
     && lk != 819650                // 'f64' Identifier '>>='
     && lk != 819654                // 'i32' Identifier '>>='
     && lk != 819655                // 'i64' Identifier '>>='
     && lk != 822915                // Identifier '++' '>>='
     && lk != 822916                // Null '++' '>>='
     && lk != 822917                // True '++' '>>='
     && lk != 822918                // False '++' '>>='
     && lk != 822919                // Character '++' '>>='
     && lk != 822920                // String '++' '>>='
     && lk != 822921                // Integer '++' '>>='
     && lk != 822922                // Complex '++' '>>='
     && lk != 822923                // Real '++' '>>='
     && lk != 823427                // Identifier '--' '>>='
     && lk != 823428                // Null '--' '>>='
     && lk != 823429                // True '--' '>>='
     && lk != 823430                // False '--' '>>='
     && lk != 823431                // Character '--' '>>='
     && lk != 823432                // String '--' '>>='
     && lk != 823433                // Integer '--' '>>='
     && lk != 823434                // Complex '--' '>>='
     && lk != 823435                // Real '--' '>>='
     && lk != 826165                // '[' ']' '>>='
     && lk != 830419                // '{' '}' '>>='
     && lk != 836033                // 'f32' Identifier '?'
     && lk != 836034                // 'f64' Identifier '?'
     && lk != 836038                // 'i32' Identifier '?'
     && lk != 836039                // 'i64' Identifier '?'
     && lk != 839299                // Identifier '++' '?'
     && lk != 839300                // Null '++' '?'
     && lk != 839301                // True '++' '?'
     && lk != 839302                // False '++' '?'
     && lk != 839303                // Character '++' '?'
     && lk != 839304                // String '++' '?'
     && lk != 839305                // Integer '++' '?'
     && lk != 839306                // Complex '++' '?'
     && lk != 839307                // Real '++' '?'
     && lk != 839811                // Identifier '--' '?'
     && lk != 839812                // Null '--' '?'
     && lk != 839813                // True '--' '?'
     && lk != 839814                // False '--' '?'
     && lk != 839815                // Character '--' '?'
     && lk != 839816                // String '--' '?'
     && lk != 839817                // Integer '--' '?'
     && lk != 839818                // Complex '--' '?'
     && lk != 839819                // Real '--' '?'
     && lk != 842549                // '[' ']' '?'
     && lk != 846803                // '{' '}' '?'
     && lk != 852417                // 'f32' Identifier '?='
     && lk != 852418                // 'f64' Identifier '?='
     && lk != 852422                // 'i32' Identifier '?='
     && lk != 852423                // 'i64' Identifier '?='
     && lk != 855683                // Identifier '++' '?='
     && lk != 855684                // Null '++' '?='
     && lk != 855685                // True '++' '?='
     && lk != 855686                // False '++' '?='
     && lk != 855687                // Character '++' '?='
     && lk != 855688                // String '++' '?='
     && lk != 855689                // Integer '++' '?='
     && lk != 855690                // Complex '++' '?='
     && lk != 855691                // Real '++' '?='
     && lk != 856195                // Identifier '--' '?='
     && lk != 856196                // Null '--' '?='
     && lk != 856197                // True '--' '?='
     && lk != 856198                // False '--' '?='
     && lk != 856199                // Character '--' '?='
     && lk != 856200                // String '--' '?='
     && lk != 856201                // Integer '--' '?='
     && lk != 856202                // Complex '--' '?='
     && lk != 856203                // Real '--' '?='
     && lk != 858933                // '[' ']' '?='
     && lk != 863187                // '{' '}' '?='
     && lk != 875317                // '[' ']' '['
     && lk != 879571                // '{' '}' '['
     && lk != 885185                // 'f32' Identifier ']'
     && lk != 885186                // 'f64' Identifier ']'
     && lk != 885190                // 'i32' Identifier ']'
     && lk != 885191                // 'i64' Identifier ']'
     && lk != 888451                // Identifier '++' ']'
     && lk != 888452                // Null '++' ']'
     && lk != 888453                // True '++' ']'
     && lk != 888454                // False '++' ']'
     && lk != 888455                // Character '++' ']'
     && lk != 888456                // String '++' ']'
     && lk != 888457                // Integer '++' ']'
     && lk != 888458                // Complex '++' ']'
     && lk != 888459                // Real '++' ']'
     && lk != 888963                // Identifier '--' ']'
     && lk != 888964                // Null '--' ']'
     && lk != 888965                // True '--' ']'
     && lk != 888966                // False '--' ']'
     && lk != 888967                // Character '--' ']'
     && lk != 888968                // String '--' ']'
     && lk != 888969                // Integer '--' ']'
     && lk != 888970                // Complex '--' ']'
     && lk != 888971                // Real '--' ']'
     && lk != 891701                // '[' ']' ']'
     && lk != 895955                // '{' '}' ']'
     && lk != 901569                // 'f32' Identifier '^'
     && lk != 901570                // 'f64' Identifier '^'
     && lk != 901574                // 'i32' Identifier '^'
     && lk != 901575                // 'i64' Identifier '^'
     && lk != 904835                // Identifier '++' '^'
     && lk != 904836                // Null '++' '^'
     && lk != 904837                // True '++' '^'
     && lk != 904838                // False '++' '^'
     && lk != 904839                // Character '++' '^'
     && lk != 904840                // String '++' '^'
     && lk != 904841                // Integer '++' '^'
     && lk != 904842                // Complex '++' '^'
     && lk != 904843                // Real '++' '^'
     && lk != 905347                // Identifier '--' '^'
     && lk != 905348                // Null '--' '^'
     && lk != 905349                // True '--' '^'
     && lk != 905350                // False '--' '^'
     && lk != 905351                // Character '--' '^'
     && lk != 905352                // String '--' '^'
     && lk != 905353                // Integer '--' '^'
     && lk != 905354                // Complex '--' '^'
     && lk != 905355                // Real '--' '^'
     && lk != 908085                // '[' ']' '^'
     && lk != 912339                // '{' '}' '^'
     && lk != 917953                // 'f32' Identifier '^='
     && lk != 917954                // 'f64' Identifier '^='
     && lk != 917958                // 'i32' Identifier '^='
     && lk != 917959                // 'i64' Identifier '^='
     && lk != 921219                // Identifier '++' '^='
     && lk != 921220                // Null '++' '^='
     && lk != 921221                // True '++' '^='
     && lk != 921222                // False '++' '^='
     && lk != 921223                // Character '++' '^='
     && lk != 921224                // String '++' '^='
     && lk != 921225                // Integer '++' '^='
     && lk != 921226                // Complex '++' '^='
     && lk != 921227                // Real '++' '^='
     && lk != 921731                // Identifier '--' '^='
     && lk != 921732                // Null '--' '^='
     && lk != 921733                // True '--' '^='
     && lk != 921734                // False '--' '^='
     && lk != 921735                // Character '--' '^='
     && lk != 921736                // String '--' '^='
     && lk != 921737                // Integer '--' '^='
     && lk != 921738                // Complex '--' '^='
     && lk != 921739                // Real '--' '^='
     && lk != 924469                // '[' ']' '^='
     && lk != 928723                // '{' '}' '^='
     && lk != 934337                // 'f32' Identifier 'break'
     && lk != 934338                // 'f64' Identifier 'break'
     && lk != 934342                // 'i32' Identifier 'break'
     && lk != 934343                // 'i64' Identifier 'break'
     && lk != 937603                // Identifier '++' 'break'
     && lk != 937604                // Null '++' 'break'
     && lk != 937605                // True '++' 'break'
     && lk != 937606                // False '++' 'break'
     && lk != 937607                // Character '++' 'break'
     && lk != 937608                // String '++' 'break'
     && lk != 937609                // Integer '++' 'break'
     && lk != 937610                // Complex '++' 'break'
     && lk != 937611                // Real '++' 'break'
     && lk != 938115                // Identifier '--' 'break'
     && lk != 938116                // Null '--' 'break'
     && lk != 938117                // True '--' 'break'
     && lk != 938118                // False '--' 'break'
     && lk != 938119                // Character '--' 'break'
     && lk != 938120                // String '--' 'break'
     && lk != 938121                // Integer '--' 'break'
     && lk != 938122                // Complex '--' 'break'
     && lk != 938123                // Real '--' 'break'
     && lk != 940853                // '[' ']' 'break'
     && lk != 945107                // '{' '}' 'break'
     && lk != 950721                // 'f32' Identifier 'case'
     && lk != 950722                // 'f64' Identifier 'case'
     && lk != 950726                // 'i32' Identifier 'case'
     && lk != 950727                // 'i64' Identifier 'case'
     && lk != 953987                // Identifier '++' 'case'
     && lk != 953988                // Null '++' 'case'
     && lk != 953989                // True '++' 'case'
     && lk != 953990                // False '++' 'case'
     && lk != 953991                // Character '++' 'case'
     && lk != 953992                // String '++' 'case'
     && lk != 953993                // Integer '++' 'case'
     && lk != 953994                // Complex '++' 'case'
     && lk != 953995                // Real '++' 'case'
     && lk != 954499                // Identifier '--' 'case'
     && lk != 954500                // Null '--' 'case'
     && lk != 954501                // True '--' 'case'
     && lk != 954502                // False '--' 'case'
     && lk != 954503                // Character '--' 'case'
     && lk != 954504                // String '--' 'case'
     && lk != 954505                // Integer '--' 'case'
     && lk != 954506                // Complex '--' 'case'
     && lk != 954507                // Real '--' 'case'
     && lk != 957237                // '[' ']' 'case'
     && lk != 961491                // '{' '}' 'case'
     && lk != 967105                // 'f32' Identifier 'catch'
     && lk != 967106                // 'f64' Identifier 'catch'
     && lk != 967110                // 'i32' Identifier 'catch'
     && lk != 967111                // 'i64' Identifier 'catch'
     && lk != 970371                // Identifier '++' 'catch'
     && lk != 970372                // Null '++' 'catch'
     && lk != 970373                // True '++' 'catch'
     && lk != 970374                // False '++' 'catch'
     && lk != 970375                // Character '++' 'catch'
     && lk != 970376                // String '++' 'catch'
     && lk != 970377                // Integer '++' 'catch'
     && lk != 970378                // Complex '++' 'catch'
     && lk != 970379                // Real '++' 'catch'
     && lk != 970883                // Identifier '--' 'catch'
     && lk != 970884                // Null '--' 'catch'
     && lk != 970885                // True '--' 'catch'
     && lk != 970886                // False '--' 'catch'
     && lk != 970887                // Character '--' 'catch'
     && lk != 970888                // String '--' 'catch'
     && lk != 970889                // Integer '--' 'catch'
     && lk != 970890                // Complex '--' 'catch'
     && lk != 970891                // Real '--' 'catch'
     && lk != 973621                // '[' ']' 'catch'
     && lk != 977875                // '{' '}' 'catch'
     && lk != 983489                // 'f32' Identifier 'continue'
     && lk != 983490                // 'f64' Identifier 'continue'
     && lk != 983494                // 'i32' Identifier 'continue'
     && lk != 983495                // 'i64' Identifier 'continue'
     && lk != 986755                // Identifier '++' 'continue'
     && lk != 986756                // Null '++' 'continue'
     && lk != 986757                // True '++' 'continue'
     && lk != 986758                // False '++' 'continue'
     && lk != 986759                // Character '++' 'continue'
     && lk != 986760                // String '++' 'continue'
     && lk != 986761                // Integer '++' 'continue'
     && lk != 986762                // Complex '++' 'continue'
     && lk != 986763                // Real '++' 'continue'
     && lk != 987267                // Identifier '--' 'continue'
     && lk != 987268                // Null '--' 'continue'
     && lk != 987269                // True '--' 'continue'
     && lk != 987270                // False '--' 'continue'
     && lk != 987271                // Character '--' 'continue'
     && lk != 987272                // String '--' 'continue'
     && lk != 987273                // Integer '--' 'continue'
     && lk != 987274                // Complex '--' 'continue'
     && lk != 987275                // Real '--' 'continue'
     && lk != 990005                // '[' ']' 'continue'
     && lk != 994259                // '{' '}' 'continue'
     && lk != 999873                // 'f32' Identifier 'default'
     && lk != 999874                // 'f64' Identifier 'default'
     && lk != 999878                // 'i32' Identifier 'default'
     && lk != 999879                // 'i64' Identifier 'default'
     && lk != 1003139               // Identifier '++' 'default'
     && lk != 1003140               // Null '++' 'default'
     && lk != 1003141               // True '++' 'default'
     && lk != 1003142               // False '++' 'default'
     && lk != 1003143               // Character '++' 'default'
     && lk != 1003144               // String '++' 'default'
     && lk != 1003145               // Integer '++' 'default'
     && lk != 1003146               // Complex '++' 'default'
     && lk != 1003147               // Real '++' 'default'
     && lk != 1003651               // Identifier '--' 'default'
     && lk != 1003652               // Null '--' 'default'
     && lk != 1003653               // True '--' 'default'
     && lk != 1003654               // False '--' 'default'
     && lk != 1003655               // Character '--' 'default'
     && lk != 1003656               // String '--' 'default'
     && lk != 1003657               // Integer '--' 'default'
     && lk != 1003658               // Complex '--' 'default'
     && lk != 1003659               // Real '--' 'default'
     && lk != 1006389               // '[' ']' 'default'
     && lk != 1010643               // '{' '}' 'default'
     && lk != 1016257               // 'f32' Identifier 'do'
     && lk != 1016258               // 'f64' Identifier 'do'
     && lk != 1016262               // 'i32' Identifier 'do'
     && lk != 1016263               // 'i64' Identifier 'do'
     && lk != 1019523               // Identifier '++' 'do'
     && lk != 1019524               // Null '++' 'do'
     && lk != 1019525               // True '++' 'do'
     && lk != 1019526               // False '++' 'do'
     && lk != 1019527               // Character '++' 'do'
     && lk != 1019528               // String '++' 'do'
     && lk != 1019529               // Integer '++' 'do'
     && lk != 1019530               // Complex '++' 'do'
     && lk != 1019531               // Real '++' 'do'
     && lk != 1020035               // Identifier '--' 'do'
     && lk != 1020036               // Null '--' 'do'
     && lk != 1020037               // True '--' 'do'
     && lk != 1020038               // False '--' 'do'
     && lk != 1020039               // Character '--' 'do'
     && lk != 1020040               // String '--' 'do'
     && lk != 1020041               // Integer '--' 'do'
     && lk != 1020042               // Complex '--' 'do'
     && lk != 1020043               // Real '--' 'do'
     && lk != 1022773               // '[' ']' 'do'
     && lk != 1027027               // '{' '}' 'do'
     && lk != 1032641               // 'f32' Identifier 'else'
     && lk != 1032642               // 'f64' Identifier 'else'
     && lk != 1032646               // 'i32' Identifier 'else'
     && lk != 1032647               // 'i64' Identifier 'else'
     && lk != 1035907               // Identifier '++' 'else'
     && lk != 1035908               // Null '++' 'else'
     && lk != 1035909               // True '++' 'else'
     && lk != 1035910               // False '++' 'else'
     && lk != 1035911               // Character '++' 'else'
     && lk != 1035912               // String '++' 'else'
     && lk != 1035913               // Integer '++' 'else'
     && lk != 1035914               // Complex '++' 'else'
     && lk != 1035915               // Real '++' 'else'
     && lk != 1036419               // Identifier '--' 'else'
     && lk != 1036420               // Null '--' 'else'
     && lk != 1036421               // True '--' 'else'
     && lk != 1036422               // False '--' 'else'
     && lk != 1036423               // Character '--' 'else'
     && lk != 1036424               // String '--' 'else'
     && lk != 1036425               // Integer '--' 'else'
     && lk != 1036426               // Complex '--' 'else'
     && lk != 1036427               // Real '--' 'else'
     && lk != 1039157               // '[' ']' 'else'
     && lk != 1043411               // '{' '}' 'else'
     && lk != 1049025               // 'f32' Identifier 'export'
     && lk != 1049026               // 'f64' Identifier 'export'
     && lk != 1049030               // 'i32' Identifier 'export'
     && lk != 1049031               // 'i64' Identifier 'export'
     && lk != 1052291               // Identifier '++' 'export'
     && lk != 1052292               // Null '++' 'export'
     && lk != 1052293               // True '++' 'export'
     && lk != 1052294               // False '++' 'export'
     && lk != 1052295               // Character '++' 'export'
     && lk != 1052296               // String '++' 'export'
     && lk != 1052297               // Integer '++' 'export'
     && lk != 1052298               // Complex '++' 'export'
     && lk != 1052299               // Real '++' 'export'
     && lk != 1052803               // Identifier '--' 'export'
     && lk != 1052804               // Null '--' 'export'
     && lk != 1052805               // True '--' 'export'
     && lk != 1052806               // False '--' 'export'
     && lk != 1052807               // Character '--' 'export'
     && lk != 1052808               // String '--' 'export'
     && lk != 1052809               // Integer '--' 'export'
     && lk != 1052810               // Complex '--' 'export'
     && lk != 1052811               // Real '--' 'export'
     && lk != 1055541               // '[' ']' 'export'
     && lk != 1059795               // '{' '}' 'export'
     && lk != 1065409               // 'f32' Identifier 'f32'
     && lk != 1065410               // 'f64' Identifier 'f32'
     && lk != 1065414               // 'i32' Identifier 'f32'
     && lk != 1065415               // 'i64' Identifier 'f32'
     && lk != 1071925               // '[' ']' 'f32'
     && lk != 1076179               // '{' '}' 'f32'
     && lk != 1081793               // 'f32' Identifier 'f64'
     && lk != 1081794               // 'f64' Identifier 'f64'
     && lk != 1081798               // 'i32' Identifier 'f64'
     && lk != 1081799               // 'i64' Identifier 'f64'
     && lk != 1088309               // '[' ']' 'f64'
     && lk != 1092563               // '{' '}' 'f64'
     && lk != 1098177               // 'f32' Identifier 'for'
     && lk != 1098178               // 'f64' Identifier 'for'
     && lk != 1098182               // 'i32' Identifier 'for'
     && lk != 1098183               // 'i64' Identifier 'for'
     && lk != 1101443               // Identifier '++' 'for'
     && lk != 1101444               // Null '++' 'for'
     && lk != 1101445               // True '++' 'for'
     && lk != 1101446               // False '++' 'for'
     && lk != 1101447               // Character '++' 'for'
     && lk != 1101448               // String '++' 'for'
     && lk != 1101449               // Integer '++' 'for'
     && lk != 1101450               // Complex '++' 'for'
     && lk != 1101451               // Real '++' 'for'
     && lk != 1101955               // Identifier '--' 'for'
     && lk != 1101956               // Null '--' 'for'
     && lk != 1101957               // True '--' 'for'
     && lk != 1101958               // False '--' 'for'
     && lk != 1101959               // Character '--' 'for'
     && lk != 1101960               // String '--' 'for'
     && lk != 1101961               // Integer '--' 'for'
     && lk != 1101962               // Complex '--' 'for'
     && lk != 1101963               // Real '--' 'for'
     && lk != 1104693               // '[' ']' 'for'
     && lk != 1108947               // '{' '}' 'for'
     && lk != 1114561               // 'f32' Identifier 'foreach'
     && lk != 1114562               // 'f64' Identifier 'foreach'
     && lk != 1114566               // 'i32' Identifier 'foreach'
     && lk != 1114567               // 'i64' Identifier 'foreach'
     && lk != 1117827               // Identifier '++' 'foreach'
     && lk != 1117828               // Null '++' 'foreach'
     && lk != 1117829               // True '++' 'foreach'
     && lk != 1117830               // False '++' 'foreach'
     && lk != 1117831               // Character '++' 'foreach'
     && lk != 1117832               // String '++' 'foreach'
     && lk != 1117833               // Integer '++' 'foreach'
     && lk != 1117834               // Complex '++' 'foreach'
     && lk != 1117835               // Real '++' 'foreach'
     && lk != 1118339               // Identifier '--' 'foreach'
     && lk != 1118340               // Null '--' 'foreach'
     && lk != 1118341               // True '--' 'foreach'
     && lk != 1118342               // False '--' 'foreach'
     && lk != 1118343               // Character '--' 'foreach'
     && lk != 1118344               // String '--' 'foreach'
     && lk != 1118345               // Integer '--' 'foreach'
     && lk != 1118346               // Complex '--' 'foreach'
     && lk != 1118347               // Real '--' 'foreach'
     && lk != 1121077               // '[' ']' 'foreach'
     && lk != 1125331               // '{' '}' 'foreach'
     && lk != 1130945               // 'f32' Identifier 'global'
     && lk != 1130946               // 'f64' Identifier 'global'
     && lk != 1130950               // 'i32' Identifier 'global'
     && lk != 1130951               // 'i64' Identifier 'global'
     && lk != 1134211               // Identifier '++' 'global'
     && lk != 1134212               // Null '++' 'global'
     && lk != 1134213               // True '++' 'global'
     && lk != 1134214               // False '++' 'global'
     && lk != 1134215               // Character '++' 'global'
     && lk != 1134216               // String '++' 'global'
     && lk != 1134217               // Integer '++' 'global'
     && lk != 1134218               // Complex '++' 'global'
     && lk != 1134219               // Real '++' 'global'
     && lk != 1134723               // Identifier '--' 'global'
     && lk != 1134724               // Null '--' 'global'
     && lk != 1134725               // True '--' 'global'
     && lk != 1134726               // False '--' 'global'
     && lk != 1134727               // Character '--' 'global'
     && lk != 1134728               // String '--' 'global'
     && lk != 1134729               // Integer '--' 'global'
     && lk != 1134730               // Complex '--' 'global'
     && lk != 1134731               // Real '--' 'global'
     && lk != 1137461               // '[' ']' 'global'
     && lk != 1141715               // '{' '}' 'global'
     && lk != 1147329               // 'f32' Identifier 'i32'
     && lk != 1147330               // 'f64' Identifier 'i32'
     && lk != 1147334               // 'i32' Identifier 'i32'
     && lk != 1147335               // 'i64' Identifier 'i32'
     && lk != 1153845               // '[' ']' 'i32'
     && lk != 1158099               // '{' '}' 'i32'
     && lk != 1163713               // 'f32' Identifier 'i64'
     && lk != 1163714               // 'f64' Identifier 'i64'
     && lk != 1163718               // 'i32' Identifier 'i64'
     && lk != 1163719               // 'i64' Identifier 'i64'
     && lk != 1170229               // '[' ']' 'i64'
     && lk != 1174483               // '{' '}' 'i64'
     && lk != 1180097               // 'f32' Identifier 'if'
     && lk != 1180098               // 'f64' Identifier 'if'
     && lk != 1180102               // 'i32' Identifier 'if'
     && lk != 1180103               // 'i64' Identifier 'if'
     && lk != 1183363               // Identifier '++' 'if'
     && lk != 1183364               // Null '++' 'if'
     && lk != 1183365               // True '++' 'if'
     && lk != 1183366               // False '++' 'if'
     && lk != 1183367               // Character '++' 'if'
     && lk != 1183368               // String '++' 'if'
     && lk != 1183369               // Integer '++' 'if'
     && lk != 1183370               // Complex '++' 'if'
     && lk != 1183371               // Real '++' 'if'
     && lk != 1183875               // Identifier '--' 'if'
     && lk != 1183876               // Null '--' 'if'
     && lk != 1183877               // True '--' 'if'
     && lk != 1183878               // False '--' 'if'
     && lk != 1183879               // Character '--' 'if'
     && lk != 1183880               // String '--' 'if'
     && lk != 1183881               // Integer '--' 'if'
     && lk != 1183882               // Complex '--' 'if'
     && lk != 1183883               // Real '--' 'if'
     && lk != 1186613               // '[' ']' 'if'
     && lk != 1190867               // '{' '}' 'if'
     && lk != 1196481               // 'f32' Identifier 'import'
     && lk != 1196482               // 'f64' Identifier 'import'
     && lk != 1196486               // 'i32' Identifier 'import'
     && lk != 1196487               // 'i64' Identifier 'import'
     && lk != 1199747               // Identifier '++' 'import'
     && lk != 1199748               // Null '++' 'import'
     && lk != 1199749               // True '++' 'import'
     && lk != 1199750               // False '++' 'import'
     && lk != 1199751               // Character '++' 'import'
     && lk != 1199752               // String '++' 'import'
     && lk != 1199753               // Integer '++' 'import'
     && lk != 1199754               // Complex '++' 'import'
     && lk != 1199755               // Real '++' 'import'
     && lk != 1200259               // Identifier '--' 'import'
     && lk != 1200260               // Null '--' 'import'
     && lk != 1200261               // True '--' 'import'
     && lk != 1200262               // False '--' 'import'
     && lk != 1200263               // Character '--' 'import'
     && lk != 1200264               // String '--' 'import'
     && lk != 1200265               // Integer '--' 'import'
     && lk != 1200266               // Complex '--' 'import'
     && lk != 1200267               // Real '--' 'import'
     && lk != 1202997               // '[' ']' 'import'
     && lk != 1207251               // '{' '}' 'import'
     && lk != 1212865               // 'f32' Identifier 'include'
     && lk != 1212866               // 'f64' Identifier 'include'
     && lk != 1212870               // 'i32' Identifier 'include'
     && lk != 1212871               // 'i64' Identifier 'include'
     && lk != 1216131               // Identifier '++' 'include'
     && lk != 1216132               // Null '++' 'include'
     && lk != 1216133               // True '++' 'include'
     && lk != 1216134               // False '++' 'include'
     && lk != 1216135               // Character '++' 'include'
     && lk != 1216136               // String '++' 'include'
     && lk != 1216137               // Integer '++' 'include'
     && lk != 1216138               // Complex '++' 'include'
     && lk != 1216139               // Real '++' 'include'
     && lk != 1216643               // Identifier '--' 'include'
     && lk != 1216644               // Null '--' 'include'
     && lk != 1216645               // True '--' 'include'
     && lk != 1216646               // False '--' 'include'
     && lk != 1216647               // Character '--' 'include'
     && lk != 1216648               // String '--' 'include'
     && lk != 1216649               // Integer '--' 'include'
     && lk != 1216650               // Complex '--' 'include'
     && lk != 1216651               // Real '--' 'include'
     && lk != 1219381               // '[' ']' 'include'
     && lk != 1223635               // '{' '}' 'include'
     && lk != 1229249               // 'f32' Identifier 'local'
     && lk != 1229250               // 'f64' Identifier 'local'
     && lk != 1229254               // 'i32' Identifier 'local'
     && lk != 1229255               // 'i64' Identifier 'local'
     && lk != 1232515               // Identifier '++' 'local'
     && lk != 1232516               // Null '++' 'local'
     && lk != 1232517               // True '++' 'local'
     && lk != 1232518               // False '++' 'local'
     && lk != 1232519               // Character '++' 'local'
     && lk != 1232520               // String '++' 'local'
     && lk != 1232521               // Integer '++' 'local'
     && lk != 1232522               // Complex '++' 'local'
     && lk != 1232523               // Real '++' 'local'
     && lk != 1233027               // Identifier '--' 'local'
     && lk != 1233028               // Null '--' 'local'
     && lk != 1233029               // True '--' 'local'
     && lk != 1233030               // False '--' 'local'
     && lk != 1233031               // Character '--' 'local'
     && lk != 1233032               // String '--' 'local'
     && lk != 1233033               // Integer '--' 'local'
     && lk != 1233034               // Complex '--' 'local'
     && lk != 1233035               // Real '--' 'local'
     && lk != 1235765               // '[' ']' 'local'
     && lk != 1240019               // '{' '}' 'local'
     && lk != 1245633               // 'f32' Identifier 'return'
     && lk != 1245634               // 'f64' Identifier 'return'
     && lk != 1245638               // 'i32' Identifier 'return'
     && lk != 1245639               // 'i64' Identifier 'return'
     && lk != 1248899               // Identifier '++' 'return'
     && lk != 1248900               // Null '++' 'return'
     && lk != 1248901               // True '++' 'return'
     && lk != 1248902               // False '++' 'return'
     && lk != 1248903               // Character '++' 'return'
     && lk != 1248904               // String '++' 'return'
     && lk != 1248905               // Integer '++' 'return'
     && lk != 1248906               // Complex '++' 'return'
     && lk != 1248907               // Real '++' 'return'
     && lk != 1249411               // Identifier '--' 'return'
     && lk != 1249412               // Null '--' 'return'
     && lk != 1249413               // True '--' 'return'
     && lk != 1249414               // False '--' 'return'
     && lk != 1249415               // Character '--' 'return'
     && lk != 1249416               // String '--' 'return'
     && lk != 1249417               // Integer '--' 'return'
     && lk != 1249418               // Complex '--' 'return'
     && lk != 1249419               // Real '--' 'return'
     && lk != 1252149               // '[' ']' 'return'
     && lk != 1256403               // '{' '}' 'return'
     && lk != 1262017               // 'f32' Identifier 'switch'
     && lk != 1262018               // 'f64' Identifier 'switch'
     && lk != 1262022               // 'i32' Identifier 'switch'
     && lk != 1262023               // 'i64' Identifier 'switch'
     && lk != 1265283               // Identifier '++' 'switch'
     && lk != 1265284               // Null '++' 'switch'
     && lk != 1265285               // True '++' 'switch'
     && lk != 1265286               // False '++' 'switch'
     && lk != 1265287               // Character '++' 'switch'
     && lk != 1265288               // String '++' 'switch'
     && lk != 1265289               // Integer '++' 'switch'
     && lk != 1265290               // Complex '++' 'switch'
     && lk != 1265291               // Real '++' 'switch'
     && lk != 1265795               // Identifier '--' 'switch'
     && lk != 1265796               // Null '--' 'switch'
     && lk != 1265797               // True '--' 'switch'
     && lk != 1265798               // False '--' 'switch'
     && lk != 1265799               // Character '--' 'switch'
     && lk != 1265800               // String '--' 'switch'
     && lk != 1265801               // Integer '--' 'switch'
     && lk != 1265802               // Complex '--' 'switch'
     && lk != 1265803               // Real '--' 'switch'
     && lk != 1268533               // '[' ']' 'switch'
     && lk != 1272787               // '{' '}' 'switch'
     && lk != 1278401               // 'f32' Identifier 'test'
     && lk != 1278402               // 'f64' Identifier 'test'
     && lk != 1278406               // 'i32' Identifier 'test'
     && lk != 1278407               // 'i64' Identifier 'test'
     && lk != 1281667               // Identifier '++' 'test'
     && lk != 1281668               // Null '++' 'test'
     && lk != 1281669               // True '++' 'test'
     && lk != 1281670               // False '++' 'test'
     && lk != 1281671               // Character '++' 'test'
     && lk != 1281672               // String '++' 'test'
     && lk != 1281673               // Integer '++' 'test'
     && lk != 1281674               // Complex '++' 'test'
     && lk != 1281675               // Real '++' 'test'
     && lk != 1282179               // Identifier '--' 'test'
     && lk != 1282180               // Null '--' 'test'
     && lk != 1282181               // True '--' 'test'
     && lk != 1282182               // False '--' 'test'
     && lk != 1282183               // Character '--' 'test'
     && lk != 1282184               // String '--' 'test'
     && lk != 1282185               // Integer '--' 'test'
     && lk != 1282186               // Complex '--' 'test'
     && lk != 1282187               // Real '--' 'test'
     && lk != 1284917               // '[' ']' 'test'
     && lk != 1289171               // '{' '}' 'test'
     && lk != 1294785               // 'f32' Identifier 'throw'
     && lk != 1294786               // 'f64' Identifier 'throw'
     && lk != 1294790               // 'i32' Identifier 'throw'
     && lk != 1294791               // 'i64' Identifier 'throw'
     && lk != 1298051               // Identifier '++' 'throw'
     && lk != 1298052               // Null '++' 'throw'
     && lk != 1298053               // True '++' 'throw'
     && lk != 1298054               // False '++' 'throw'
     && lk != 1298055               // Character '++' 'throw'
     && lk != 1298056               // String '++' 'throw'
     && lk != 1298057               // Integer '++' 'throw'
     && lk != 1298058               // Complex '++' 'throw'
     && lk != 1298059               // Real '++' 'throw'
     && lk != 1298563               // Identifier '--' 'throw'
     && lk != 1298564               // Null '--' 'throw'
     && lk != 1298565               // True '--' 'throw'
     && lk != 1298566               // False '--' 'throw'
     && lk != 1298567               // Character '--' 'throw'
     && lk != 1298568               // String '--' 'throw'
     && lk != 1298569               // Integer '--' 'throw'
     && lk != 1298570               // Complex '--' 'throw'
     && lk != 1298571               // Real '--' 'throw'
     && lk != 1301301               // '[' ']' 'throw'
     && lk != 1305555               // '{' '}' 'throw'
     && lk != 1311169               // 'f32' Identifier 'try'
     && lk != 1311170               // 'f64' Identifier 'try'
     && lk != 1311174               // 'i32' Identifier 'try'
     && lk != 1311175               // 'i64' Identifier 'try'
     && lk != 1314435               // Identifier '++' 'try'
     && lk != 1314436               // Null '++' 'try'
     && lk != 1314437               // True '++' 'try'
     && lk != 1314438               // False '++' 'try'
     && lk != 1314439               // Character '++' 'try'
     && lk != 1314440               // String '++' 'try'
     && lk != 1314441               // Integer '++' 'try'
     && lk != 1314442               // Complex '++' 'try'
     && lk != 1314443               // Real '++' 'try'
     && lk != 1314947               // Identifier '--' 'try'
     && lk != 1314948               // Null '--' 'try'
     && lk != 1314949               // True '--' 'try'
     && lk != 1314950               // False '--' 'try'
     && lk != 1314951               // Character '--' 'try'
     && lk != 1314952               // String '--' 'try'
     && lk != 1314953               // Integer '--' 'try'
     && lk != 1314954               // Complex '--' 'try'
     && lk != 1314955               // Real '--' 'try'
     && lk != 1317685               // '[' ']' 'try'
     && lk != 1321939               // '{' '}' 'try'
     && lk != 1327553               // 'f32' Identifier 'typeof'
     && lk != 1327554               // 'f64' Identifier 'typeof'
     && lk != 1327558               // 'i32' Identifier 'typeof'
     && lk != 1327559               // 'i64' Identifier 'typeof'
     && lk != 1330819               // Identifier '++' 'typeof'
     && lk != 1330820               // Null '++' 'typeof'
     && lk != 1330821               // True '++' 'typeof'
     && lk != 1330822               // False '++' 'typeof'
     && lk != 1330823               // Character '++' 'typeof'
     && lk != 1330824               // String '++' 'typeof'
     && lk != 1330825               // Integer '++' 'typeof'
     && lk != 1330826               // Complex '++' 'typeof'
     && lk != 1330827               // Real '++' 'typeof'
     && lk != 1331331               // Identifier '--' 'typeof'
     && lk != 1331332               // Null '--' 'typeof'
     && lk != 1331333               // True '--' 'typeof'
     && lk != 1331334               // False '--' 'typeof'
     && lk != 1331335               // Character '--' 'typeof'
     && lk != 1331336               // String '--' 'typeof'
     && lk != 1331337               // Integer '--' 'typeof'
     && lk != 1331338               // Complex '--' 'typeof'
     && lk != 1331339               // Real '--' 'typeof'
     && lk != 1334069               // '[' ']' 'typeof'
     && lk != 1338323               // '{' '}' 'typeof'
     && lk != 1343937               // 'f32' Identifier 'while'
     && lk != 1343938               // 'f64' Identifier 'while'
     && lk != 1343942               // 'i32' Identifier 'while'
     && lk != 1343943               // 'i64' Identifier 'while'
     && lk != 1347203               // Identifier '++' 'while'
     && lk != 1347204               // Null '++' 'while'
     && lk != 1347205               // True '++' 'while'
     && lk != 1347206               // False '++' 'while'
     && lk != 1347207               // Character '++' 'while'
     && lk != 1347208               // String '++' 'while'
     && lk != 1347209               // Integer '++' 'while'
     && lk != 1347210               // Complex '++' 'while'
     && lk != 1347211               // Real '++' 'while'
     && lk != 1347715               // Identifier '--' 'while'
     && lk != 1347716               // Null '--' 'while'
     && lk != 1347717               // True '--' 'while'
     && lk != 1347718               // False '--' 'while'
     && lk != 1347719               // Character '--' 'while'
     && lk != 1347720               // String '--' 'while'
     && lk != 1347721               // Integer '--' 'while'
     && lk != 1347722               // Complex '--' 'while'
     && lk != 1347723               // Real '--' 'while'
     && lk != 1350453               // '[' ']' 'while'
     && lk != 1354707               // '{' '}' 'while'
     && lk != 1360321               // 'f32' Identifier '{'
     && lk != 1360322               // 'f64' Identifier '{'
     && lk != 1360326               // 'i32' Identifier '{'
     && lk != 1360327               // 'i64' Identifier '{'
     && lk != 1366837               // '[' ']' '{'
     && lk != 1371091               // '{' '}' '{'
     && lk != 1376705               // 'f32' Identifier '|'
     && lk != 1376706               // 'f64' Identifier '|'
     && lk != 1376710               // 'i32' Identifier '|'
     && lk != 1376711               // 'i64' Identifier '|'
     && lk != 1379971               // Identifier '++' '|'
     && lk != 1379972               // Null '++' '|'
     && lk != 1379973               // True '++' '|'
     && lk != 1379974               // False '++' '|'
     && lk != 1379975               // Character '++' '|'
     && lk != 1379976               // String '++' '|'
     && lk != 1379977               // Integer '++' '|'
     && lk != 1379978               // Complex '++' '|'
     && lk != 1379979               // Real '++' '|'
     && lk != 1380483               // Identifier '--' '|'
     && lk != 1380484               // Null '--' '|'
     && lk != 1380485               // True '--' '|'
     && lk != 1380486               // False '--' '|'
     && lk != 1380487               // Character '--' '|'
     && lk != 1380488               // String '--' '|'
     && lk != 1380489               // Integer '--' '|'
     && lk != 1380490               // Complex '--' '|'
     && lk != 1380491               // Real '--' '|'
     && lk != 1383221               // '[' ']' '|'
     && lk != 1387475               // '{' '}' '|'
     && lk != 1393089               // 'f32' Identifier '|='
     && lk != 1393090               // 'f64' Identifier '|='
     && lk != 1393094               // 'i32' Identifier '|='
     && lk != 1393095               // 'i64' Identifier '|='
     && lk != 1396355               // Identifier '++' '|='
     && lk != 1396356               // Null '++' '|='
     && lk != 1396357               // True '++' '|='
     && lk != 1396358               // False '++' '|='
     && lk != 1396359               // Character '++' '|='
     && lk != 1396360               // String '++' '|='
     && lk != 1396361               // Integer '++' '|='
     && lk != 1396362               // Complex '++' '|='
     && lk != 1396363               // Real '++' '|='
     && lk != 1396867               // Identifier '--' '|='
     && lk != 1396868               // Null '--' '|='
     && lk != 1396869               // True '--' '|='
     && lk != 1396870               // False '--' '|='
     && lk != 1396871               // Character '--' '|='
     && lk != 1396872               // String '--' '|='
     && lk != 1396873               // Integer '--' '|='
     && lk != 1396874               // Complex '--' '|='
     && lk != 1396875               // Real '--' '|='
     && lk != 1399605               // '[' ']' '|='
     && lk != 1403859               // '{' '}' '|='
     && lk != 1409473               // 'f32' Identifier '||'
     && lk != 1409474               // 'f64' Identifier '||'
     && lk != 1409478               // 'i32' Identifier '||'
     && lk != 1409479               // 'i64' Identifier '||'
     && lk != 1412739               // Identifier '++' '||'
     && lk != 1412740               // Null '++' '||'
     && lk != 1412741               // True '++' '||'
     && lk != 1412742               // False '++' '||'
     && lk != 1412743               // Character '++' '||'
     && lk != 1412744               // String '++' '||'
     && lk != 1412745               // Integer '++' '||'
     && lk != 1412746               // Complex '++' '||'
     && lk != 1412747               // Real '++' '||'
     && lk != 1413251               // Identifier '--' '||'
     && lk != 1413252               // Null '--' '||'
     && lk != 1413253               // True '--' '||'
     && lk != 1413254               // False '--' '||'
     && lk != 1413255               // Character '--' '||'
     && lk != 1413256               // String '--' '||'
     && lk != 1413257               // Integer '--' '||'
     && lk != 1413258               // Complex '--' '||'
     && lk != 1413259               // Real '--' '||'
     && lk != 1415989               // '[' ']' '||'
     && lk != 1420243               // '{' '}' '||'
     && lk != 1425857               // 'f32' Identifier '}'
     && lk != 1425858               // 'f64' Identifier '}'
     && lk != 1425862               // 'i32' Identifier '}'
     && lk != 1425863               // 'i64' Identifier '}'
     && lk != 1429123               // Identifier '++' '}'
     && lk != 1429124               // Null '++' '}'
     && lk != 1429125               // True '++' '}'
     && lk != 1429126               // False '++' '}'
     && lk != 1429127               // Character '++' '}'
     && lk != 1429128               // String '++' '}'
     && lk != 1429129               // Integer '++' '}'
     && lk != 1429130               // Complex '++' '}'
     && lk != 1429131               // Real '++' '}'
     && lk != 1429635               // Identifier '--' '}'
     && lk != 1429636               // Null '--' '}'
     && lk != 1429637               // True '--' '}'
     && lk != 1429638               // False '--' '}'
     && lk != 1429639               // Character '--' '}'
     && lk != 1429640               // String '--' '}'
     && lk != 1429641               // Integer '--' '}'
     && lk != 1429642               // Complex '--' '}'
     && lk != 1429643               // Real '--' '}'
     && lk != 1432373               // '[' ']' '}'
     && lk != 1436627               // '{' '}' '}'
     && lk != 1442241               // 'f32' Identifier '~'
     && lk != 1442242               // 'f64' Identifier '~'
     && lk != 1442246               // 'i32' Identifier '~'
     && lk != 1442247               // 'i64' Identifier '~'
     && lk != 1445507               // Identifier '++' '~'
     && lk != 1445508               // Null '++' '~'
     && lk != 1445509               // True '++' '~'
     && lk != 1445510               // False '++' '~'
     && lk != 1445511               // Character '++' '~'
     && lk != 1445512               // String '++' '~'
     && lk != 1445513               // Integer '++' '~'
     && lk != 1445514               // Complex '++' '~'
     && lk != 1445515               // Real '++' '~'
     && lk != 1446019               // Identifier '--' '~'
     && lk != 1446020               // Null '--' '~'
     && lk != 1446021               // True '--' '~'
     && lk != 1446022               // False '--' '~'
     && lk != 1446023               // Character '--' '~'
     && lk != 1446024               // String '--' '~'
     && lk != 1446025               // Integer '--' '~'
     && lk != 1446026               // Complex '--' '~'
     && lk != 1446027               // Real '--' '~'
     && lk != 1448757               // '[' ']' '~'
     && lk != 1453011)              // '{' '}' '~'
    {
      lk = memoized(3, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2; var l3A = l3;
        var b3A = b3; var e3A = e3;
        try
        {
          try_Primary();
          lookahead1W(5);           // WhiteSpace^token | '++'
          consumeT(29);             // '++'
          memoize(3, e0A, -1);
          lk = -10;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
            b3 = b3A; e3 = e3A; end = e3A; }}}
            try_Primary();
            lookahead1W(6);         // WhiteSpace^token | '--'
            consumeT(33);           // '--'
            memoize(3, e0A, -2);
            lk = -10;
          }
          catch (p2A)
          {
            lk = -9;
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
            b3 = b3A; e3 = e3A; end = e3A; }}}
            memoize(3, e0A, -9);
          }
        }
      }
    }
    switch (lk)
    {
    case -1:
    case 20099:                     // Identifier '++' END
    case 20100:                     // Null '++' END
    case 20101:                     // True '++' END
    case 20102:                     // False '++' END
    case 20103:                     // Character '++' END
    case 20104:                     // String '++' END
    case 20105:                     // Integer '++' END
    case 20106:                     // Complex '++' END
    case 20107:                     // Real '++' END
    case 200323:                    // Identifier '++' Comment
    case 200324:                    // Null '++' Comment
    case 200325:                    // True '++' Comment
    case 200326:                    // False '++' Comment
    case 200327:                    // Character '++' Comment
    case 200328:                    // String '++' Comment
    case 200329:                    // Integer '++' Comment
    case 200330:                    // Complex '++' Comment
    case 200331:                    // Real '++' Comment
    case 249475:                    // Identifier '++' '!'
    case 249476:                    // Null '++' '!'
    case 249477:                    // True '++' '!'
    case 249478:                    // False '++' '!'
    case 249479:                    // Character '++' '!'
    case 249480:                    // String '++' '!'
    case 249481:                    // Integer '++' '!'
    case 249482:                    // Complex '++' '!'
    case 249483:                    // Real '++' '!'
    case 265859:                    // Identifier '++' '!='
    case 265860:                    // Null '++' '!='
    case 265861:                    // True '++' '!='
    case 265862:                    // False '++' '!='
    case 265863:                    // Character '++' '!='
    case 265864:                    // String '++' '!='
    case 265865:                    // Integer '++' '!='
    case 265866:                    // Complex '++' '!='
    case 265867:                    // Real '++' '!='
    case 298627:                    // Identifier '++' '%'
    case 298628:                    // Null '++' '%'
    case 298629:                    // True '++' '%'
    case 298630:                    // False '++' '%'
    case 298631:                    // Character '++' '%'
    case 298632:                    // String '++' '%'
    case 298633:                    // Integer '++' '%'
    case 298634:                    // Complex '++' '%'
    case 298635:                    // Real '++' '%'
    case 315011:                    // Identifier '++' '%='
    case 315012:                    // Null '++' '%='
    case 315013:                    // True '++' '%='
    case 315014:                    // False '++' '%='
    case 315015:                    // Character '++' '%='
    case 315016:                    // String '++' '%='
    case 315017:                    // Integer '++' '%='
    case 315018:                    // Complex '++' '%='
    case 315019:                    // Real '++' '%='
    case 331395:                    // Identifier '++' '&'
    case 331396:                    // Null '++' '&'
    case 331397:                    // True '++' '&'
    case 331398:                    // False '++' '&'
    case 331399:                    // Character '++' '&'
    case 331400:                    // String '++' '&'
    case 331401:                    // Integer '++' '&'
    case 331402:                    // Complex '++' '&'
    case 331403:                    // Real '++' '&'
    case 347779:                    // Identifier '++' '&&'
    case 347780:                    // Null '++' '&&'
    case 347781:                    // True '++' '&&'
    case 347782:                    // False '++' '&&'
    case 347783:                    // Character '++' '&&'
    case 347784:                    // String '++' '&&'
    case 347785:                    // Integer '++' '&&'
    case 347786:                    // Complex '++' '&&'
    case 347787:                    // Real '++' '&&'
    case 364163:                    // Identifier '++' '&='
    case 364164:                    // Null '++' '&='
    case 364165:                    // True '++' '&='
    case 364166:                    // False '++' '&='
    case 364167:                    // Character '++' '&='
    case 364168:                    // String '++' '&='
    case 364169:                    // Integer '++' '&='
    case 364170:                    // Complex '++' '&='
    case 364171:                    // Real '++' '&='
    case 396931:                    // Identifier '++' ')'
    case 396932:                    // Null '++' ')'
    case 396933:                    // True '++' ')'
    case 396934:                    // False '++' ')'
    case 396935:                    // Character '++' ')'
    case 396936:                    // String '++' ')'
    case 396937:                    // Integer '++' ')'
    case 396938:                    // Complex '++' ')'
    case 396939:                    // Real '++' ')'
    case 413315:                    // Identifier '++' '*'
    case 413316:                    // Null '++' '*'
    case 413317:                    // True '++' '*'
    case 413318:                    // False '++' '*'
    case 413319:                    // Character '++' '*'
    case 413320:                    // String '++' '*'
    case 413321:                    // Integer '++' '*'
    case 413322:                    // Complex '++' '*'
    case 413323:                    // Real '++' '*'
    case 429699:                    // Identifier '++' '**'
    case 429700:                    // Null '++' '**'
    case 429701:                    // True '++' '**'
    case 429702:                    // False '++' '**'
    case 429703:                    // Character '++' '**'
    case 429704:                    // String '++' '**'
    case 429705:                    // Integer '++' '**'
    case 429706:                    // Complex '++' '**'
    case 429707:                    // Real '++' '**'
    case 446083:                    // Identifier '++' '*='
    case 446084:                    // Null '++' '*='
    case 446085:                    // True '++' '*='
    case 446086:                    // False '++' '*='
    case 446087:                    // Character '++' '*='
    case 446088:                    // String '++' '*='
    case 446089:                    // Integer '++' '*='
    case 446090:                    // Complex '++' '*='
    case 446091:                    // Real '++' '*='
    case 462467:                    // Identifier '++' '+'
    case 462468:                    // Null '++' '+'
    case 462469:                    // True '++' '+'
    case 462470:                    // False '++' '+'
    case 462471:                    // Character '++' '+'
    case 462472:                    // String '++' '+'
    case 462473:                    // Integer '++' '+'
    case 462474:                    // Complex '++' '+'
    case 462475:                    // Real '++' '+'
    case 478851:                    // Identifier '++' '++'
    case 478852:                    // Null '++' '++'
    case 478853:                    // True '++' '++'
    case 478854:                    // False '++' '++'
    case 478855:                    // Character '++' '++'
    case 478856:                    // String '++' '++'
    case 478857:                    // Integer '++' '++'
    case 478858:                    // Complex '++' '++'
    case 478859:                    // Real '++' '++'
    case 495235:                    // Identifier '++' '+='
    case 495236:                    // Null '++' '+='
    case 495237:                    // True '++' '+='
    case 495238:                    // False '++' '+='
    case 495239:                    // Character '++' '+='
    case 495240:                    // String '++' '+='
    case 495241:                    // Integer '++' '+='
    case 495242:                    // Complex '++' '+='
    case 495243:                    // Real '++' '+='
    case 511619:                    // Identifier '++' ','
    case 511620:                    // Null '++' ','
    case 511621:                    // True '++' ','
    case 511622:                    // False '++' ','
    case 511623:                    // Character '++' ','
    case 511624:                    // String '++' ','
    case 511625:                    // Integer '++' ','
    case 511626:                    // Complex '++' ','
    case 511627:                    // Real '++' ','
    case 528003:                    // Identifier '++' '-'
    case 528004:                    // Null '++' '-'
    case 528005:                    // True '++' '-'
    case 528006:                    // False '++' '-'
    case 528007:                    // Character '++' '-'
    case 528008:                    // String '++' '-'
    case 528009:                    // Integer '++' '-'
    case 528010:                    // Complex '++' '-'
    case 528011:                    // Real '++' '-'
    case 544387:                    // Identifier '++' '--'
    case 544388:                    // Null '++' '--'
    case 544389:                    // True '++' '--'
    case 544390:                    // False '++' '--'
    case 544391:                    // Character '++' '--'
    case 544392:                    // String '++' '--'
    case 544393:                    // Integer '++' '--'
    case 544394:                    // Complex '++' '--'
    case 544395:                    // Real '++' '--'
    case 560771:                    // Identifier '++' '-='
    case 560772:                    // Null '++' '-='
    case 560773:                    // True '++' '-='
    case 560774:                    // False '++' '-='
    case 560775:                    // Character '++' '-='
    case 560776:                    // String '++' '-='
    case 560777:                    // Integer '++' '-='
    case 560778:                    // Complex '++' '-='
    case 560779:                    // Real '++' '-='
    case 593539:                    // Identifier '++' '/'
    case 593540:                    // Null '++' '/'
    case 593541:                    // True '++' '/'
    case 593542:                    // False '++' '/'
    case 593543:                    // Character '++' '/'
    case 593544:                    // String '++' '/'
    case 593545:                    // Integer '++' '/'
    case 593546:                    // Complex '++' '/'
    case 593547:                    // Real '++' '/'
    case 609923:                    // Identifier '++' '/='
    case 609924:                    // Null '++' '/='
    case 609925:                    // True '++' '/='
    case 609926:                    // False '++' '/='
    case 609927:                    // Character '++' '/='
    case 609928:                    // String '++' '/='
    case 609929:                    // Integer '++' '/='
    case 609930:                    // Complex '++' '/='
    case 609931:                    // Real '++' '/='
    case 626307:                    // Identifier '++' ':'
    case 626308:                    // Null '++' ':'
    case 626309:                    // True '++' ':'
    case 626310:                    // False '++' ':'
    case 626311:                    // Character '++' ':'
    case 626312:                    // String '++' ':'
    case 626313:                    // Integer '++' ':'
    case 626314:                    // Complex '++' ':'
    case 626315:                    // Real '++' ':'
    case 642691:                    // Identifier '++' ':='
    case 642692:                    // Null '++' ':='
    case 642693:                    // True '++' ':='
    case 642694:                    // False '++' ':='
    case 642695:                    // Character '++' ':='
    case 642696:                    // String '++' ':='
    case 642697:                    // Integer '++' ':='
    case 642698:                    // Complex '++' ':='
    case 642699:                    // Real '++' ':='
    case 659075:                    // Identifier '++' ';'
    case 659076:                    // Null '++' ';'
    case 659077:                    // True '++' ';'
    case 659078:                    // False '++' ';'
    case 659079:                    // Character '++' ';'
    case 659080:                    // String '++' ';'
    case 659081:                    // Integer '++' ';'
    case 659082:                    // Complex '++' ';'
    case 659083:                    // Real '++' ';'
    case 675459:                    // Identifier '++' '<'
    case 675460:                    // Null '++' '<'
    case 675461:                    // True '++' '<'
    case 675462:                    // False '++' '<'
    case 675463:                    // Character '++' '<'
    case 675464:                    // String '++' '<'
    case 675465:                    // Integer '++' '<'
    case 675466:                    // Complex '++' '<'
    case 675467:                    // Real '++' '<'
    case 691843:                    // Identifier '++' '<<'
    case 691844:                    // Null '++' '<<'
    case 691845:                    // True '++' '<<'
    case 691846:                    // False '++' '<<'
    case 691847:                    // Character '++' '<<'
    case 691848:                    // String '++' '<<'
    case 691849:                    // Integer '++' '<<'
    case 691850:                    // Complex '++' '<<'
    case 691851:                    // Real '++' '<<'
    case 708227:                    // Identifier '++' '<<='
    case 708228:                    // Null '++' '<<='
    case 708229:                    // True '++' '<<='
    case 708230:                    // False '++' '<<='
    case 708231:                    // Character '++' '<<='
    case 708232:                    // String '++' '<<='
    case 708233:                    // Integer '++' '<<='
    case 708234:                    // Complex '++' '<<='
    case 708235:                    // Real '++' '<<='
    case 724611:                    // Identifier '++' '<='
    case 724612:                    // Null '++' '<='
    case 724613:                    // True '++' '<='
    case 724614:                    // False '++' '<='
    case 724615:                    // Character '++' '<='
    case 724616:                    // String '++' '<='
    case 724617:                    // Integer '++' '<='
    case 724618:                    // Complex '++' '<='
    case 724619:                    // Real '++' '<='
    case 740995:                    // Identifier '++' '='
    case 740996:                    // Null '++' '='
    case 740997:                    // True '++' '='
    case 740998:                    // False '++' '='
    case 740999:                    // Character '++' '='
    case 741000:                    // String '++' '='
    case 741001:                    // Integer '++' '='
    case 741002:                    // Complex '++' '='
    case 741003:                    // Real '++' '='
    case 757379:                    // Identifier '++' '=='
    case 757380:                    // Null '++' '=='
    case 757381:                    // True '++' '=='
    case 757382:                    // False '++' '=='
    case 757383:                    // Character '++' '=='
    case 757384:                    // String '++' '=='
    case 757385:                    // Integer '++' '=='
    case 757386:                    // Complex '++' '=='
    case 757387:                    // Real '++' '=='
    case 773763:                    // Identifier '++' '>'
    case 773764:                    // Null '++' '>'
    case 773765:                    // True '++' '>'
    case 773766:                    // False '++' '>'
    case 773767:                    // Character '++' '>'
    case 773768:                    // String '++' '>'
    case 773769:                    // Integer '++' '>'
    case 773770:                    // Complex '++' '>'
    case 773771:                    // Real '++' '>'
    case 790147:                    // Identifier '++' '>='
    case 790148:                    // Null '++' '>='
    case 790149:                    // True '++' '>='
    case 790150:                    // False '++' '>='
    case 790151:                    // Character '++' '>='
    case 790152:                    // String '++' '>='
    case 790153:                    // Integer '++' '>='
    case 790154:                    // Complex '++' '>='
    case 790155:                    // Real '++' '>='
    case 806531:                    // Identifier '++' '>>'
    case 806532:                    // Null '++' '>>'
    case 806533:                    // True '++' '>>'
    case 806534:                    // False '++' '>>'
    case 806535:                    // Character '++' '>>'
    case 806536:                    // String '++' '>>'
    case 806537:                    // Integer '++' '>>'
    case 806538:                    // Complex '++' '>>'
    case 806539:                    // Real '++' '>>'
    case 822915:                    // Identifier '++' '>>='
    case 822916:                    // Null '++' '>>='
    case 822917:                    // True '++' '>>='
    case 822918:                    // False '++' '>>='
    case 822919:                    // Character '++' '>>='
    case 822920:                    // String '++' '>>='
    case 822921:                    // Integer '++' '>>='
    case 822922:                    // Complex '++' '>>='
    case 822923:                    // Real '++' '>>='
    case 839299:                    // Identifier '++' '?'
    case 839300:                    // Null '++' '?'
    case 839301:                    // True '++' '?'
    case 839302:                    // False '++' '?'
    case 839303:                    // Character '++' '?'
    case 839304:                    // String '++' '?'
    case 839305:                    // Integer '++' '?'
    case 839306:                    // Complex '++' '?'
    case 839307:                    // Real '++' '?'
    case 855683:                    // Identifier '++' '?='
    case 855684:                    // Null '++' '?='
    case 855685:                    // True '++' '?='
    case 855686:                    // False '++' '?='
    case 855687:                    // Character '++' '?='
    case 855688:                    // String '++' '?='
    case 855689:                    // Integer '++' '?='
    case 855690:                    // Complex '++' '?='
    case 855691:                    // Real '++' '?='
    case 888451:                    // Identifier '++' ']'
    case 888452:                    // Null '++' ']'
    case 888453:                    // True '++' ']'
    case 888454:                    // False '++' ']'
    case 888455:                    // Character '++' ']'
    case 888456:                    // String '++' ']'
    case 888457:                    // Integer '++' ']'
    case 888458:                    // Complex '++' ']'
    case 888459:                    // Real '++' ']'
    case 904835:                    // Identifier '++' '^'
    case 904836:                    // Null '++' '^'
    case 904837:                    // True '++' '^'
    case 904838:                    // False '++' '^'
    case 904839:                    // Character '++' '^'
    case 904840:                    // String '++' '^'
    case 904841:                    // Integer '++' '^'
    case 904842:                    // Complex '++' '^'
    case 904843:                    // Real '++' '^'
    case 921219:                    // Identifier '++' '^='
    case 921220:                    // Null '++' '^='
    case 921221:                    // True '++' '^='
    case 921222:                    // False '++' '^='
    case 921223:                    // Character '++' '^='
    case 921224:                    // String '++' '^='
    case 921225:                    // Integer '++' '^='
    case 921226:                    // Complex '++' '^='
    case 921227:                    // Real '++' '^='
    case 937603:                    // Identifier '++' 'break'
    case 937604:                    // Null '++' 'break'
    case 937605:                    // True '++' 'break'
    case 937606:                    // False '++' 'break'
    case 937607:                    // Character '++' 'break'
    case 937608:                    // String '++' 'break'
    case 937609:                    // Integer '++' 'break'
    case 937610:                    // Complex '++' 'break'
    case 937611:                    // Real '++' 'break'
    case 953987:                    // Identifier '++' 'case'
    case 953988:                    // Null '++' 'case'
    case 953989:                    // True '++' 'case'
    case 953990:                    // False '++' 'case'
    case 953991:                    // Character '++' 'case'
    case 953992:                    // String '++' 'case'
    case 953993:                    // Integer '++' 'case'
    case 953994:                    // Complex '++' 'case'
    case 953995:                    // Real '++' 'case'
    case 970371:                    // Identifier '++' 'catch'
    case 970372:                    // Null '++' 'catch'
    case 970373:                    // True '++' 'catch'
    case 970374:                    // False '++' 'catch'
    case 970375:                    // Character '++' 'catch'
    case 970376:                    // String '++' 'catch'
    case 970377:                    // Integer '++' 'catch'
    case 970378:                    // Complex '++' 'catch'
    case 970379:                    // Real '++' 'catch'
    case 986755:                    // Identifier '++' 'continue'
    case 986756:                    // Null '++' 'continue'
    case 986757:                    // True '++' 'continue'
    case 986758:                    // False '++' 'continue'
    case 986759:                    // Character '++' 'continue'
    case 986760:                    // String '++' 'continue'
    case 986761:                    // Integer '++' 'continue'
    case 986762:                    // Complex '++' 'continue'
    case 986763:                    // Real '++' 'continue'
    case 1003139:                   // Identifier '++' 'default'
    case 1003140:                   // Null '++' 'default'
    case 1003141:                   // True '++' 'default'
    case 1003142:                   // False '++' 'default'
    case 1003143:                   // Character '++' 'default'
    case 1003144:                   // String '++' 'default'
    case 1003145:                   // Integer '++' 'default'
    case 1003146:                   // Complex '++' 'default'
    case 1003147:                   // Real '++' 'default'
    case 1019523:                   // Identifier '++' 'do'
    case 1019524:                   // Null '++' 'do'
    case 1019525:                   // True '++' 'do'
    case 1019526:                   // False '++' 'do'
    case 1019527:                   // Character '++' 'do'
    case 1019528:                   // String '++' 'do'
    case 1019529:                   // Integer '++' 'do'
    case 1019530:                   // Complex '++' 'do'
    case 1019531:                   // Real '++' 'do'
    case 1035907:                   // Identifier '++' 'else'
    case 1035908:                   // Null '++' 'else'
    case 1035909:                   // True '++' 'else'
    case 1035910:                   // False '++' 'else'
    case 1035911:                   // Character '++' 'else'
    case 1035912:                   // String '++' 'else'
    case 1035913:                   // Integer '++' 'else'
    case 1035914:                   // Complex '++' 'else'
    case 1035915:                   // Real '++' 'else'
    case 1052291:                   // Identifier '++' 'export'
    case 1052292:                   // Null '++' 'export'
    case 1052293:                   // True '++' 'export'
    case 1052294:                   // False '++' 'export'
    case 1052295:                   // Character '++' 'export'
    case 1052296:                   // String '++' 'export'
    case 1052297:                   // Integer '++' 'export'
    case 1052298:                   // Complex '++' 'export'
    case 1052299:                   // Real '++' 'export'
    case 1101443:                   // Identifier '++' 'for'
    case 1101444:                   // Null '++' 'for'
    case 1101445:                   // True '++' 'for'
    case 1101446:                   // False '++' 'for'
    case 1101447:                   // Character '++' 'for'
    case 1101448:                   // String '++' 'for'
    case 1101449:                   // Integer '++' 'for'
    case 1101450:                   // Complex '++' 'for'
    case 1101451:                   // Real '++' 'for'
    case 1117827:                   // Identifier '++' 'foreach'
    case 1117828:                   // Null '++' 'foreach'
    case 1117829:                   // True '++' 'foreach'
    case 1117830:                   // False '++' 'foreach'
    case 1117831:                   // Character '++' 'foreach'
    case 1117832:                   // String '++' 'foreach'
    case 1117833:                   // Integer '++' 'foreach'
    case 1117834:                   // Complex '++' 'foreach'
    case 1117835:                   // Real '++' 'foreach'
    case 1134211:                   // Identifier '++' 'global'
    case 1134212:                   // Null '++' 'global'
    case 1134213:                   // True '++' 'global'
    case 1134214:                   // False '++' 'global'
    case 1134215:                   // Character '++' 'global'
    case 1134216:                   // String '++' 'global'
    case 1134217:                   // Integer '++' 'global'
    case 1134218:                   // Complex '++' 'global'
    case 1134219:                   // Real '++' 'global'
    case 1183363:                   // Identifier '++' 'if'
    case 1183364:                   // Null '++' 'if'
    case 1183365:                   // True '++' 'if'
    case 1183366:                   // False '++' 'if'
    case 1183367:                   // Character '++' 'if'
    case 1183368:                   // String '++' 'if'
    case 1183369:                   // Integer '++' 'if'
    case 1183370:                   // Complex '++' 'if'
    case 1183371:                   // Real '++' 'if'
    case 1199747:                   // Identifier '++' 'import'
    case 1199748:                   // Null '++' 'import'
    case 1199749:                   // True '++' 'import'
    case 1199750:                   // False '++' 'import'
    case 1199751:                   // Character '++' 'import'
    case 1199752:                   // String '++' 'import'
    case 1199753:                   // Integer '++' 'import'
    case 1199754:                   // Complex '++' 'import'
    case 1199755:                   // Real '++' 'import'
    case 1216131:                   // Identifier '++' 'include'
    case 1216132:                   // Null '++' 'include'
    case 1216133:                   // True '++' 'include'
    case 1216134:                   // False '++' 'include'
    case 1216135:                   // Character '++' 'include'
    case 1216136:                   // String '++' 'include'
    case 1216137:                   // Integer '++' 'include'
    case 1216138:                   // Complex '++' 'include'
    case 1216139:                   // Real '++' 'include'
    case 1232515:                   // Identifier '++' 'local'
    case 1232516:                   // Null '++' 'local'
    case 1232517:                   // True '++' 'local'
    case 1232518:                   // False '++' 'local'
    case 1232519:                   // Character '++' 'local'
    case 1232520:                   // String '++' 'local'
    case 1232521:                   // Integer '++' 'local'
    case 1232522:                   // Complex '++' 'local'
    case 1232523:                   // Real '++' 'local'
    case 1248899:                   // Identifier '++' 'return'
    case 1248900:                   // Null '++' 'return'
    case 1248901:                   // True '++' 'return'
    case 1248902:                   // False '++' 'return'
    case 1248903:                   // Character '++' 'return'
    case 1248904:                   // String '++' 'return'
    case 1248905:                   // Integer '++' 'return'
    case 1248906:                   // Complex '++' 'return'
    case 1248907:                   // Real '++' 'return'
    case 1265283:                   // Identifier '++' 'switch'
    case 1265284:                   // Null '++' 'switch'
    case 1265285:                   // True '++' 'switch'
    case 1265286:                   // False '++' 'switch'
    case 1265287:                   // Character '++' 'switch'
    case 1265288:                   // String '++' 'switch'
    case 1265289:                   // Integer '++' 'switch'
    case 1265290:                   // Complex '++' 'switch'
    case 1265291:                   // Real '++' 'switch'
    case 1281667:                   // Identifier '++' 'test'
    case 1281668:                   // Null '++' 'test'
    case 1281669:                   // True '++' 'test'
    case 1281670:                   // False '++' 'test'
    case 1281671:                   // Character '++' 'test'
    case 1281672:                   // String '++' 'test'
    case 1281673:                   // Integer '++' 'test'
    case 1281674:                   // Complex '++' 'test'
    case 1281675:                   // Real '++' 'test'
    case 1298051:                   // Identifier '++' 'throw'
    case 1298052:                   // Null '++' 'throw'
    case 1298053:                   // True '++' 'throw'
    case 1298054:                   // False '++' 'throw'
    case 1298055:                   // Character '++' 'throw'
    case 1298056:                   // String '++' 'throw'
    case 1298057:                   // Integer '++' 'throw'
    case 1298058:                   // Complex '++' 'throw'
    case 1298059:                   // Real '++' 'throw'
    case 1314435:                   // Identifier '++' 'try'
    case 1314436:                   // Null '++' 'try'
    case 1314437:                   // True '++' 'try'
    case 1314438:                   // False '++' 'try'
    case 1314439:                   // Character '++' 'try'
    case 1314440:                   // String '++' 'try'
    case 1314441:                   // Integer '++' 'try'
    case 1314442:                   // Complex '++' 'try'
    case 1314443:                   // Real '++' 'try'
    case 1330819:                   // Identifier '++' 'typeof'
    case 1330820:                   // Null '++' 'typeof'
    case 1330821:                   // True '++' 'typeof'
    case 1330822:                   // False '++' 'typeof'
    case 1330823:                   // Character '++' 'typeof'
    case 1330824:                   // String '++' 'typeof'
    case 1330825:                   // Integer '++' 'typeof'
    case 1330826:                   // Complex '++' 'typeof'
    case 1330827:                   // Real '++' 'typeof'
    case 1347203:                   // Identifier '++' 'while'
    case 1347204:                   // Null '++' 'while'
    case 1347205:                   // True '++' 'while'
    case 1347206:                   // False '++' 'while'
    case 1347207:                   // Character '++' 'while'
    case 1347208:                   // String '++' 'while'
    case 1347209:                   // Integer '++' 'while'
    case 1347210:                   // Complex '++' 'while'
    case 1347211:                   // Real '++' 'while'
    case 1379971:                   // Identifier '++' '|'
    case 1379972:                   // Null '++' '|'
    case 1379973:                   // True '++' '|'
    case 1379974:                   // False '++' '|'
    case 1379975:                   // Character '++' '|'
    case 1379976:                   // String '++' '|'
    case 1379977:                   // Integer '++' '|'
    case 1379978:                   // Complex '++' '|'
    case 1379979:                   // Real '++' '|'
    case 1396355:                   // Identifier '++' '|='
    case 1396356:                   // Null '++' '|='
    case 1396357:                   // True '++' '|='
    case 1396358:                   // False '++' '|='
    case 1396359:                   // Character '++' '|='
    case 1396360:                   // String '++' '|='
    case 1396361:                   // Integer '++' '|='
    case 1396362:                   // Complex '++' '|='
    case 1396363:                   // Real '++' '|='
    case 1412739:                   // Identifier '++' '||'
    case 1412740:                   // Null '++' '||'
    case 1412741:                   // True '++' '||'
    case 1412742:                   // False '++' '||'
    case 1412743:                   // Character '++' '||'
    case 1412744:                   // String '++' '||'
    case 1412745:                   // Integer '++' '||'
    case 1412746:                   // Complex '++' '||'
    case 1412747:                   // Real '++' '||'
    case 1429123:                   // Identifier '++' '}'
    case 1429124:                   // Null '++' '}'
    case 1429125:                   // True '++' '}'
    case 1429126:                   // False '++' '}'
    case 1429127:                   // Character '++' '}'
    case 1429128:                   // String '++' '}'
    case 1429129:                   // Integer '++' '}'
    case 1429130:                   // Complex '++' '}'
    case 1429131:                   // Real '++' '}'
    case 1445507:                   // Identifier '++' '~'
    case 1445508:                   // Null '++' '~'
    case 1445509:                   // True '++' '~'
    case 1445510:                   // False '++' '~'
    case 1445511:                   // Character '++' '~'
    case 1445512:                   // String '++' '~'
    case 1445513:                   // Integer '++' '~'
    case 1445514:                   // Complex '++' '~'
    case 1445515:                   // Real '++' '~'
      try_Primary();
      lookahead1W(5);               // WhiteSpace^token | '++'
      consumeT(29);                 // '++'
      break;
    case -2:
    case 20611:                     // Identifier '--' END
    case 20612:                     // Null '--' END
    case 20613:                     // True '--' END
    case 20614:                     // False '--' END
    case 20615:                     // Character '--' END
    case 20616:                     // String '--' END
    case 20617:                     // Integer '--' END
    case 20618:                     // Complex '--' END
    case 20619:                     // Real '--' END
    case 200835:                    // Identifier '--' Comment
    case 200836:                    // Null '--' Comment
    case 200837:                    // True '--' Comment
    case 200838:                    // False '--' Comment
    case 200839:                    // Character '--' Comment
    case 200840:                    // String '--' Comment
    case 200841:                    // Integer '--' Comment
    case 200842:                    // Complex '--' Comment
    case 200843:                    // Real '--' Comment
    case 249987:                    // Identifier '--' '!'
    case 249988:                    // Null '--' '!'
    case 249989:                    // True '--' '!'
    case 249990:                    // False '--' '!'
    case 249991:                    // Character '--' '!'
    case 249992:                    // String '--' '!'
    case 249993:                    // Integer '--' '!'
    case 249994:                    // Complex '--' '!'
    case 249995:                    // Real '--' '!'
    case 266371:                    // Identifier '--' '!='
    case 266372:                    // Null '--' '!='
    case 266373:                    // True '--' '!='
    case 266374:                    // False '--' '!='
    case 266375:                    // Character '--' '!='
    case 266376:                    // String '--' '!='
    case 266377:                    // Integer '--' '!='
    case 266378:                    // Complex '--' '!='
    case 266379:                    // Real '--' '!='
    case 299139:                    // Identifier '--' '%'
    case 299140:                    // Null '--' '%'
    case 299141:                    // True '--' '%'
    case 299142:                    // False '--' '%'
    case 299143:                    // Character '--' '%'
    case 299144:                    // String '--' '%'
    case 299145:                    // Integer '--' '%'
    case 299146:                    // Complex '--' '%'
    case 299147:                    // Real '--' '%'
    case 315523:                    // Identifier '--' '%='
    case 315524:                    // Null '--' '%='
    case 315525:                    // True '--' '%='
    case 315526:                    // False '--' '%='
    case 315527:                    // Character '--' '%='
    case 315528:                    // String '--' '%='
    case 315529:                    // Integer '--' '%='
    case 315530:                    // Complex '--' '%='
    case 315531:                    // Real '--' '%='
    case 331907:                    // Identifier '--' '&'
    case 331908:                    // Null '--' '&'
    case 331909:                    // True '--' '&'
    case 331910:                    // False '--' '&'
    case 331911:                    // Character '--' '&'
    case 331912:                    // String '--' '&'
    case 331913:                    // Integer '--' '&'
    case 331914:                    // Complex '--' '&'
    case 331915:                    // Real '--' '&'
    case 348291:                    // Identifier '--' '&&'
    case 348292:                    // Null '--' '&&'
    case 348293:                    // True '--' '&&'
    case 348294:                    // False '--' '&&'
    case 348295:                    // Character '--' '&&'
    case 348296:                    // String '--' '&&'
    case 348297:                    // Integer '--' '&&'
    case 348298:                    // Complex '--' '&&'
    case 348299:                    // Real '--' '&&'
    case 364675:                    // Identifier '--' '&='
    case 364676:                    // Null '--' '&='
    case 364677:                    // True '--' '&='
    case 364678:                    // False '--' '&='
    case 364679:                    // Character '--' '&='
    case 364680:                    // String '--' '&='
    case 364681:                    // Integer '--' '&='
    case 364682:                    // Complex '--' '&='
    case 364683:                    // Real '--' '&='
    case 397443:                    // Identifier '--' ')'
    case 397444:                    // Null '--' ')'
    case 397445:                    // True '--' ')'
    case 397446:                    // False '--' ')'
    case 397447:                    // Character '--' ')'
    case 397448:                    // String '--' ')'
    case 397449:                    // Integer '--' ')'
    case 397450:                    // Complex '--' ')'
    case 397451:                    // Real '--' ')'
    case 413827:                    // Identifier '--' '*'
    case 413828:                    // Null '--' '*'
    case 413829:                    // True '--' '*'
    case 413830:                    // False '--' '*'
    case 413831:                    // Character '--' '*'
    case 413832:                    // String '--' '*'
    case 413833:                    // Integer '--' '*'
    case 413834:                    // Complex '--' '*'
    case 413835:                    // Real '--' '*'
    case 430211:                    // Identifier '--' '**'
    case 430212:                    // Null '--' '**'
    case 430213:                    // True '--' '**'
    case 430214:                    // False '--' '**'
    case 430215:                    // Character '--' '**'
    case 430216:                    // String '--' '**'
    case 430217:                    // Integer '--' '**'
    case 430218:                    // Complex '--' '**'
    case 430219:                    // Real '--' '**'
    case 446595:                    // Identifier '--' '*='
    case 446596:                    // Null '--' '*='
    case 446597:                    // True '--' '*='
    case 446598:                    // False '--' '*='
    case 446599:                    // Character '--' '*='
    case 446600:                    // String '--' '*='
    case 446601:                    // Integer '--' '*='
    case 446602:                    // Complex '--' '*='
    case 446603:                    // Real '--' '*='
    case 462979:                    // Identifier '--' '+'
    case 462980:                    // Null '--' '+'
    case 462981:                    // True '--' '+'
    case 462982:                    // False '--' '+'
    case 462983:                    // Character '--' '+'
    case 462984:                    // String '--' '+'
    case 462985:                    // Integer '--' '+'
    case 462986:                    // Complex '--' '+'
    case 462987:                    // Real '--' '+'
    case 479363:                    // Identifier '--' '++'
    case 479364:                    // Null '--' '++'
    case 479365:                    // True '--' '++'
    case 479366:                    // False '--' '++'
    case 479367:                    // Character '--' '++'
    case 479368:                    // String '--' '++'
    case 479369:                    // Integer '--' '++'
    case 479370:                    // Complex '--' '++'
    case 479371:                    // Real '--' '++'
    case 495747:                    // Identifier '--' '+='
    case 495748:                    // Null '--' '+='
    case 495749:                    // True '--' '+='
    case 495750:                    // False '--' '+='
    case 495751:                    // Character '--' '+='
    case 495752:                    // String '--' '+='
    case 495753:                    // Integer '--' '+='
    case 495754:                    // Complex '--' '+='
    case 495755:                    // Real '--' '+='
    case 512131:                    // Identifier '--' ','
    case 512132:                    // Null '--' ','
    case 512133:                    // True '--' ','
    case 512134:                    // False '--' ','
    case 512135:                    // Character '--' ','
    case 512136:                    // String '--' ','
    case 512137:                    // Integer '--' ','
    case 512138:                    // Complex '--' ','
    case 512139:                    // Real '--' ','
    case 528515:                    // Identifier '--' '-'
    case 528516:                    // Null '--' '-'
    case 528517:                    // True '--' '-'
    case 528518:                    // False '--' '-'
    case 528519:                    // Character '--' '-'
    case 528520:                    // String '--' '-'
    case 528521:                    // Integer '--' '-'
    case 528522:                    // Complex '--' '-'
    case 528523:                    // Real '--' '-'
    case 544899:                    // Identifier '--' '--'
    case 544900:                    // Null '--' '--'
    case 544901:                    // True '--' '--'
    case 544902:                    // False '--' '--'
    case 544903:                    // Character '--' '--'
    case 544904:                    // String '--' '--'
    case 544905:                    // Integer '--' '--'
    case 544906:                    // Complex '--' '--'
    case 544907:                    // Real '--' '--'
    case 561283:                    // Identifier '--' '-='
    case 561284:                    // Null '--' '-='
    case 561285:                    // True '--' '-='
    case 561286:                    // False '--' '-='
    case 561287:                    // Character '--' '-='
    case 561288:                    // String '--' '-='
    case 561289:                    // Integer '--' '-='
    case 561290:                    // Complex '--' '-='
    case 561291:                    // Real '--' '-='
    case 594051:                    // Identifier '--' '/'
    case 594052:                    // Null '--' '/'
    case 594053:                    // True '--' '/'
    case 594054:                    // False '--' '/'
    case 594055:                    // Character '--' '/'
    case 594056:                    // String '--' '/'
    case 594057:                    // Integer '--' '/'
    case 594058:                    // Complex '--' '/'
    case 594059:                    // Real '--' '/'
    case 610435:                    // Identifier '--' '/='
    case 610436:                    // Null '--' '/='
    case 610437:                    // True '--' '/='
    case 610438:                    // False '--' '/='
    case 610439:                    // Character '--' '/='
    case 610440:                    // String '--' '/='
    case 610441:                    // Integer '--' '/='
    case 610442:                    // Complex '--' '/='
    case 610443:                    // Real '--' '/='
    case 626819:                    // Identifier '--' ':'
    case 626820:                    // Null '--' ':'
    case 626821:                    // True '--' ':'
    case 626822:                    // False '--' ':'
    case 626823:                    // Character '--' ':'
    case 626824:                    // String '--' ':'
    case 626825:                    // Integer '--' ':'
    case 626826:                    // Complex '--' ':'
    case 626827:                    // Real '--' ':'
    case 643203:                    // Identifier '--' ':='
    case 643204:                    // Null '--' ':='
    case 643205:                    // True '--' ':='
    case 643206:                    // False '--' ':='
    case 643207:                    // Character '--' ':='
    case 643208:                    // String '--' ':='
    case 643209:                    // Integer '--' ':='
    case 643210:                    // Complex '--' ':='
    case 643211:                    // Real '--' ':='
    case 659587:                    // Identifier '--' ';'
    case 659588:                    // Null '--' ';'
    case 659589:                    // True '--' ';'
    case 659590:                    // False '--' ';'
    case 659591:                    // Character '--' ';'
    case 659592:                    // String '--' ';'
    case 659593:                    // Integer '--' ';'
    case 659594:                    // Complex '--' ';'
    case 659595:                    // Real '--' ';'
    case 675971:                    // Identifier '--' '<'
    case 675972:                    // Null '--' '<'
    case 675973:                    // True '--' '<'
    case 675974:                    // False '--' '<'
    case 675975:                    // Character '--' '<'
    case 675976:                    // String '--' '<'
    case 675977:                    // Integer '--' '<'
    case 675978:                    // Complex '--' '<'
    case 675979:                    // Real '--' '<'
    case 692355:                    // Identifier '--' '<<'
    case 692356:                    // Null '--' '<<'
    case 692357:                    // True '--' '<<'
    case 692358:                    // False '--' '<<'
    case 692359:                    // Character '--' '<<'
    case 692360:                    // String '--' '<<'
    case 692361:                    // Integer '--' '<<'
    case 692362:                    // Complex '--' '<<'
    case 692363:                    // Real '--' '<<'
    case 708739:                    // Identifier '--' '<<='
    case 708740:                    // Null '--' '<<='
    case 708741:                    // True '--' '<<='
    case 708742:                    // False '--' '<<='
    case 708743:                    // Character '--' '<<='
    case 708744:                    // String '--' '<<='
    case 708745:                    // Integer '--' '<<='
    case 708746:                    // Complex '--' '<<='
    case 708747:                    // Real '--' '<<='
    case 725123:                    // Identifier '--' '<='
    case 725124:                    // Null '--' '<='
    case 725125:                    // True '--' '<='
    case 725126:                    // False '--' '<='
    case 725127:                    // Character '--' '<='
    case 725128:                    // String '--' '<='
    case 725129:                    // Integer '--' '<='
    case 725130:                    // Complex '--' '<='
    case 725131:                    // Real '--' '<='
    case 741507:                    // Identifier '--' '='
    case 741508:                    // Null '--' '='
    case 741509:                    // True '--' '='
    case 741510:                    // False '--' '='
    case 741511:                    // Character '--' '='
    case 741512:                    // String '--' '='
    case 741513:                    // Integer '--' '='
    case 741514:                    // Complex '--' '='
    case 741515:                    // Real '--' '='
    case 757891:                    // Identifier '--' '=='
    case 757892:                    // Null '--' '=='
    case 757893:                    // True '--' '=='
    case 757894:                    // False '--' '=='
    case 757895:                    // Character '--' '=='
    case 757896:                    // String '--' '=='
    case 757897:                    // Integer '--' '=='
    case 757898:                    // Complex '--' '=='
    case 757899:                    // Real '--' '=='
    case 774275:                    // Identifier '--' '>'
    case 774276:                    // Null '--' '>'
    case 774277:                    // True '--' '>'
    case 774278:                    // False '--' '>'
    case 774279:                    // Character '--' '>'
    case 774280:                    // String '--' '>'
    case 774281:                    // Integer '--' '>'
    case 774282:                    // Complex '--' '>'
    case 774283:                    // Real '--' '>'
    case 790659:                    // Identifier '--' '>='
    case 790660:                    // Null '--' '>='
    case 790661:                    // True '--' '>='
    case 790662:                    // False '--' '>='
    case 790663:                    // Character '--' '>='
    case 790664:                    // String '--' '>='
    case 790665:                    // Integer '--' '>='
    case 790666:                    // Complex '--' '>='
    case 790667:                    // Real '--' '>='
    case 807043:                    // Identifier '--' '>>'
    case 807044:                    // Null '--' '>>'
    case 807045:                    // True '--' '>>'
    case 807046:                    // False '--' '>>'
    case 807047:                    // Character '--' '>>'
    case 807048:                    // String '--' '>>'
    case 807049:                    // Integer '--' '>>'
    case 807050:                    // Complex '--' '>>'
    case 807051:                    // Real '--' '>>'
    case 823427:                    // Identifier '--' '>>='
    case 823428:                    // Null '--' '>>='
    case 823429:                    // True '--' '>>='
    case 823430:                    // False '--' '>>='
    case 823431:                    // Character '--' '>>='
    case 823432:                    // String '--' '>>='
    case 823433:                    // Integer '--' '>>='
    case 823434:                    // Complex '--' '>>='
    case 823435:                    // Real '--' '>>='
    case 839811:                    // Identifier '--' '?'
    case 839812:                    // Null '--' '?'
    case 839813:                    // True '--' '?'
    case 839814:                    // False '--' '?'
    case 839815:                    // Character '--' '?'
    case 839816:                    // String '--' '?'
    case 839817:                    // Integer '--' '?'
    case 839818:                    // Complex '--' '?'
    case 839819:                    // Real '--' '?'
    case 856195:                    // Identifier '--' '?='
    case 856196:                    // Null '--' '?='
    case 856197:                    // True '--' '?='
    case 856198:                    // False '--' '?='
    case 856199:                    // Character '--' '?='
    case 856200:                    // String '--' '?='
    case 856201:                    // Integer '--' '?='
    case 856202:                    // Complex '--' '?='
    case 856203:                    // Real '--' '?='
    case 888963:                    // Identifier '--' ']'
    case 888964:                    // Null '--' ']'
    case 888965:                    // True '--' ']'
    case 888966:                    // False '--' ']'
    case 888967:                    // Character '--' ']'
    case 888968:                    // String '--' ']'
    case 888969:                    // Integer '--' ']'
    case 888970:                    // Complex '--' ']'
    case 888971:                    // Real '--' ']'
    case 905347:                    // Identifier '--' '^'
    case 905348:                    // Null '--' '^'
    case 905349:                    // True '--' '^'
    case 905350:                    // False '--' '^'
    case 905351:                    // Character '--' '^'
    case 905352:                    // String '--' '^'
    case 905353:                    // Integer '--' '^'
    case 905354:                    // Complex '--' '^'
    case 905355:                    // Real '--' '^'
    case 921731:                    // Identifier '--' '^='
    case 921732:                    // Null '--' '^='
    case 921733:                    // True '--' '^='
    case 921734:                    // False '--' '^='
    case 921735:                    // Character '--' '^='
    case 921736:                    // String '--' '^='
    case 921737:                    // Integer '--' '^='
    case 921738:                    // Complex '--' '^='
    case 921739:                    // Real '--' '^='
    case 938115:                    // Identifier '--' 'break'
    case 938116:                    // Null '--' 'break'
    case 938117:                    // True '--' 'break'
    case 938118:                    // False '--' 'break'
    case 938119:                    // Character '--' 'break'
    case 938120:                    // String '--' 'break'
    case 938121:                    // Integer '--' 'break'
    case 938122:                    // Complex '--' 'break'
    case 938123:                    // Real '--' 'break'
    case 954499:                    // Identifier '--' 'case'
    case 954500:                    // Null '--' 'case'
    case 954501:                    // True '--' 'case'
    case 954502:                    // False '--' 'case'
    case 954503:                    // Character '--' 'case'
    case 954504:                    // String '--' 'case'
    case 954505:                    // Integer '--' 'case'
    case 954506:                    // Complex '--' 'case'
    case 954507:                    // Real '--' 'case'
    case 970883:                    // Identifier '--' 'catch'
    case 970884:                    // Null '--' 'catch'
    case 970885:                    // True '--' 'catch'
    case 970886:                    // False '--' 'catch'
    case 970887:                    // Character '--' 'catch'
    case 970888:                    // String '--' 'catch'
    case 970889:                    // Integer '--' 'catch'
    case 970890:                    // Complex '--' 'catch'
    case 970891:                    // Real '--' 'catch'
    case 987267:                    // Identifier '--' 'continue'
    case 987268:                    // Null '--' 'continue'
    case 987269:                    // True '--' 'continue'
    case 987270:                    // False '--' 'continue'
    case 987271:                    // Character '--' 'continue'
    case 987272:                    // String '--' 'continue'
    case 987273:                    // Integer '--' 'continue'
    case 987274:                    // Complex '--' 'continue'
    case 987275:                    // Real '--' 'continue'
    case 1003651:                   // Identifier '--' 'default'
    case 1003652:                   // Null '--' 'default'
    case 1003653:                   // True '--' 'default'
    case 1003654:                   // False '--' 'default'
    case 1003655:                   // Character '--' 'default'
    case 1003656:                   // String '--' 'default'
    case 1003657:                   // Integer '--' 'default'
    case 1003658:                   // Complex '--' 'default'
    case 1003659:                   // Real '--' 'default'
    case 1020035:                   // Identifier '--' 'do'
    case 1020036:                   // Null '--' 'do'
    case 1020037:                   // True '--' 'do'
    case 1020038:                   // False '--' 'do'
    case 1020039:                   // Character '--' 'do'
    case 1020040:                   // String '--' 'do'
    case 1020041:                   // Integer '--' 'do'
    case 1020042:                   // Complex '--' 'do'
    case 1020043:                   // Real '--' 'do'
    case 1036419:                   // Identifier '--' 'else'
    case 1036420:                   // Null '--' 'else'
    case 1036421:                   // True '--' 'else'
    case 1036422:                   // False '--' 'else'
    case 1036423:                   // Character '--' 'else'
    case 1036424:                   // String '--' 'else'
    case 1036425:                   // Integer '--' 'else'
    case 1036426:                   // Complex '--' 'else'
    case 1036427:                   // Real '--' 'else'
    case 1052803:                   // Identifier '--' 'export'
    case 1052804:                   // Null '--' 'export'
    case 1052805:                   // True '--' 'export'
    case 1052806:                   // False '--' 'export'
    case 1052807:                   // Character '--' 'export'
    case 1052808:                   // String '--' 'export'
    case 1052809:                   // Integer '--' 'export'
    case 1052810:                   // Complex '--' 'export'
    case 1052811:                   // Real '--' 'export'
    case 1101955:                   // Identifier '--' 'for'
    case 1101956:                   // Null '--' 'for'
    case 1101957:                   // True '--' 'for'
    case 1101958:                   // False '--' 'for'
    case 1101959:                   // Character '--' 'for'
    case 1101960:                   // String '--' 'for'
    case 1101961:                   // Integer '--' 'for'
    case 1101962:                   // Complex '--' 'for'
    case 1101963:                   // Real '--' 'for'
    case 1118339:                   // Identifier '--' 'foreach'
    case 1118340:                   // Null '--' 'foreach'
    case 1118341:                   // True '--' 'foreach'
    case 1118342:                   // False '--' 'foreach'
    case 1118343:                   // Character '--' 'foreach'
    case 1118344:                   // String '--' 'foreach'
    case 1118345:                   // Integer '--' 'foreach'
    case 1118346:                   // Complex '--' 'foreach'
    case 1118347:                   // Real '--' 'foreach'
    case 1134723:                   // Identifier '--' 'global'
    case 1134724:                   // Null '--' 'global'
    case 1134725:                   // True '--' 'global'
    case 1134726:                   // False '--' 'global'
    case 1134727:                   // Character '--' 'global'
    case 1134728:                   // String '--' 'global'
    case 1134729:                   // Integer '--' 'global'
    case 1134730:                   // Complex '--' 'global'
    case 1134731:                   // Real '--' 'global'
    case 1183875:                   // Identifier '--' 'if'
    case 1183876:                   // Null '--' 'if'
    case 1183877:                   // True '--' 'if'
    case 1183878:                   // False '--' 'if'
    case 1183879:                   // Character '--' 'if'
    case 1183880:                   // String '--' 'if'
    case 1183881:                   // Integer '--' 'if'
    case 1183882:                   // Complex '--' 'if'
    case 1183883:                   // Real '--' 'if'
    case 1200259:                   // Identifier '--' 'import'
    case 1200260:                   // Null '--' 'import'
    case 1200261:                   // True '--' 'import'
    case 1200262:                   // False '--' 'import'
    case 1200263:                   // Character '--' 'import'
    case 1200264:                   // String '--' 'import'
    case 1200265:                   // Integer '--' 'import'
    case 1200266:                   // Complex '--' 'import'
    case 1200267:                   // Real '--' 'import'
    case 1216643:                   // Identifier '--' 'include'
    case 1216644:                   // Null '--' 'include'
    case 1216645:                   // True '--' 'include'
    case 1216646:                   // False '--' 'include'
    case 1216647:                   // Character '--' 'include'
    case 1216648:                   // String '--' 'include'
    case 1216649:                   // Integer '--' 'include'
    case 1216650:                   // Complex '--' 'include'
    case 1216651:                   // Real '--' 'include'
    case 1233027:                   // Identifier '--' 'local'
    case 1233028:                   // Null '--' 'local'
    case 1233029:                   // True '--' 'local'
    case 1233030:                   // False '--' 'local'
    case 1233031:                   // Character '--' 'local'
    case 1233032:                   // String '--' 'local'
    case 1233033:                   // Integer '--' 'local'
    case 1233034:                   // Complex '--' 'local'
    case 1233035:                   // Real '--' 'local'
    case 1249411:                   // Identifier '--' 'return'
    case 1249412:                   // Null '--' 'return'
    case 1249413:                   // True '--' 'return'
    case 1249414:                   // False '--' 'return'
    case 1249415:                   // Character '--' 'return'
    case 1249416:                   // String '--' 'return'
    case 1249417:                   // Integer '--' 'return'
    case 1249418:                   // Complex '--' 'return'
    case 1249419:                   // Real '--' 'return'
    case 1265795:                   // Identifier '--' 'switch'
    case 1265796:                   // Null '--' 'switch'
    case 1265797:                   // True '--' 'switch'
    case 1265798:                   // False '--' 'switch'
    case 1265799:                   // Character '--' 'switch'
    case 1265800:                   // String '--' 'switch'
    case 1265801:                   // Integer '--' 'switch'
    case 1265802:                   // Complex '--' 'switch'
    case 1265803:                   // Real '--' 'switch'
    case 1282179:                   // Identifier '--' 'test'
    case 1282180:                   // Null '--' 'test'
    case 1282181:                   // True '--' 'test'
    case 1282182:                   // False '--' 'test'
    case 1282183:                   // Character '--' 'test'
    case 1282184:                   // String '--' 'test'
    case 1282185:                   // Integer '--' 'test'
    case 1282186:                   // Complex '--' 'test'
    case 1282187:                   // Real '--' 'test'
    case 1298563:                   // Identifier '--' 'throw'
    case 1298564:                   // Null '--' 'throw'
    case 1298565:                   // True '--' 'throw'
    case 1298566:                   // False '--' 'throw'
    case 1298567:                   // Character '--' 'throw'
    case 1298568:                   // String '--' 'throw'
    case 1298569:                   // Integer '--' 'throw'
    case 1298570:                   // Complex '--' 'throw'
    case 1298571:                   // Real '--' 'throw'
    case 1314947:                   // Identifier '--' 'try'
    case 1314948:                   // Null '--' 'try'
    case 1314949:                   // True '--' 'try'
    case 1314950:                   // False '--' 'try'
    case 1314951:                   // Character '--' 'try'
    case 1314952:                   // String '--' 'try'
    case 1314953:                   // Integer '--' 'try'
    case 1314954:                   // Complex '--' 'try'
    case 1314955:                   // Real '--' 'try'
    case 1331331:                   // Identifier '--' 'typeof'
    case 1331332:                   // Null '--' 'typeof'
    case 1331333:                   // True '--' 'typeof'
    case 1331334:                   // False '--' 'typeof'
    case 1331335:                   // Character '--' 'typeof'
    case 1331336:                   // String '--' 'typeof'
    case 1331337:                   // Integer '--' 'typeof'
    case 1331338:                   // Complex '--' 'typeof'
    case 1331339:                   // Real '--' 'typeof'
    case 1347715:                   // Identifier '--' 'while'
    case 1347716:                   // Null '--' 'while'
    case 1347717:                   // True '--' 'while'
    case 1347718:                   // False '--' 'while'
    case 1347719:                   // Character '--' 'while'
    case 1347720:                   // String '--' 'while'
    case 1347721:                   // Integer '--' 'while'
    case 1347722:                   // Complex '--' 'while'
    case 1347723:                   // Real '--' 'while'
    case 1380483:                   // Identifier '--' '|'
    case 1380484:                   // Null '--' '|'
    case 1380485:                   // True '--' '|'
    case 1380486:                   // False '--' '|'
    case 1380487:                   // Character '--' '|'
    case 1380488:                   // String '--' '|'
    case 1380489:                   // Integer '--' '|'
    case 1380490:                   // Complex '--' '|'
    case 1380491:                   // Real '--' '|'
    case 1396867:                   // Identifier '--' '|='
    case 1396868:                   // Null '--' '|='
    case 1396869:                   // True '--' '|='
    case 1396870:                   // False '--' '|='
    case 1396871:                   // Character '--' '|='
    case 1396872:                   // String '--' '|='
    case 1396873:                   // Integer '--' '|='
    case 1396874:                   // Complex '--' '|='
    case 1396875:                   // Real '--' '|='
    case 1413251:                   // Identifier '--' '||'
    case 1413252:                   // Null '--' '||'
    case 1413253:                   // True '--' '||'
    case 1413254:                   // False '--' '||'
    case 1413255:                   // Character '--' '||'
    case 1413256:                   // String '--' '||'
    case 1413257:                   // Integer '--' '||'
    case 1413258:                   // Complex '--' '||'
    case 1413259:                   // Real '--' '||'
    case 1429635:                   // Identifier '--' '}'
    case 1429636:                   // Null '--' '}'
    case 1429637:                   // True '--' '}'
    case 1429638:                   // False '--' '}'
    case 1429639:                   // Character '--' '}'
    case 1429640:                   // String '--' '}'
    case 1429641:                   // Integer '--' '}'
    case 1429642:                   // Complex '--' '}'
    case 1429643:                   // Real '--' '}'
    case 1446019:                   // Identifier '--' '~'
    case 1446020:                   // Null '--' '~'
    case 1446021:                   // True '--' '~'
    case 1446022:                   // False '--' '~'
    case 1446023:                   // Character '--' '~'
    case 1446024:                   // String '--' '~'
    case 1446025:                   // Integer '--' '~'
    case 1446026:                   // Complex '--' '~'
    case 1446027:                   // Real '--' '~'
      try_Primary();
      lookahead1W(6);               // WhiteSpace^token | '--'
      consumeT(33);                 // '--'
      break;
    case 29:                        // '++'
      consumeT(29);                 // '++'
      lookahead1W(22);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
      try_Primary();
      break;
    case 33:                        // '--'
      consumeT(33);                 // '--'
      lookahead1W(22);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
      try_Primary();
      break;
    case 28:                        // '+'
      consumeT(28);                 // '+'
      lookahead1W(22);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
      try_Primary();
      break;
    case 32:                        // '-'
      consumeT(32);                 // '-'
      lookahead1W(22);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
      try_Primary();
      break;
    case 88:                        // '~'
      consumeT(88);                 // '~'
      lookahead1W(22);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
      try_Primary();
      break;
    case 15:                        // '!'
      consumeT(15);                 // '!'
      lookahead1W(22);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
      try_Primary();
      break;
    case -10:
      break;
    default:
      try_Primary();
    }
  }

  function parse_Primary()
  {
    eventHandler.startNonterminal("Primary", e0);
    switch (l1)
    {
    case 3:                         // Identifier
    case 65:                        // 'f32'
    case 66:                        // 'f64'
    case 70:                        // 'i32'
    case 71:                        // 'i64'
      if (l1 != 3)                  // Identifier
      {
        whitespace();
        parse_Type();
      }
      lookahead1W(0);               // Identifier | WhiteSpace^token
      whitespace();
      parse_Member();
      break;
    case 23:                        // '('
      parse_ParenthesizedExpression();
      break;
    default:
      parse_Value();
    }
    eventHandler.endNonterminal("Primary", e0);
  }

  function try_Primary()
  {
    switch (l1)
    {
    case 3:                         // Identifier
    case 65:                        // 'f32'
    case 66:                        // 'f64'
    case 70:                        // 'i32'
    case 71:                        // 'i64'
      if (l1 != 3)                  // Identifier
      {
        try_Type();
      }
      lookahead1W(0);               // Identifier | WhiteSpace^token
      try_Member();
      break;
    case 23:                        // '('
      try_ParenthesizedExpression();
      break;
    default:
      try_Value();
    }
  }

  function parse_Statement()
  {
    eventHandler.startNonterminal("Statement", e0);
    switch (l1)
    {
    case 3:                         // Identifier
      lookahead2W(19);              // WhiteSpace^token | '(' | '.' | '{'
      switch (lk)
      {
      case 4483:                    // Identifier '.'
        lookahead3W(0);             // Identifier | WhiteSpace^token
        break;
      }
      break;
    default:
      lk = l1;
    }
    if (lk == 53635)                // Identifier '.' Identifier
    {
      lk = memoized(4, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2; var l3A = l3;
        var b3A = b3; var e3A = e3;
        try
        {
          try_NamespaceDeclaration();
          lk = -11;
        }
        catch (p11A)
        {
          lk = -12;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
        b3 = b3A; e3 = e3A; end = e3A; }}}
        memoize(4, e0, lk);
      }
    }
    switch (lk)
    {
    case 62:                        // 'do'
      parse_Do();
      break;
    case 82:                        // 'while'
      parse_While();
      break;
    case 67:                        // 'for'
      parse_For();
      break;
    case 68:                        // 'foreach'
      parse_ForEach();
      break;
    case 57:                        // 'break'
      parse_Break();
      break;
    case 60:                        // 'continue'
      parse_Continue();
      break;
    case 72:                        // 'if'
      parse_If();
      break;
    case 77:                        // 'switch'
      parse_Switch();
      break;
    case 80:                        // 'try'
      parse_Try();
      break;
    case 78:                        // 'test'
      parse_Test();
      break;
    case -11:
    case 10627:                     // Identifier '{'
      parse_NamespaceDeclaration();
      break;
    case 76:                        // 'return'
      parse_Return();
      break;
    case 64:                        // 'export'
      parse_Export();
      break;
    case 73:                        // 'import'
      parse_Import();
      break;
    case 74:                        // 'include'
      parse_Include();
      break;
    case 69:                        // 'global'
      parse_Global();
      break;
    case 75:                        // 'local'
      parse_Local();
      break;
    case 79:                        // 'throw'
      parse_Throw();
      break;
    case 81:                        // 'typeof'
      parse_TypeOf();
      break;
    case 40:                        // ';'
      parse_EmptyStatement();
      break;
    default:
      parse_FunctionDeclaration();
    }
    eventHandler.endNonterminal("Statement", e0);
  }

  function try_Statement()
  {
    switch (l1)
    {
    case 3:                         // Identifier
      lookahead2W(19);              // WhiteSpace^token | '(' | '.' | '{'
      switch (lk)
      {
      case 4483:                    // Identifier '.'
        lookahead3W(0);             // Identifier | WhiteSpace^token
        break;
      }
      break;
    default:
      lk = l1;
    }
    if (lk == 53635)                // Identifier '.' Identifier
    {
      lk = memoized(4, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2; var l3A = l3;
        var b3A = b3; var e3A = e3;
        try
        {
          try_NamespaceDeclaration();
          memoize(4, e0A, -11);
          lk = -22;
        }
        catch (p11A)
        {
          lk = -12;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
          b3 = b3A; e3 = e3A; end = e3A; }}}
          memoize(4, e0A, -12);
        }
      }
    }
    switch (lk)
    {
    case 62:                        // 'do'
      try_Do();
      break;
    case 82:                        // 'while'
      try_While();
      break;
    case 67:                        // 'for'
      try_For();
      break;
    case 68:                        // 'foreach'
      try_ForEach();
      break;
    case 57:                        // 'break'
      try_Break();
      break;
    case 60:                        // 'continue'
      try_Continue();
      break;
    case 72:                        // 'if'
      try_If();
      break;
    case 77:                        // 'switch'
      try_Switch();
      break;
    case 80:                        // 'try'
      try_Try();
      break;
    case 78:                        // 'test'
      try_Test();
      break;
    case -11:
    case 10627:                     // Identifier '{'
      try_NamespaceDeclaration();
      break;
    case 76:                        // 'return'
      try_Return();
      break;
    case 64:                        // 'export'
      try_Export();
      break;
    case 73:                        // 'import'
      try_Import();
      break;
    case 74:                        // 'include'
      try_Include();
      break;
    case 69:                        // 'global'
      try_Global();
      break;
    case 75:                        // 'local'
      try_Local();
      break;
    case 79:                        // 'throw'
      try_Throw();
      break;
    case 81:                        // 'typeof'
      try_TypeOf();
      break;
    case 40:                        // ';'
      try_EmptyStatement();
      break;
    case -22:
      break;
    default:
      try_FunctionDeclaration();
    }
  }

  function parse_Do()
  {
    eventHandler.startNonterminal("Do", e0);
    consume(62);                    // 'do'
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    lookahead1W(13);                // WhiteSpace^token | 'while'
    consume(82);                    // 'while'
    lookahead1W(3);                 // WhiteSpace^token | '('
    consume(23);                    // '('
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    lookahead1W(4);                 // WhiteSpace^token | ')'
    consume(24);                    // ')'
    eventHandler.endNonterminal("Do", e0);
  }

  function try_Do()
  {
    consumeT(62);                   // 'do'
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    try_Expression();
    lookahead1W(13);                // WhiteSpace^token | 'while'
    consumeT(82);                   // 'while'
    lookahead1W(3);                 // WhiteSpace^token | '('
    consumeT(23);                   // '('
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    try_Expression();
    lookahead1W(4);                 // WhiteSpace^token | ')'
    consumeT(24);                   // ')'
  }

  function parse_While()
  {
    eventHandler.startNonterminal("While", e0);
    consume(82);                    // 'while'
    lookahead1W(3);                 // WhiteSpace^token | '('
    consume(23);                    // '('
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    lookahead1W(4);                 // WhiteSpace^token | ')'
    consume(24);                    // ')'
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    eventHandler.endNonterminal("While", e0);
  }

  function try_While()
  {
    consumeT(82);                   // 'while'
    lookahead1W(3);                 // WhiteSpace^token | '('
    consumeT(23);                   // '('
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    try_Expression();
    lookahead1W(4);                 // WhiteSpace^token | ')'
    consumeT(24);                   // ')'
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    try_Expression();
  }

  function parse_For()
  {
    eventHandler.startNonterminal("For", e0);
    consume(67);                    // 'for'
    lookahead1W(3);                 // WhiteSpace^token | '('
    consume(23);                    // '('
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    lookahead1W(9);                 // WhiteSpace^token | ';'
    consume(40);                    // ';'
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    lookahead1W(9);                 // WhiteSpace^token | ';'
    consume(40);                    // ';'
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    lookahead1W(4);                 // WhiteSpace^token | ')'
    consume(24);                    // ')'
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    eventHandler.endNonterminal("For", e0);
  }

  function try_For()
  {
    consumeT(67);                   // 'for'
    lookahead1W(3);                 // WhiteSpace^token | '('
    consumeT(23);                   // '('
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    try_Expression();
    lookahead1W(9);                 // WhiteSpace^token | ';'
    consumeT(40);                   // ';'
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    try_Expression();
    lookahead1W(9);                 // WhiteSpace^token | ';'
    consumeT(40);                   // ';'
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    try_Expression();
    lookahead1W(4);                 // WhiteSpace^token | ')'
    consumeT(24);                   // ')'
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    try_Expression();
  }

  function parse_ForEach()
  {
    eventHandler.startNonterminal("ForEach", e0);
    consume(68);                    // 'foreach'
    lookahead1W(3);                 // WhiteSpace^token | '('
    consume(23);                    // '('
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    lookahead1W(9);                 // WhiteSpace^token | ';'
    consume(40);                    // ';'
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    lookahead1W(9);                 // WhiteSpace^token | ';'
    consume(40);                    // ';'
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    lookahead1W(4);                 // WhiteSpace^token | ')'
    consume(24);                    // ')'
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    eventHandler.endNonterminal("ForEach", e0);
  }

  function try_ForEach()
  {
    consumeT(68);                   // 'foreach'
    lookahead1W(3);                 // WhiteSpace^token | '('
    consumeT(23);                   // '('
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    try_Expression();
    lookahead1W(9);                 // WhiteSpace^token | ';'
    consumeT(40);                   // ';'
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    try_Expression();
    lookahead1W(9);                 // WhiteSpace^token | ';'
    consumeT(40);                   // ';'
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    try_Expression();
    lookahead1W(4);                 // WhiteSpace^token | ')'
    consumeT(24);                   // ')'
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    try_Expression();
  }

  function parse_Break()
  {
    eventHandler.startNonterminal("Break", e0);
    consume(57);                    // 'break'
    eventHandler.endNonterminal("Break", e0);
  }

  function try_Break()
  {
    consumeT(57);                   // 'break'
  }

  function parse_Continue()
  {
    eventHandler.startNonterminal("Continue", e0);
    consume(60);                    // 'continue'
    eventHandler.endNonterminal("Continue", e0);
  }

  function try_Continue()
  {
    consumeT(60);                   // 'continue'
  }

  function parse_If()
  {
    eventHandler.startNonterminal("If", e0);
    consume(72);                    // 'if'
    lookahead1W(3);                 // WhiteSpace^token | '('
    consume(23);                    // '('
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    lookahead1W(4);                 // WhiteSpace^token | ')'
    consume(24);                    // ')'
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    lookahead1W(40);                // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | ',' | '-' |
                                    // '--' | ':' | ';' | '[' | ']' | 'break' | 'case' | 'catch' | 'continue' |
                                    // 'default' | 'do' | 'else' | 'export' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '}' | '~'
    switch (l1)
    {
    case 63:                        // 'else'
      lookahead2W(29);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
      switch (lk)
      {
      case 447:                     // 'else' Identifier
        lookahead3W(45);            // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' |
                                    // '.' | '/' | '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' |
                                    // '>' | '>=' | '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' |
                                    // 'case' | 'catch' | 'continue' | 'default' | 'do' | 'else' | 'export' | 'f32' |
                                    // 'f64' | 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' |
                                    // 'include' | 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' |
                                    // 'while' | '{' | '|' | '|=' | '||' | '}' | '~'
        break;
      case 6847:                    // 'else' '['
        lookahead3W(34);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | ']' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        break;
      case 10687:                   // 'else' '{'
        lookahead3W(38);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '}' |
                                    // '~'
        break;
      case 1599:                    // 'else' Comment
      case 5183:                    // 'else' ';'
      case 7359:                    // 'else' 'break'
      case 7743:                    // 'else' 'continue'
        lookahead3W(40);            // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | ',' | '-' |
                                    // '--' | ':' | ';' | '[' | ']' | 'break' | 'case' | 'catch' | 'continue' |
                                    // 'default' | 'do' | 'else' | 'export' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '}' | '~'
        break;
      case 8383:                    // 'else' 'f32'
      case 8511:                    // 'else' 'f64'
      case 9023:                    // 'else' 'i32'
      case 9151:                    // 'else' 'i64'
        lookahead3W(0);             // Identifier | WhiteSpace^token
        break;
      case 1983:                    // 'else' '!'
      case 3647:                    // 'else' '+'
      case 3775:                    // 'else' '++'
      case 4159:                    // 'else' '-'
      case 4287:                    // 'else' '--'
      case 11327:                   // 'else' '~'
        lookahead3W(22);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
        break;
      case 8639:                    // 'else' 'for'
      case 8767:                    // 'else' 'foreach'
      case 9279:                    // 'else' 'if'
      case 9919:                    // 'else' 'switch'
      case 10047:                   // 'else' 'test'
      case 10559:                   // 'else' 'while'
        lookahead3W(3);             // WhiteSpace^token | '('
        break;
      case 575:                     // 'else' Null
      case 703:                     // 'else' True
      case 831:                     // 'else' False
      case 959:                     // 'else' Character
      case 1087:                    // 'else' String
      case 1215:                    // 'else' Integer
      case 1343:                    // 'else' Complex
      case 1471:                    // 'else' Real
        lookahead3W(44);            // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' |
                                    // '/' | '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' |
                                    // '>=' | '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' |
                                    // 'catch' | 'continue' | 'default' | 'do' | 'else' | 'export' | 'f32' | 'f64' |
                                    // 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' |
                                    // 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' |
                                    // '{' | '|' | '|=' | '||' | '}' | '~'
        break;
      case 3007:                    // 'else' '('
      case 7999:                    // 'else' 'do'
      case 8255:                    // 'else' 'export'
      case 8895:                    // 'else' 'global'
      case 9407:                    // 'else' 'import'
      case 9535:                    // 'else' 'include'
      case 9663:                    // 'else' 'local'
      case 9791:                    // 'else' 'return'
      case 10175:                   // 'else' 'throw'
      case 10303:                   // 'else' 'try'
      case 10431:                   // 'else' 'typeof'
        lookahead3W(29);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        break;
      }
      break;
    default:
      lk = l1;
    }
    if (lk != 1                     // END
     && lk != 3                     // Identifier
     && lk != 4                     // Null
     && lk != 5                     // True
     && lk != 6                     // False
     && lk != 7                     // Character
     && lk != 8                     // String
     && lk != 9                     // Integer
     && lk != 10                    // Complex
     && lk != 11                    // Real
     && lk != 12                    // Comment
     && lk != 15                    // '!'
     && lk != 23                    // '('
     && lk != 24                    // ')'
     && lk != 28                    // '+'
     && lk != 29                    // '++'
     && lk != 31                    // ','
     && lk != 32                    // '-'
     && lk != 33                    // '--'
     && lk != 38                    // ':'
     && lk != 40                    // ';'
     && lk != 53                    // '['
     && lk != 54                    // ']'
     && lk != 57                    // 'break'
     && lk != 58                    // 'case'
     && lk != 59                    // 'catch'
     && lk != 60                    // 'continue'
     && lk != 61                    // 'default'
     && lk != 62                    // 'do'
     && lk != 64                    // 'export'
     && lk != 65                    // 'f32'
     && lk != 66                    // 'f64'
     && lk != 67                    // 'for'
     && lk != 68                    // 'foreach'
     && lk != 69                    // 'global'
     && lk != 70                    // 'i32'
     && lk != 71                    // 'i64'
     && lk != 72                    // 'if'
     && lk != 73                    // 'import'
     && lk != 74                    // 'include'
     && lk != 75                    // 'local'
     && lk != 76                    // 'return'
     && lk != 77                    // 'switch'
     && lk != 78                    // 'test'
     && lk != 79                    // 'throw'
     && lk != 80                    // 'try'
     && lk != 81                    // 'typeof'
     && lk != 82                    // 'while'
     && lk != 83                    // '{'
     && lk != 87                    // '}'
     && lk != 88)                   // '~'
    {
      lk = memoized(5, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2; var l3A = l3;
        var b3A = b3; var e3A = e3;
        try
        {
          try_Else();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
        b3 = b3A; e3 = e3A; end = e3A; }}}
        memoize(5, e0, lk);
      }
    }
    if (lk == -1)
    {
      whitespace();
      parse_Else();
    }
    eventHandler.endNonterminal("If", e0);
  }

  function try_If()
  {
    consumeT(72);                   // 'if'
    lookahead1W(3);                 // WhiteSpace^token | '('
    consumeT(23);                   // '('
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    try_Expression();
    lookahead1W(4);                 // WhiteSpace^token | ')'
    consumeT(24);                   // ')'
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    try_Expression();
    lookahead1W(40);                // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | ',' | '-' |
                                    // '--' | ':' | ';' | '[' | ']' | 'break' | 'case' | 'catch' | 'continue' |
                                    // 'default' | 'do' | 'else' | 'export' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '}' | '~'
    switch (l1)
    {
    case 63:                        // 'else'
      lookahead2W(29);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
      switch (lk)
      {
      case 447:                     // 'else' Identifier
        lookahead3W(45);            // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' |
                                    // '.' | '/' | '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' |
                                    // '>' | '>=' | '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' |
                                    // 'case' | 'catch' | 'continue' | 'default' | 'do' | 'else' | 'export' | 'f32' |
                                    // 'f64' | 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' |
                                    // 'include' | 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' |
                                    // 'while' | '{' | '|' | '|=' | '||' | '}' | '~'
        break;
      case 6847:                    // 'else' '['
        lookahead3W(34);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | ']' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        break;
      case 10687:                   // 'else' '{'
        lookahead3W(38);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '}' |
                                    // '~'
        break;
      case 1599:                    // 'else' Comment
      case 5183:                    // 'else' ';'
      case 7359:                    // 'else' 'break'
      case 7743:                    // 'else' 'continue'
        lookahead3W(40);            // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | ',' | '-' |
                                    // '--' | ':' | ';' | '[' | ']' | 'break' | 'case' | 'catch' | 'continue' |
                                    // 'default' | 'do' | 'else' | 'export' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '}' | '~'
        break;
      case 8383:                    // 'else' 'f32'
      case 8511:                    // 'else' 'f64'
      case 9023:                    // 'else' 'i32'
      case 9151:                    // 'else' 'i64'
        lookahead3W(0);             // Identifier | WhiteSpace^token
        break;
      case 1983:                    // 'else' '!'
      case 3647:                    // 'else' '+'
      case 3775:                    // 'else' '++'
      case 4159:                    // 'else' '-'
      case 4287:                    // 'else' '--'
      case 11327:                   // 'else' '~'
        lookahead3W(22);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
        break;
      case 8639:                    // 'else' 'for'
      case 8767:                    // 'else' 'foreach'
      case 9279:                    // 'else' 'if'
      case 9919:                    // 'else' 'switch'
      case 10047:                   // 'else' 'test'
      case 10559:                   // 'else' 'while'
        lookahead3W(3);             // WhiteSpace^token | '('
        break;
      case 575:                     // 'else' Null
      case 703:                     // 'else' True
      case 831:                     // 'else' False
      case 959:                     // 'else' Character
      case 1087:                    // 'else' String
      case 1215:                    // 'else' Integer
      case 1343:                    // 'else' Complex
      case 1471:                    // 'else' Real
        lookahead3W(44);            // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' |
                                    // '/' | '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' |
                                    // '>=' | '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' |
                                    // 'catch' | 'continue' | 'default' | 'do' | 'else' | 'export' | 'f32' | 'f64' |
                                    // 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' |
                                    // 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' |
                                    // '{' | '|' | '|=' | '||' | '}' | '~'
        break;
      case 3007:                    // 'else' '('
      case 7999:                    // 'else' 'do'
      case 8255:                    // 'else' 'export'
      case 8895:                    // 'else' 'global'
      case 9407:                    // 'else' 'import'
      case 9535:                    // 'else' 'include'
      case 9663:                    // 'else' 'local'
      case 9791:                    // 'else' 'return'
      case 10175:                   // 'else' 'throw'
      case 10303:                   // 'else' 'try'
      case 10431:                   // 'else' 'typeof'
        lookahead3W(29);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        break;
      }
      break;
    default:
      lk = l1;
    }
    if (lk != 1                     // END
     && lk != 3                     // Identifier
     && lk != 4                     // Null
     && lk != 5                     // True
     && lk != 6                     // False
     && lk != 7                     // Character
     && lk != 8                     // String
     && lk != 9                     // Integer
     && lk != 10                    // Complex
     && lk != 11                    // Real
     && lk != 12                    // Comment
     && lk != 15                    // '!'
     && lk != 23                    // '('
     && lk != 24                    // ')'
     && lk != 28                    // '+'
     && lk != 29                    // '++'
     && lk != 31                    // ','
     && lk != 32                    // '-'
     && lk != 33                    // '--'
     && lk != 38                    // ':'
     && lk != 40                    // ';'
     && lk != 53                    // '['
     && lk != 54                    // ']'
     && lk != 57                    // 'break'
     && lk != 58                    // 'case'
     && lk != 59                    // 'catch'
     && lk != 60                    // 'continue'
     && lk != 61                    // 'default'
     && lk != 62                    // 'do'
     && lk != 64                    // 'export'
     && lk != 65                    // 'f32'
     && lk != 66                    // 'f64'
     && lk != 67                    // 'for'
     && lk != 68                    // 'foreach'
     && lk != 69                    // 'global'
     && lk != 70                    // 'i32'
     && lk != 71                    // 'i64'
     && lk != 72                    // 'if'
     && lk != 73                    // 'import'
     && lk != 74                    // 'include'
     && lk != 75                    // 'local'
     && lk != 76                    // 'return'
     && lk != 77                    // 'switch'
     && lk != 78                    // 'test'
     && lk != 79                    // 'throw'
     && lk != 80                    // 'try'
     && lk != 81                    // 'typeof'
     && lk != 82                    // 'while'
     && lk != 83                    // '{'
     && lk != 87                    // '}'
     && lk != 88)                   // '~'
    {
      lk = memoized(5, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2; var l3A = l3;
        var b3A = b3; var e3A = e3;
        try
        {
          try_Else();
          memoize(5, e0A, -1);
        }
        catch (p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
          b3 = b3A; e3 = e3A; end = e3A; }}}
          memoize(5, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      try_Else();
    }
  }

  function parse_Else()
  {
    eventHandler.startNonterminal("Else", e0);
    consume(63);                    // 'else'
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    eventHandler.endNonterminal("Else", e0);
  }

  function try_Else()
  {
    consumeT(63);                   // 'else'
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    try_Expression();
  }

  function parse_Switch()
  {
    eventHandler.startNonterminal("Switch", e0);
    consume(77);                    // 'switch'
    lookahead1W(3);                 // WhiteSpace^token | '('
    consume(23);                    // '('
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    lookahead1W(4);                 // WhiteSpace^token | ')'
    consume(24);                    // ')'
    lookahead1W(14);                // WhiteSpace^token | '{'
    consume(83);                    // '{'
    for (;;)
    {
      lookahead1W(12);              // WhiteSpace^token | 'case'
      whitespace();
      parse_Case();
      if (l1 != 58)                 // 'case'
      {
        break;
      }
    }
    if (l1 == 61)                   // 'default'
    {
      whitespace();
      parse_Default();
    }
    consume(87);                    // '}'
    eventHandler.endNonterminal("Switch", e0);
  }

  function try_Switch()
  {
    consumeT(77);                   // 'switch'
    lookahead1W(3);                 // WhiteSpace^token | '('
    consumeT(23);                   // '('
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    try_Expression();
    lookahead1W(4);                 // WhiteSpace^token | ')'
    consumeT(24);                   // ')'
    lookahead1W(14);                // WhiteSpace^token | '{'
    consumeT(83);                   // '{'
    for (;;)
    {
      lookahead1W(12);              // WhiteSpace^token | 'case'
      try_Case();
      if (l1 != 58)                 // 'case'
      {
        break;
      }
    }
    if (l1 == 61)                   // 'default'
    {
      try_Default();
    }
    consumeT(87);                   // '}'
  }

  function parse_Case()
  {
    eventHandler.startNonterminal("Case", e0);
    consume(58);                    // 'case'
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    lookahead1W(7);                 // WhiteSpace^token | ':'
    consume(38);                    // ':'
    for (;;)
    {
      lookahead1W(39);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'case' | 'continue' | 'default' | 'do' | 'export' | 'f32' |
                                    // 'f64' | 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' |
                                    // 'include' | 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' |
                                    // 'while' | '{' | '}' | '~'
      if (l1 == 58                  // 'case'
       || l1 == 61                  // 'default'
       || l1 == 87)                 // '}'
      {
        break;
      }
      whitespace();
      parse_Expression();
    }
    eventHandler.endNonterminal("Case", e0);
  }

  function try_Case()
  {
    consumeT(58);                   // 'case'
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    try_Expression();
    lookahead1W(7);                 // WhiteSpace^token | ':'
    consumeT(38);                   // ':'
    for (;;)
    {
      lookahead1W(39);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'case' | 'continue' | 'default' | 'do' | 'export' | 'f32' |
                                    // 'f64' | 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' |
                                    // 'include' | 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' |
                                    // 'while' | '{' | '}' | '~'
      if (l1 == 58                  // 'case'
       || l1 == 61                  // 'default'
       || l1 == 87)                 // '}'
      {
        break;
      }
      try_Expression();
    }
  }

  function parse_Default()
  {
    eventHandler.startNonterminal("Default", e0);
    consume(61);                    // 'default'
    lookahead1W(7);                 // WhiteSpace^token | ':'
    consume(38);                    // ':'
    for (;;)
    {
      lookahead1W(35);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '}' |
                                    // '~'
      if (l1 == 87)                 // '}'
      {
        break;
      }
      whitespace();
      parse_Expression();
    }
    eventHandler.endNonterminal("Default", e0);
  }

  function try_Default()
  {
    consumeT(61);                   // 'default'
    lookahead1W(7);                 // WhiteSpace^token | ':'
    consumeT(38);                   // ':'
    for (;;)
    {
      lookahead1W(35);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '}' |
                                    // '~'
      if (l1 == 87)                 // '}'
      {
        break;
      }
      try_Expression();
    }
  }

  function parse_Try()
  {
    eventHandler.startNonterminal("Try", e0);
    consume(80);                    // 'try'
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    lookahead1W(40);                // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | ',' | '-' |
                                    // '--' | ':' | ';' | '[' | ']' | 'break' | 'case' | 'catch' | 'continue' |
                                    // 'default' | 'do' | 'else' | 'export' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '}' | '~'
    switch (l1)
    {
    case 59:                        // 'catch'
      lookahead2W(3);               // WhiteSpace^token | '('
      switch (lk)
      {
      case 3003:                    // 'catch' '('
        lookahead3W(29);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        break;
      }
      break;
    default:
      lk = l1;
    }
    if (lk == 52155                 // 'catch' '(' Identifier
     || lk == 68539                 // 'catch' '(' Null
     || lk == 84923                 // 'catch' '(' True
     || lk == 101307                // 'catch' '(' False
     || lk == 117691                // 'catch' '(' Character
     || lk == 134075                // 'catch' '(' String
     || lk == 150459                // 'catch' '(' Integer
     || lk == 166843                // 'catch' '(' Complex
     || lk == 183227                // 'catch' '(' Real
     || lk == 199611                // 'catch' '(' Comment
     || lk == 248763                // 'catch' '(' '!'
     || lk == 379835                // 'catch' '(' '('
     || lk == 461755                // 'catch' '(' '+'
     || lk == 478139                // 'catch' '(' '++'
     || lk == 527291                // 'catch' '(' '-'
     || lk == 543675                // 'catch' '(' '--'
     || lk == 658363                // 'catch' '(' ';'
     || lk == 871355                // 'catch' '(' '['
     || lk == 936891                // 'catch' '(' 'break'
     || lk == 986043                // 'catch' '(' 'continue'
     || lk == 1018811               // 'catch' '(' 'do'
     || lk == 1051579               // 'catch' '(' 'export'
     || lk == 1067963               // 'catch' '(' 'f32'
     || lk == 1084347               // 'catch' '(' 'f64'
     || lk == 1100731               // 'catch' '(' 'for'
     || lk == 1117115               // 'catch' '(' 'foreach'
     || lk == 1133499               // 'catch' '(' 'global'
     || lk == 1149883               // 'catch' '(' 'i32'
     || lk == 1166267               // 'catch' '(' 'i64'
     || lk == 1182651               // 'catch' '(' 'if'
     || lk == 1199035               // 'catch' '(' 'import'
     || lk == 1215419               // 'catch' '(' 'include'
     || lk == 1231803               // 'catch' '(' 'local'
     || lk == 1248187               // 'catch' '(' 'return'
     || lk == 1264571               // 'catch' '(' 'switch'
     || lk == 1280955               // 'catch' '(' 'test'
     || lk == 1297339               // 'catch' '(' 'throw'
     || lk == 1313723               // 'catch' '(' 'try'
     || lk == 1330107               // 'catch' '(' 'typeof'
     || lk == 1346491               // 'catch' '(' 'while'
     || lk == 1362875               // 'catch' '(' '{'
     || lk == 1444795)              // 'catch' '(' '~'
    {
      lk = memoized(6, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2; var l3A = l3;
        var b3A = b3; var e3A = e3;
        try
        {
          try_Catch();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
        b3 = b3A; e3 = e3A; end = e3A; }}}
        memoize(6, e0, lk);
      }
    }
    if (lk == -1)
    {
      whitespace();
      parse_Catch();
    }
    eventHandler.endNonterminal("Try", e0);
  }

  function try_Try()
  {
    consumeT(80);                   // 'try'
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    try_Expression();
    lookahead1W(40);                // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | ',' | '-' |
                                    // '--' | ':' | ';' | '[' | ']' | 'break' | 'case' | 'catch' | 'continue' |
                                    // 'default' | 'do' | 'else' | 'export' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '}' | '~'
    switch (l1)
    {
    case 59:                        // 'catch'
      lookahead2W(3);               // WhiteSpace^token | '('
      switch (lk)
      {
      case 3003:                    // 'catch' '('
        lookahead3W(29);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        break;
      }
      break;
    default:
      lk = l1;
    }
    if (lk == 52155                 // 'catch' '(' Identifier
     || lk == 68539                 // 'catch' '(' Null
     || lk == 84923                 // 'catch' '(' True
     || lk == 101307                // 'catch' '(' False
     || lk == 117691                // 'catch' '(' Character
     || lk == 134075                // 'catch' '(' String
     || lk == 150459                // 'catch' '(' Integer
     || lk == 166843                // 'catch' '(' Complex
     || lk == 183227                // 'catch' '(' Real
     || lk == 199611                // 'catch' '(' Comment
     || lk == 248763                // 'catch' '(' '!'
     || lk == 379835                // 'catch' '(' '('
     || lk == 461755                // 'catch' '(' '+'
     || lk == 478139                // 'catch' '(' '++'
     || lk == 527291                // 'catch' '(' '-'
     || lk == 543675                // 'catch' '(' '--'
     || lk == 658363                // 'catch' '(' ';'
     || lk == 871355                // 'catch' '(' '['
     || lk == 936891                // 'catch' '(' 'break'
     || lk == 986043                // 'catch' '(' 'continue'
     || lk == 1018811               // 'catch' '(' 'do'
     || lk == 1051579               // 'catch' '(' 'export'
     || lk == 1067963               // 'catch' '(' 'f32'
     || lk == 1084347               // 'catch' '(' 'f64'
     || lk == 1100731               // 'catch' '(' 'for'
     || lk == 1117115               // 'catch' '(' 'foreach'
     || lk == 1133499               // 'catch' '(' 'global'
     || lk == 1149883               // 'catch' '(' 'i32'
     || lk == 1166267               // 'catch' '(' 'i64'
     || lk == 1182651               // 'catch' '(' 'if'
     || lk == 1199035               // 'catch' '(' 'import'
     || lk == 1215419               // 'catch' '(' 'include'
     || lk == 1231803               // 'catch' '(' 'local'
     || lk == 1248187               // 'catch' '(' 'return'
     || lk == 1264571               // 'catch' '(' 'switch'
     || lk == 1280955               // 'catch' '(' 'test'
     || lk == 1297339               // 'catch' '(' 'throw'
     || lk == 1313723               // 'catch' '(' 'try'
     || lk == 1330107               // 'catch' '(' 'typeof'
     || lk == 1346491               // 'catch' '(' 'while'
     || lk == 1362875               // 'catch' '(' '{'
     || lk == 1444795)              // 'catch' '(' '~'
    {
      lk = memoized(6, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2; var l3A = l3;
        var b3A = b3; var e3A = e3;
        try
        {
          try_Catch();
          memoize(6, e0A, -1);
        }
        catch (p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
          b3 = b3A; e3 = e3A; end = e3A; }}}
          memoize(6, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      try_Catch();
    }
  }

  function parse_Test()
  {
    eventHandler.startNonterminal("Test", e0);
    consume(78);                    // 'test'
    lookahead1W(3);                 // WhiteSpace^token | '('
    consume(23);                    // '('
    lookahead1W(33);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    switch (l1)
    {
    case 40:                        // ';'
      lookahead2W(33);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
      switch (lk)
      {
      case 3112:                    // ';' ')'
        lookahead3W(29);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        break;
      case 5160:                    // ';' ';'
        lookahead3W(33);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        break;
      }
      break;
    default:
      lk = l1;
    }
    if (lk != 3                     // Identifier
     && lk != 4                     // Null
     && lk != 5                     // True
     && lk != 6                     // False
     && lk != 7                     // Character
     && lk != 8                     // String
     && lk != 9                     // Integer
     && lk != 10                    // Complex
     && lk != 11                    // Real
     && lk != 12                    // Comment
     && lk != 15                    // '!'
     && lk != 23                    // '('
     && lk != 24                    // ')'
     && lk != 28                    // '+'
     && lk != 29                    // '++'
     && lk != 32                    // '-'
     && lk != 33                    // '--'
     && lk != 53                    // '['
     && lk != 57                    // 'break'
     && lk != 60                    // 'continue'
     && lk != 62                    // 'do'
     && lk != 64                    // 'export'
     && lk != 65                    // 'f32'
     && lk != 66                    // 'f64'
     && lk != 67                    // 'for'
     && lk != 68                    // 'foreach'
     && lk != 69                    // 'global'
     && lk != 70                    // 'i32'
     && lk != 71                    // 'i64'
     && lk != 72                    // 'if'
     && lk != 73                    // 'import'
     && lk != 74                    // 'include'
     && lk != 75                    // 'local'
     && lk != 76                    // 'return'
     && lk != 77                    // 'switch'
     && lk != 78                    // 'test'
     && lk != 79                    // 'throw'
     && lk != 80                    // 'try'
     && lk != 81                    // 'typeof'
     && lk != 82                    // 'while'
     && lk != 83                    // '{'
     && lk != 88                    // '~'
     && lk != 424                   // ';' Identifier
     && lk != 552                   // ';' Null
     && lk != 680                   // ';' True
     && lk != 808                   // ';' False
     && lk != 936                   // ';' Character
     && lk != 1064                  // ';' String
     && lk != 1192                  // ';' Integer
     && lk != 1320                  // ';' Complex
     && lk != 1448                  // ';' Real
     && lk != 1576                  // ';' Comment
     && lk != 1960                  // ';' '!'
     && lk != 2984                  // ';' '('
     && lk != 3624                  // ';' '+'
     && lk != 3752                  // ';' '++'
     && lk != 4136                  // ';' '-'
     && lk != 4264                  // ';' '--'
     && lk != 6824                  // ';' '['
     && lk != 7336                  // ';' 'break'
     && lk != 7720                  // ';' 'continue'
     && lk != 7976                  // ';' 'do'
     && lk != 8232                  // ';' 'export'
     && lk != 8360                  // ';' 'f32'
     && lk != 8488                  // ';' 'f64'
     && lk != 8616                  // ';' 'for'
     && lk != 8744                  // ';' 'foreach'
     && lk != 8872                  // ';' 'global'
     && lk != 9000                  // ';' 'i32'
     && lk != 9128                  // ';' 'i64'
     && lk != 9256                  // ';' 'if'
     && lk != 9384                  // ';' 'import'
     && lk != 9512                  // ';' 'include'
     && lk != 9640                  // ';' 'local'
     && lk != 9768                  // ';' 'return'
     && lk != 9896                  // ';' 'switch'
     && lk != 10024                 // ';' 'test'
     && lk != 10152                 // ';' 'throw'
     && lk != 10280                 // ';' 'try'
     && lk != 10408                 // ';' 'typeof'
     && lk != 10536                 // ';' 'while'
     && lk != 10664                 // ';' '{'
     && lk != 11304)                // ';' '~'
    {
      lk = memoized(7, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2; var l3A = l3;
        var b3A = b3; var e3A = e3;
        try
        {
          try_Expression();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
        b3 = b3A; e3 = e3A; end = e3A; }}}
        memoize(7, e0, lk);
      }
    }
    if (lk == -1
     || lk == 3                     // Identifier
     || lk == 4                     // Null
     || lk == 5                     // True
     || lk == 6                     // False
     || lk == 7                     // Character
     || lk == 8                     // String
     || lk == 9                     // Integer
     || lk == 10                    // Complex
     || lk == 11                    // Real
     || lk == 12                    // Comment
     || lk == 15                    // '!'
     || lk == 23                    // '('
     || lk == 28                    // '+'
     || lk == 29                    // '++'
     || lk == 32                    // '-'
     || lk == 33                    // '--'
     || lk == 53                    // '['
     || lk == 57                    // 'break'
     || lk == 60                    // 'continue'
     || lk == 62                    // 'do'
     || lk == 64                    // 'export'
     || lk == 65                    // 'f32'
     || lk == 66                    // 'f64'
     || lk == 67                    // 'for'
     || lk == 68                    // 'foreach'
     || lk == 69                    // 'global'
     || lk == 70                    // 'i32'
     || lk == 71                    // 'i64'
     || lk == 72                    // 'if'
     || lk == 73                    // 'import'
     || lk == 74                    // 'include'
     || lk == 75                    // 'local'
     || lk == 76                    // 'return'
     || lk == 77                    // 'switch'
     || lk == 78                    // 'test'
     || lk == 79                    // 'throw'
     || lk == 80                    // 'try'
     || lk == 81                    // 'typeof'
     || lk == 82                    // 'while'
     || lk == 83                    // '{'
     || lk == 88)                   // '~'
    {
      whitespace();
      parse_Expression();
    }
    lookahead1W(16);                // WhiteSpace^token | ')' | ';'
    if (l1 == 40)                   // ';'
    {
      consume(40);                  // ';'
      lookahead1W(33);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
      switch (l1)
      {
      case 40:                      // ';'
        lookahead2W(33);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        switch (lk)
        {
        case 3112:                  // ';' ')'
          lookahead3W(29);          // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
          break;
        case 5160:                  // ';' ';'
          lookahead3W(33);          // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
          break;
        }
        break;
      default:
        lk = l1;
      }
      if (lk == 52264               // ';' ')' Identifier
       || lk == 68648               // ';' ')' Null
       || lk == 85032               // ';' ')' True
       || lk == 101416              // ';' ')' False
       || lk == 117800              // ';' ')' Character
       || lk == 134184              // ';' ')' String
       || lk == 150568              // ';' ')' Integer
       || lk == 166952              // ';' ')' Complex
       || lk == 183336              // ';' ')' Real
       || lk == 199720              // ';' ')' Comment
       || lk == 248872              // ';' ')' '!'
       || lk == 379944              // ';' ')' '('
       || lk == 398376              // ';' ';' ')'
       || lk == 461864              // ';' ')' '+'
       || lk == 478248              // ';' ')' '++'
       || lk == 527400              // ';' ')' '-'
       || lk == 543784              // ';' ')' '--'
       || lk == 658472              // ';' ')' ';'
       || lk == 871464              // ';' ')' '['
       || lk == 937000              // ';' ')' 'break'
       || lk == 986152              // ';' ')' 'continue'
       || lk == 1018920             // ';' ')' 'do'
       || lk == 1051688             // ';' ')' 'export'
       || lk == 1068072             // ';' ')' 'f32'
       || lk == 1084456             // ';' ')' 'f64'
       || lk == 1100840             // ';' ')' 'for'
       || lk == 1117224             // ';' ')' 'foreach'
       || lk == 1133608             // ';' ')' 'global'
       || lk == 1149992             // ';' ')' 'i32'
       || lk == 1166376             // ';' ')' 'i64'
       || lk == 1182760             // ';' ')' 'if'
       || lk == 1199144             // ';' ')' 'import'
       || lk == 1215528             // ';' ')' 'include'
       || lk == 1231912             // ';' ')' 'local'
       || lk == 1248296             // ';' ')' 'return'
       || lk == 1264680             // ';' ')' 'switch'
       || lk == 1281064             // ';' ')' 'test'
       || lk == 1297448             // ';' ')' 'throw'
       || lk == 1313832             // ';' ')' 'try'
       || lk == 1330216             // ';' ')' 'typeof'
       || lk == 1346600             // ';' ')' 'while'
       || lk == 1362984             // ';' ')' '{'
       || lk == 1444904)            // ';' ')' '~'
      {
        lk = memoized(8, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2; var l3A = l3;
          var b3A = b3; var e3A = e3;
          try
          {
            try_Expression();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
          b3 = b3A; e3 = e3A; end = e3A; }}}
          memoize(8, e0, lk);
        }
      }
      if (lk != -2
       && lk != 24                  // ')'
       && lk != 424                 // ';' Identifier
       && lk != 552                 // ';' Null
       && lk != 680                 // ';' True
       && lk != 808                 // ';' False
       && lk != 936                 // ';' Character
       && lk != 1064                // ';' String
       && lk != 1192                // ';' Integer
       && lk != 1320                // ';' Complex
       && lk != 1448                // ';' Real
       && lk != 1576                // ';' Comment
       && lk != 1960                // ';' '!'
       && lk != 2984                // ';' '('
       && lk != 3624                // ';' '+'
       && lk != 3752                // ';' '++'
       && lk != 4136                // ';' '-'
       && lk != 4264                // ';' '--'
       && lk != 6824                // ';' '['
       && lk != 7336                // ';' 'break'
       && lk != 7720                // ';' 'continue'
       && lk != 7976                // ';' 'do'
       && lk != 8232                // ';' 'export'
       && lk != 8360                // ';' 'f32'
       && lk != 8488                // ';' 'f64'
       && lk != 8616                // ';' 'for'
       && lk != 8744                // ';' 'foreach'
       && lk != 8872                // ';' 'global'
       && lk != 9000                // ';' 'i32'
       && lk != 9128                // ';' 'i64'
       && lk != 9256                // ';' 'if'
       && lk != 9384                // ';' 'import'
       && lk != 9512                // ';' 'include'
       && lk != 9640                // ';' 'local'
       && lk != 9768                // ';' 'return'
       && lk != 9896                // ';' 'switch'
       && lk != 10024               // ';' 'test'
       && lk != 10152               // ';' 'throw'
       && lk != 10280               // ';' 'try'
       && lk != 10408               // ';' 'typeof'
       && lk != 10536               // ';' 'while'
       && lk != 10664               // ';' '{'
       && lk != 11304)              // ';' '~'
      {
        whitespace();
        parse_Expression();
      }
      lookahead1W(16);              // WhiteSpace^token | ')' | ';'
      if (l1 == 40)                 // ';'
      {
        consume(40);                // ';'
        lookahead1W(33);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        if (l1 != 24)               // ')'
        {
          whitespace();
          parse_Expression();
        }
      }
    }
    lookahead1W(4);                 // WhiteSpace^token | ')'
    consume(24);                    // ')'
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    lookahead1W(40);                // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | ',' | '-' |
                                    // '--' | ':' | ';' | '[' | ']' | 'break' | 'case' | 'catch' | 'continue' |
                                    // 'default' | 'do' | 'else' | 'export' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '}' | '~'
    switch (l1)
    {
    case 59:                        // 'catch'
      lookahead2W(3);               // WhiteSpace^token | '('
      switch (lk)
      {
      case 3003:                    // 'catch' '('
        lookahead3W(29);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        break;
      }
      break;
    default:
      lk = l1;
    }
    if (lk == 52155                 // 'catch' '(' Identifier
     || lk == 68539                 // 'catch' '(' Null
     || lk == 84923                 // 'catch' '(' True
     || lk == 101307                // 'catch' '(' False
     || lk == 117691                // 'catch' '(' Character
     || lk == 134075                // 'catch' '(' String
     || lk == 150459                // 'catch' '(' Integer
     || lk == 166843                // 'catch' '(' Complex
     || lk == 183227                // 'catch' '(' Real
     || lk == 199611                // 'catch' '(' Comment
     || lk == 248763                // 'catch' '(' '!'
     || lk == 379835                // 'catch' '(' '('
     || lk == 461755                // 'catch' '(' '+'
     || lk == 478139                // 'catch' '(' '++'
     || lk == 527291                // 'catch' '(' '-'
     || lk == 543675                // 'catch' '(' '--'
     || lk == 658363                // 'catch' '(' ';'
     || lk == 871355                // 'catch' '(' '['
     || lk == 936891                // 'catch' '(' 'break'
     || lk == 986043                // 'catch' '(' 'continue'
     || lk == 1018811               // 'catch' '(' 'do'
     || lk == 1051579               // 'catch' '(' 'export'
     || lk == 1067963               // 'catch' '(' 'f32'
     || lk == 1084347               // 'catch' '(' 'f64'
     || lk == 1100731               // 'catch' '(' 'for'
     || lk == 1117115               // 'catch' '(' 'foreach'
     || lk == 1133499               // 'catch' '(' 'global'
     || lk == 1149883               // 'catch' '(' 'i32'
     || lk == 1166267               // 'catch' '(' 'i64'
     || lk == 1182651               // 'catch' '(' 'if'
     || lk == 1199035               // 'catch' '(' 'import'
     || lk == 1215419               // 'catch' '(' 'include'
     || lk == 1231803               // 'catch' '(' 'local'
     || lk == 1248187               // 'catch' '(' 'return'
     || lk == 1264571               // 'catch' '(' 'switch'
     || lk == 1280955               // 'catch' '(' 'test'
     || lk == 1297339               // 'catch' '(' 'throw'
     || lk == 1313723               // 'catch' '(' 'try'
     || lk == 1330107               // 'catch' '(' 'typeof'
     || lk == 1346491               // 'catch' '(' 'while'
     || lk == 1362875               // 'catch' '(' '{'
     || lk == 1444795)              // 'catch' '(' '~'
    {
      lk = memoized(9, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2; var l3A = l3;
        var b3A = b3; var e3A = e3;
        try
        {
          try_Catch();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
        b3 = b3A; e3 = e3A; end = e3A; }}}
        memoize(9, e0, lk);
      }
    }
    if (lk == -1)
    {
      whitespace();
      parse_Catch();
    }
    eventHandler.endNonterminal("Test", e0);
  }

  function try_Test()
  {
    consumeT(78);                   // 'test'
    lookahead1W(3);                 // WhiteSpace^token | '('
    consumeT(23);                   // '('
    lookahead1W(33);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    switch (l1)
    {
    case 40:                        // ';'
      lookahead2W(33);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
      switch (lk)
      {
      case 3112:                    // ';' ')'
        lookahead3W(29);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        break;
      case 5160:                    // ';' ';'
        lookahead3W(33);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        break;
      }
      break;
    default:
      lk = l1;
    }
    if (lk != 3                     // Identifier
     && lk != 4                     // Null
     && lk != 5                     // True
     && lk != 6                     // False
     && lk != 7                     // Character
     && lk != 8                     // String
     && lk != 9                     // Integer
     && lk != 10                    // Complex
     && lk != 11                    // Real
     && lk != 12                    // Comment
     && lk != 15                    // '!'
     && lk != 23                    // '('
     && lk != 24                    // ')'
     && lk != 28                    // '+'
     && lk != 29                    // '++'
     && lk != 32                    // '-'
     && lk != 33                    // '--'
     && lk != 53                    // '['
     && lk != 57                    // 'break'
     && lk != 60                    // 'continue'
     && lk != 62                    // 'do'
     && lk != 64                    // 'export'
     && lk != 65                    // 'f32'
     && lk != 66                    // 'f64'
     && lk != 67                    // 'for'
     && lk != 68                    // 'foreach'
     && lk != 69                    // 'global'
     && lk != 70                    // 'i32'
     && lk != 71                    // 'i64'
     && lk != 72                    // 'if'
     && lk != 73                    // 'import'
     && lk != 74                    // 'include'
     && lk != 75                    // 'local'
     && lk != 76                    // 'return'
     && lk != 77                    // 'switch'
     && lk != 78                    // 'test'
     && lk != 79                    // 'throw'
     && lk != 80                    // 'try'
     && lk != 81                    // 'typeof'
     && lk != 82                    // 'while'
     && lk != 83                    // '{'
     && lk != 88                    // '~'
     && lk != 424                   // ';' Identifier
     && lk != 552                   // ';' Null
     && lk != 680                   // ';' True
     && lk != 808                   // ';' False
     && lk != 936                   // ';' Character
     && lk != 1064                  // ';' String
     && lk != 1192                  // ';' Integer
     && lk != 1320                  // ';' Complex
     && lk != 1448                  // ';' Real
     && lk != 1576                  // ';' Comment
     && lk != 1960                  // ';' '!'
     && lk != 2984                  // ';' '('
     && lk != 3624                  // ';' '+'
     && lk != 3752                  // ';' '++'
     && lk != 4136                  // ';' '-'
     && lk != 4264                  // ';' '--'
     && lk != 6824                  // ';' '['
     && lk != 7336                  // ';' 'break'
     && lk != 7720                  // ';' 'continue'
     && lk != 7976                  // ';' 'do'
     && lk != 8232                  // ';' 'export'
     && lk != 8360                  // ';' 'f32'
     && lk != 8488                  // ';' 'f64'
     && lk != 8616                  // ';' 'for'
     && lk != 8744                  // ';' 'foreach'
     && lk != 8872                  // ';' 'global'
     && lk != 9000                  // ';' 'i32'
     && lk != 9128                  // ';' 'i64'
     && lk != 9256                  // ';' 'if'
     && lk != 9384                  // ';' 'import'
     && lk != 9512                  // ';' 'include'
     && lk != 9640                  // ';' 'local'
     && lk != 9768                  // ';' 'return'
     && lk != 9896                  // ';' 'switch'
     && lk != 10024                 // ';' 'test'
     && lk != 10152                 // ';' 'throw'
     && lk != 10280                 // ';' 'try'
     && lk != 10408                 // ';' 'typeof'
     && lk != 10536                 // ';' 'while'
     && lk != 10664                 // ';' '{'
     && lk != 11304)                // ';' '~'
    {
      lk = memoized(7, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2; var l3A = l3;
        var b3A = b3; var e3A = e3;
        try
        {
          try_Expression();
          memoize(7, e0A, -1);
        }
        catch (p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
          b3 = b3A; e3 = e3A; end = e3A; }}}
          memoize(7, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1
     || lk == 3                     // Identifier
     || lk == 4                     // Null
     || lk == 5                     // True
     || lk == 6                     // False
     || lk == 7                     // Character
     || lk == 8                     // String
     || lk == 9                     // Integer
     || lk == 10                    // Complex
     || lk == 11                    // Real
     || lk == 12                    // Comment
     || lk == 15                    // '!'
     || lk == 23                    // '('
     || lk == 28                    // '+'
     || lk == 29                    // '++'
     || lk == 32                    // '-'
     || lk == 33                    // '--'
     || lk == 53                    // '['
     || lk == 57                    // 'break'
     || lk == 60                    // 'continue'
     || lk == 62                    // 'do'
     || lk == 64                    // 'export'
     || lk == 65                    // 'f32'
     || lk == 66                    // 'f64'
     || lk == 67                    // 'for'
     || lk == 68                    // 'foreach'
     || lk == 69                    // 'global'
     || lk == 70                    // 'i32'
     || lk == 71                    // 'i64'
     || lk == 72                    // 'if'
     || lk == 73                    // 'import'
     || lk == 74                    // 'include'
     || lk == 75                    // 'local'
     || lk == 76                    // 'return'
     || lk == 77                    // 'switch'
     || lk == 78                    // 'test'
     || lk == 79                    // 'throw'
     || lk == 80                    // 'try'
     || lk == 81                    // 'typeof'
     || lk == 82                    // 'while'
     || lk == 83                    // '{'
     || lk == 88)                   // '~'
    {
      try_Expression();
    }
    lookahead1W(16);                // WhiteSpace^token | ')' | ';'
    if (l1 == 40)                   // ';'
    {
      consumeT(40);                 // ';'
      lookahead1W(33);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
      switch (l1)
      {
      case 40:                      // ';'
        lookahead2W(33);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        switch (lk)
        {
        case 3112:                  // ';' ')'
          lookahead3W(29);          // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
          break;
        case 5160:                  // ';' ';'
          lookahead3W(33);          // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
          break;
        }
        break;
      default:
        lk = l1;
      }
      if (lk == 52264               // ';' ')' Identifier
       || lk == 68648               // ';' ')' Null
       || lk == 85032               // ';' ')' True
       || lk == 101416              // ';' ')' False
       || lk == 117800              // ';' ')' Character
       || lk == 134184              // ';' ')' String
       || lk == 150568              // ';' ')' Integer
       || lk == 166952              // ';' ')' Complex
       || lk == 183336              // ';' ')' Real
       || lk == 199720              // ';' ')' Comment
       || lk == 248872              // ';' ')' '!'
       || lk == 379944              // ';' ')' '('
       || lk == 398376              // ';' ';' ')'
       || lk == 461864              // ';' ')' '+'
       || lk == 478248              // ';' ')' '++'
       || lk == 527400              // ';' ')' '-'
       || lk == 543784              // ';' ')' '--'
       || lk == 658472              // ';' ')' ';'
       || lk == 871464              // ';' ')' '['
       || lk == 937000              // ';' ')' 'break'
       || lk == 986152              // ';' ')' 'continue'
       || lk == 1018920             // ';' ')' 'do'
       || lk == 1051688             // ';' ')' 'export'
       || lk == 1068072             // ';' ')' 'f32'
       || lk == 1084456             // ';' ')' 'f64'
       || lk == 1100840             // ';' ')' 'for'
       || lk == 1117224             // ';' ')' 'foreach'
       || lk == 1133608             // ';' ')' 'global'
       || lk == 1149992             // ';' ')' 'i32'
       || lk == 1166376             // ';' ')' 'i64'
       || lk == 1182760             // ';' ')' 'if'
       || lk == 1199144             // ';' ')' 'import'
       || lk == 1215528             // ';' ')' 'include'
       || lk == 1231912             // ';' ')' 'local'
       || lk == 1248296             // ';' ')' 'return'
       || lk == 1264680             // ';' ')' 'switch'
       || lk == 1281064             // ';' ')' 'test'
       || lk == 1297448             // ';' ')' 'throw'
       || lk == 1313832             // ';' ')' 'try'
       || lk == 1330216             // ';' ')' 'typeof'
       || lk == 1346600             // ';' ')' 'while'
       || lk == 1362984             // ';' ')' '{'
       || lk == 1444904)            // ';' ')' '~'
      {
        lk = memoized(8, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2; var l3A = l3;
          var b3A = b3; var e3A = e3;
          try
          {
            try_Expression();
            memoize(8, e0A, -1);
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
            b3 = b3A; e3 = e3A; end = e3A; }}}
            memoize(8, e0A, -2);
          }
          lk = -2;
        }
      }
      if (lk != -2
       && lk != 24                  // ')'
       && lk != 424                 // ';' Identifier
       && lk != 552                 // ';' Null
       && lk != 680                 // ';' True
       && lk != 808                 // ';' False
       && lk != 936                 // ';' Character
       && lk != 1064                // ';' String
       && lk != 1192                // ';' Integer
       && lk != 1320                // ';' Complex
       && lk != 1448                // ';' Real
       && lk != 1576                // ';' Comment
       && lk != 1960                // ';' '!'
       && lk != 2984                // ';' '('
       && lk != 3624                // ';' '+'
       && lk != 3752                // ';' '++'
       && lk != 4136                // ';' '-'
       && lk != 4264                // ';' '--'
       && lk != 6824                // ';' '['
       && lk != 7336                // ';' 'break'
       && lk != 7720                // ';' 'continue'
       && lk != 7976                // ';' 'do'
       && lk != 8232                // ';' 'export'
       && lk != 8360                // ';' 'f32'
       && lk != 8488                // ';' 'f64'
       && lk != 8616                // ';' 'for'
       && lk != 8744                // ';' 'foreach'
       && lk != 8872                // ';' 'global'
       && lk != 9000                // ';' 'i32'
       && lk != 9128                // ';' 'i64'
       && lk != 9256                // ';' 'if'
       && lk != 9384                // ';' 'import'
       && lk != 9512                // ';' 'include'
       && lk != 9640                // ';' 'local'
       && lk != 9768                // ';' 'return'
       && lk != 9896                // ';' 'switch'
       && lk != 10024               // ';' 'test'
       && lk != 10152               // ';' 'throw'
       && lk != 10280               // ';' 'try'
       && lk != 10408               // ';' 'typeof'
       && lk != 10536               // ';' 'while'
       && lk != 10664               // ';' '{'
       && lk != 11304)              // ';' '~'
      {
        try_Expression();
      }
      lookahead1W(16);              // WhiteSpace^token | ')' | ';'
      if (l1 == 40)                 // ';'
      {
        consumeT(40);               // ';'
        lookahead1W(33);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        if (l1 != 24)               // ')'
        {
          try_Expression();
        }
      }
    }
    lookahead1W(4);                 // WhiteSpace^token | ')'
    consumeT(24);                   // ')'
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    try_Expression();
    lookahead1W(40);                // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | ',' | '-' |
                                    // '--' | ':' | ';' | '[' | ']' | 'break' | 'case' | 'catch' | 'continue' |
                                    // 'default' | 'do' | 'else' | 'export' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '}' | '~'
    switch (l1)
    {
    case 59:                        // 'catch'
      lookahead2W(3);               // WhiteSpace^token | '('
      switch (lk)
      {
      case 3003:                    // 'catch' '('
        lookahead3W(29);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        break;
      }
      break;
    default:
      lk = l1;
    }
    if (lk == 52155                 // 'catch' '(' Identifier
     || lk == 68539                 // 'catch' '(' Null
     || lk == 84923                 // 'catch' '(' True
     || lk == 101307                // 'catch' '(' False
     || lk == 117691                // 'catch' '(' Character
     || lk == 134075                // 'catch' '(' String
     || lk == 150459                // 'catch' '(' Integer
     || lk == 166843                // 'catch' '(' Complex
     || lk == 183227                // 'catch' '(' Real
     || lk == 199611                // 'catch' '(' Comment
     || lk == 248763                // 'catch' '(' '!'
     || lk == 379835                // 'catch' '(' '('
     || lk == 461755                // 'catch' '(' '+'
     || lk == 478139                // 'catch' '(' '++'
     || lk == 527291                // 'catch' '(' '-'
     || lk == 543675                // 'catch' '(' '--'
     || lk == 658363                // 'catch' '(' ';'
     || lk == 871355                // 'catch' '(' '['
     || lk == 936891                // 'catch' '(' 'break'
     || lk == 986043                // 'catch' '(' 'continue'
     || lk == 1018811               // 'catch' '(' 'do'
     || lk == 1051579               // 'catch' '(' 'export'
     || lk == 1067963               // 'catch' '(' 'f32'
     || lk == 1084347               // 'catch' '(' 'f64'
     || lk == 1100731               // 'catch' '(' 'for'
     || lk == 1117115               // 'catch' '(' 'foreach'
     || lk == 1133499               // 'catch' '(' 'global'
     || lk == 1149883               // 'catch' '(' 'i32'
     || lk == 1166267               // 'catch' '(' 'i64'
     || lk == 1182651               // 'catch' '(' 'if'
     || lk == 1199035               // 'catch' '(' 'import'
     || lk == 1215419               // 'catch' '(' 'include'
     || lk == 1231803               // 'catch' '(' 'local'
     || lk == 1248187               // 'catch' '(' 'return'
     || lk == 1264571               // 'catch' '(' 'switch'
     || lk == 1280955               // 'catch' '(' 'test'
     || lk == 1297339               // 'catch' '(' 'throw'
     || lk == 1313723               // 'catch' '(' 'try'
     || lk == 1330107               // 'catch' '(' 'typeof'
     || lk == 1346491               // 'catch' '(' 'while'
     || lk == 1362875               // 'catch' '(' '{'
     || lk == 1444795)              // 'catch' '(' '~'
    {
      lk = memoized(9, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2; var l3A = l3;
        var b3A = b3; var e3A = e3;
        try
        {
          try_Catch();
          memoize(9, e0A, -1);
        }
        catch (p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
          b3 = b3A; e3 = e3A; end = e3A; }}}
          memoize(9, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      try_Catch();
    }
  }

  function parse_Catch()
  {
    eventHandler.startNonterminal("Catch", e0);
    consume(59);                    // 'catch'
    lookahead1W(3);                 // WhiteSpace^token | '('
    consume(23);                    // '('
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    lookahead1W(4);                 // WhiteSpace^token | ')'
    consume(24);                    // ')'
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    eventHandler.endNonterminal("Catch", e0);
  }

  function try_Catch()
  {
    consumeT(59);                   // 'catch'
    lookahead1W(3);                 // WhiteSpace^token | '('
    consumeT(23);                   // '('
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    try_Expression();
    lookahead1W(4);                 // WhiteSpace^token | ')'
    consumeT(24);                   // ')'
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    try_Expression();
  }

  function parse_NamespaceDeclaration()
  {
    eventHandler.startNonterminal("NamespaceDeclaration", e0);
    consume(3);                     // Identifier
    for (;;)
    {
      lookahead1W(18);              // WhiteSpace^token | '.' | '{'
      if (l1 != 35)                 // '.'
      {
        break;
      }
      consume(35);                  // '.'
      lookahead1W(0);               // Identifier | WhiteSpace^token
      consume(3);                   // Identifier
    }
    whitespace();
    parse_Block();
    eventHandler.endNonterminal("NamespaceDeclaration", e0);
  }

  function try_NamespaceDeclaration()
  {
    consumeT(3);                    // Identifier
    for (;;)
    {
      lookahead1W(18);              // WhiteSpace^token | '.' | '{'
      if (l1 != 35)                 // '.'
      {
        break;
      }
      consumeT(35);                 // '.'
      lookahead1W(0);               // Identifier | WhiteSpace^token
      consumeT(3);                  // Identifier
    }
    try_Block();
  }

  function parse_FunctionDeclaration()
  {
    eventHandler.startNonterminal("FunctionDeclaration", e0);
    switch (l1)
    {
    case 3:                         // Identifier
      lookahead2W(15);              // WhiteSpace^token | '(' | '.'
      switch (lk)
      {
      case 2947:                    // Identifier '('
        lookahead3W(33);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        break;
      case 4483:                    // Identifier '.'
        lookahead3W(0);             // Identifier | WhiteSpace^token
        break;
      }
      break;
    case 65:                        // 'f32'
    case 66:                        // 'f64'
    case 70:                        // 'i32'
    case 71:                        // 'i64'
      lookahead2W(0);               // Identifier | WhiteSpace^token
      switch (lk)
      {
      case 449:                     // 'f32' Identifier
      case 450:                     // 'f64' Identifier
      case 454:                     // 'i32' Identifier
      case 455:                     // 'i64' Identifier
        lookahead3W(15);            // WhiteSpace^token | '(' | '.'
        break;
      }
      break;
    default:
      lk = l1;
    }
    lk = memoized(10, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2; var l3A = l3;
      var b3A = b3; var e3A = e3;
      try
      {
        consumeT(3);                // Identifier
        for (;;)
        {
          lookahead1W(15);          // WhiteSpace^token | '(' | '.'
          if (l1 != 35)             // '.'
          {
            break;
          }
          consumeT(35);             // '.'
          lookahead1W(0);           // Identifier | WhiteSpace^token
          consumeT(3);              // Identifier
        }
        consumeT(23);               // '('
        lookahead1W(33);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        if (l1 != 24)               // ')'
        {
          try_Arguments();
        }
        consumeT(24);               // ')'
        lookahead1W(10);            // WhiteSpace^token | '='
        consumeT(45);               // '='
        lookahead1W(29);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        try_Expression();
        lk = -1;
      }
      catch (p1A)
      {
        try
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
          b3 = b3A; e3 = e3A; end = e3A; }}}
          consumeT(3);              // Identifier
          for (;;)
          {
            lookahead1W(15);        // WhiteSpace^token | '(' | '.'
            if (l1 != 35)           // '.'
            {
              break;
            }
            consumeT(35);           // '.'
            lookahead1W(0);         // Identifier | WhiteSpace^token
            consumeT(3);            // Identifier
          }
          consumeT(23);             // '('
          lookahead1W(33);          // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
          if (l1 != 24)             // ')'
          {
            try_Arguments();
          }
          consumeT(24);             // ')'
          lookahead1W(11);          // WhiteSpace^token | '?='
          consumeT(52);             // '?='
          lookahead1W(14);          // WhiteSpace^token | '{'
          try_Block();
          lk = -2;
        }
        catch (p2A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
            b3 = b3A; e3 = e3A; end = e3A; }}}
            consumeT(3);            // Identifier
            for (;;)
            {
              lookahead1W(15);      // WhiteSpace^token | '(' | '.'
              if (l1 != 35)         // '.'
              {
                break;
              }
              consumeT(35);         // '.'
              lookahead1W(0);       // Identifier | WhiteSpace^token
              consumeT(3);          // Identifier
            }
            consumeT(23);           // '('
            lookahead1W(33);        // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
            if (l1 != 24)           // ')'
            {
              try_Arguments();
            }
            consumeT(24);           // ')'
            lookahead1W(2);         // WhiteSpace^token | '#='
            consumeT(17);           // '#='
            lookahead1W(14);        // WhiteSpace^token | '{'
            try_Block();
            lk = -3;
          }
          catch (p3A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
              b3 = b3A; e3 = e3A; end = e3A; }}}
              consumeT(3);          // Identifier
              for (;;)
              {
                lookahead1W(15);    // WhiteSpace^token | '(' | '.'
                if (l1 != 35)       // '.'
                {
                  break;
                }
                consumeT(35);       // '.'
                lookahead1W(0);     // Identifier | WhiteSpace^token
                consumeT(3);        // Identifier
              }
              consumeT(23);         // '('
              lookahead1W(33);      // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
              if (l1 != 24)         // ')'
              {
                try_Arguments();
              }
              consumeT(24);         // ')'
              lookahead1W(8);       // WhiteSpace^token | ':='
              consumeT(39);         // ':='
              lookahead1W(14);      // WhiteSpace^token | '{'
              try_Block();
              lk = -4;
            }
            catch (p4A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
                b3 = b3A; e3 = e3A; end = e3A; }}}
                if (l1 != 3)        // Identifier
                {
                  try_Type();
                }
                lookahead1W(0);     // Identifier | WhiteSpace^token
                consumeT(3);        // Identifier
                for (;;)
                {
                  lookahead1W(15);  // WhiteSpace^token | '(' | '.'
                  if (l1 != 35)     // '.'
                  {
                    break;
                  }
                  consumeT(35);     // '.'
                  lookahead1W(0);   // Identifier | WhiteSpace^token
                  consumeT(3);      // Identifier
                }
                consumeT(23);       // '('
                lookahead1W(33);    // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
                if (l1 != 24)       // ')'
                {
                  try_Arguments();
                }
                consumeT(24);       // ')'
                lookahead1W(14);    // WhiteSpace^token | '{'
                try_Block();
                lk = -5;
              }
              catch (p5A)
              {
                lk = -6;
              }
            }
          }
        }
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
      b3 = b3A; e3 = e3A; end = e3A; }}}
      memoize(10, e0, lk);
    }
    switch (lk)
    {
    case -1:
      consume(3);                   // Identifier
      for (;;)
      {
        lookahead1W(15);            // WhiteSpace^token | '(' | '.'
        if (l1 != 35)               // '.'
        {
          break;
        }
        consume(35);                // '.'
        lookahead1W(0);             // Identifier | WhiteSpace^token
        consume(3);                 // Identifier
      }
      consume(23);                  // '('
      lookahead1W(33);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
      if (l1 != 24)                 // ')'
      {
        whitespace();
        parse_Arguments();
      }
      consume(24);                  // ')'
      lookahead1W(10);              // WhiteSpace^token | '='
      consume(45);                  // '='
      lookahead1W(29);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
      whitespace();
      parse_Expression();
      break;
    case -2:
      consume(3);                   // Identifier
      for (;;)
      {
        lookahead1W(15);            // WhiteSpace^token | '(' | '.'
        if (l1 != 35)               // '.'
        {
          break;
        }
        consume(35);                // '.'
        lookahead1W(0);             // Identifier | WhiteSpace^token
        consume(3);                 // Identifier
      }
      consume(23);                  // '('
      lookahead1W(33);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
      if (l1 != 24)                 // ')'
      {
        whitespace();
        parse_Arguments();
      }
      consume(24);                  // ')'
      lookahead1W(11);              // WhiteSpace^token | '?='
      consume(52);                  // '?='
      lookahead1W(14);              // WhiteSpace^token | '{'
      whitespace();
      parse_Block();
      break;
    case -3:
      consume(3);                   // Identifier
      for (;;)
      {
        lookahead1W(15);            // WhiteSpace^token | '(' | '.'
        if (l1 != 35)               // '.'
        {
          break;
        }
        consume(35);                // '.'
        lookahead1W(0);             // Identifier | WhiteSpace^token
        consume(3);                 // Identifier
      }
      consume(23);                  // '('
      lookahead1W(33);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
      if (l1 != 24)                 // ')'
      {
        whitespace();
        parse_Arguments();
      }
      consume(24);                  // ')'
      lookahead1W(2);               // WhiteSpace^token | '#='
      consume(17);                  // '#='
      lookahead1W(14);              // WhiteSpace^token | '{'
      whitespace();
      parse_Block();
      break;
    case -4:
      consume(3);                   // Identifier
      for (;;)
      {
        lookahead1W(15);            // WhiteSpace^token | '(' | '.'
        if (l1 != 35)               // '.'
        {
          break;
        }
        consume(35);                // '.'
        lookahead1W(0);             // Identifier | WhiteSpace^token
        consume(3);                 // Identifier
      }
      consume(23);                  // '('
      lookahead1W(33);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
      if (l1 != 24)                 // ')'
      {
        whitespace();
        parse_Arguments();
      }
      consume(24);                  // ')'
      lookahead1W(8);               // WhiteSpace^token | ':='
      consume(39);                  // ':='
      lookahead1W(14);              // WhiteSpace^token | '{'
      whitespace();
      parse_Block();
      break;
    case -5:
      if (l1 != 3)                  // Identifier
      {
        whitespace();
        parse_Type();
      }
      lookahead1W(0);               // Identifier | WhiteSpace^token
      consume(3);                   // Identifier
      for (;;)
      {
        lookahead1W(15);            // WhiteSpace^token | '(' | '.'
        if (l1 != 35)               // '.'
        {
          break;
        }
        consume(35);                // '.'
        lookahead1W(0);             // Identifier | WhiteSpace^token
        consume(3);                 // Identifier
      }
      consume(23);                  // '('
      lookahead1W(33);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
      if (l1 != 24)                 // ')'
      {
        whitespace();
        parse_Arguments();
      }
      consume(24);                  // ')'
      lookahead1W(14);              // WhiteSpace^token | '{'
      whitespace();
      parse_Block();
      break;
    default:
      if (l1 != 3)                  // Identifier
      {
        whitespace();
        parse_Type();
      }
      lookahead1W(0);               // Identifier | WhiteSpace^token
      consume(3);                   // Identifier
      for (;;)
      {
        lookahead1W(15);            // WhiteSpace^token | '(' | '.'
        if (l1 != 35)               // '.'
        {
          break;
        }
        consume(35);                // '.'
        lookahead1W(0);             // Identifier | WhiteSpace^token
        consume(3);                 // Identifier
      }
      consume(23);                  // '('
      lookahead1W(33);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
      if (l1 != 24)                 // ')'
      {
        whitespace();
        parse_Arguments();
      }
      consume(24);                  // ')'
      lookahead1W(1);               // Script | WhiteSpace^token
      consume(13);                  // Script
    }
    eventHandler.endNonterminal("FunctionDeclaration", e0);
  }

  function try_FunctionDeclaration()
  {
    switch (l1)
    {
    case 3:                         // Identifier
      lookahead2W(15);              // WhiteSpace^token | '(' | '.'
      switch (lk)
      {
      case 2947:                    // Identifier '('
        lookahead3W(33);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        break;
      case 4483:                    // Identifier '.'
        lookahead3W(0);             // Identifier | WhiteSpace^token
        break;
      }
      break;
    case 65:                        // 'f32'
    case 66:                        // 'f64'
    case 70:                        // 'i32'
    case 71:                        // 'i64'
      lookahead2W(0);               // Identifier | WhiteSpace^token
      switch (lk)
      {
      case 449:                     // 'f32' Identifier
      case 450:                     // 'f64' Identifier
      case 454:                     // 'i32' Identifier
      case 455:                     // 'i64' Identifier
        lookahead3W(15);            // WhiteSpace^token | '(' | '.'
        break;
      }
      break;
    default:
      lk = l1;
    }
    lk = memoized(10, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2; var l3A = l3;
      var b3A = b3; var e3A = e3;
      try
      {
        consumeT(3);                // Identifier
        for (;;)
        {
          lookahead1W(15);          // WhiteSpace^token | '(' | '.'
          if (l1 != 35)             // '.'
          {
            break;
          }
          consumeT(35);             // '.'
          lookahead1W(0);           // Identifier | WhiteSpace^token
          consumeT(3);              // Identifier
        }
        consumeT(23);               // '('
        lookahead1W(33);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        if (l1 != 24)               // ')'
        {
          try_Arguments();
        }
        consumeT(24);               // ')'
        lookahead1W(10);            // WhiteSpace^token | '='
        consumeT(45);               // '='
        lookahead1W(29);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        try_Expression();
        memoize(10, e0A, -1);
        lk = -7;
      }
      catch (p1A)
      {
        try
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
          b3 = b3A; e3 = e3A; end = e3A; }}}
          consumeT(3);              // Identifier
          for (;;)
          {
            lookahead1W(15);        // WhiteSpace^token | '(' | '.'
            if (l1 != 35)           // '.'
            {
              break;
            }
            consumeT(35);           // '.'
            lookahead1W(0);         // Identifier | WhiteSpace^token
            consumeT(3);            // Identifier
          }
          consumeT(23);             // '('
          lookahead1W(33);          // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
          if (l1 != 24)             // ')'
          {
            try_Arguments();
          }
          consumeT(24);             // ')'
          lookahead1W(11);          // WhiteSpace^token | '?='
          consumeT(52);             // '?='
          lookahead1W(14);          // WhiteSpace^token | '{'
          try_Block();
          memoize(10, e0A, -2);
          lk = -7;
        }
        catch (p2A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
            b3 = b3A; e3 = e3A; end = e3A; }}}
            consumeT(3);            // Identifier
            for (;;)
            {
              lookahead1W(15);      // WhiteSpace^token | '(' | '.'
              if (l1 != 35)         // '.'
              {
                break;
              }
              consumeT(35);         // '.'
              lookahead1W(0);       // Identifier | WhiteSpace^token
              consumeT(3);          // Identifier
            }
            consumeT(23);           // '('
            lookahead1W(33);        // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
            if (l1 != 24)           // ')'
            {
              try_Arguments();
            }
            consumeT(24);           // ')'
            lookahead1W(2);         // WhiteSpace^token | '#='
            consumeT(17);           // '#='
            lookahead1W(14);        // WhiteSpace^token | '{'
            try_Block();
            memoize(10, e0A, -3);
            lk = -7;
          }
          catch (p3A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
              b3 = b3A; e3 = e3A; end = e3A; }}}
              consumeT(3);          // Identifier
              for (;;)
              {
                lookahead1W(15);    // WhiteSpace^token | '(' | '.'
                if (l1 != 35)       // '.'
                {
                  break;
                }
                consumeT(35);       // '.'
                lookahead1W(0);     // Identifier | WhiteSpace^token
                consumeT(3);        // Identifier
              }
              consumeT(23);         // '('
              lookahead1W(33);      // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
              if (l1 != 24)         // ')'
              {
                try_Arguments();
              }
              consumeT(24);         // ')'
              lookahead1W(8);       // WhiteSpace^token | ':='
              consumeT(39);         // ':='
              lookahead1W(14);      // WhiteSpace^token | '{'
              try_Block();
              memoize(10, e0A, -4);
              lk = -7;
            }
            catch (p4A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
                b3 = b3A; e3 = e3A; end = e3A; }}}
                if (l1 != 3)        // Identifier
                {
                  try_Type();
                }
                lookahead1W(0);     // Identifier | WhiteSpace^token
                consumeT(3);        // Identifier
                for (;;)
                {
                  lookahead1W(15);  // WhiteSpace^token | '(' | '.'
                  if (l1 != 35)     // '.'
                  {
                    break;
                  }
                  consumeT(35);     // '.'
                  lookahead1W(0);   // Identifier | WhiteSpace^token
                  consumeT(3);      // Identifier
                }
                consumeT(23);       // '('
                lookahead1W(33);    // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
                if (l1 != 24)       // ')'
                {
                  try_Arguments();
                }
                consumeT(24);       // ')'
                lookahead1W(14);    // WhiteSpace^token | '{'
                try_Block();
                memoize(10, e0A, -5);
                lk = -7;
              }
              catch (p5A)
              {
                lk = -6;
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
                b3 = b3A; e3 = e3A; end = e3A; }}}
                memoize(10, e0A, -6);
              }
            }
          }
        }
      }
    }
    switch (lk)
    {
    case -1:
      consumeT(3);                  // Identifier
      for (;;)
      {
        lookahead1W(15);            // WhiteSpace^token | '(' | '.'
        if (l1 != 35)               // '.'
        {
          break;
        }
        consumeT(35);               // '.'
        lookahead1W(0);             // Identifier | WhiteSpace^token
        consumeT(3);                // Identifier
      }
      consumeT(23);                 // '('
      lookahead1W(33);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
      if (l1 != 24)                 // ')'
      {
        try_Arguments();
      }
      consumeT(24);                 // ')'
      lookahead1W(10);              // WhiteSpace^token | '='
      consumeT(45);                 // '='
      lookahead1W(29);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
      try_Expression();
      break;
    case -2:
      consumeT(3);                  // Identifier
      for (;;)
      {
        lookahead1W(15);            // WhiteSpace^token | '(' | '.'
        if (l1 != 35)               // '.'
        {
          break;
        }
        consumeT(35);               // '.'
        lookahead1W(0);             // Identifier | WhiteSpace^token
        consumeT(3);                // Identifier
      }
      consumeT(23);                 // '('
      lookahead1W(33);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
      if (l1 != 24)                 // ')'
      {
        try_Arguments();
      }
      consumeT(24);                 // ')'
      lookahead1W(11);              // WhiteSpace^token | '?='
      consumeT(52);                 // '?='
      lookahead1W(14);              // WhiteSpace^token | '{'
      try_Block();
      break;
    case -3:
      consumeT(3);                  // Identifier
      for (;;)
      {
        lookahead1W(15);            // WhiteSpace^token | '(' | '.'
        if (l1 != 35)               // '.'
        {
          break;
        }
        consumeT(35);               // '.'
        lookahead1W(0);             // Identifier | WhiteSpace^token
        consumeT(3);                // Identifier
      }
      consumeT(23);                 // '('
      lookahead1W(33);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
      if (l1 != 24)                 // ')'
      {
        try_Arguments();
      }
      consumeT(24);                 // ')'
      lookahead1W(2);               // WhiteSpace^token | '#='
      consumeT(17);                 // '#='
      lookahead1W(14);              // WhiteSpace^token | '{'
      try_Block();
      break;
    case -4:
      consumeT(3);                  // Identifier
      for (;;)
      {
        lookahead1W(15);            // WhiteSpace^token | '(' | '.'
        if (l1 != 35)               // '.'
        {
          break;
        }
        consumeT(35);               // '.'
        lookahead1W(0);             // Identifier | WhiteSpace^token
        consumeT(3);                // Identifier
      }
      consumeT(23);                 // '('
      lookahead1W(33);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
      if (l1 != 24)                 // ')'
      {
        try_Arguments();
      }
      consumeT(24);                 // ')'
      lookahead1W(8);               // WhiteSpace^token | ':='
      consumeT(39);                 // ':='
      lookahead1W(14);              // WhiteSpace^token | '{'
      try_Block();
      break;
    case -5:
      if (l1 != 3)                  // Identifier
      {
        try_Type();
      }
      lookahead1W(0);               // Identifier | WhiteSpace^token
      consumeT(3);                  // Identifier
      for (;;)
      {
        lookahead1W(15);            // WhiteSpace^token | '(' | '.'
        if (l1 != 35)               // '.'
        {
          break;
        }
        consumeT(35);               // '.'
        lookahead1W(0);             // Identifier | WhiteSpace^token
        consumeT(3);                // Identifier
      }
      consumeT(23);                 // '('
      lookahead1W(33);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
      if (l1 != 24)                 // ')'
      {
        try_Arguments();
      }
      consumeT(24);                 // ')'
      lookahead1W(14);              // WhiteSpace^token | '{'
      try_Block();
      break;
    case -7:
      break;
    default:
      if (l1 != 3)                  // Identifier
      {
        try_Type();
      }
      lookahead1W(0);               // Identifier | WhiteSpace^token
      consumeT(3);                  // Identifier
      for (;;)
      {
        lookahead1W(15);            // WhiteSpace^token | '(' | '.'
        if (l1 != 35)               // '.'
        {
          break;
        }
        consumeT(35);               // '.'
        lookahead1W(0);             // Identifier | WhiteSpace^token
        consumeT(3);                // Identifier
      }
      consumeT(23);                 // '('
      lookahead1W(33);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
      if (l1 != 24)                 // ')'
      {
        try_Arguments();
      }
      consumeT(24);                 // ')'
      lookahead1W(1);               // Script | WhiteSpace^token
      consumeT(13);                 // Script
    }
  }

  function parse_Return()
  {
    eventHandler.startNonterminal("Return", e0);
    consume(76);                    // 'return'
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    eventHandler.endNonterminal("Return", e0);
  }

  function try_Return()
  {
    consumeT(76);                   // 'return'
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    try_Expression();
  }

  function parse_Export()
  {
    eventHandler.startNonterminal("Export", e0);
    consume(64);                    // 'export'
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    eventHandler.endNonterminal("Export", e0);
  }

  function try_Export()
  {
    consumeT(64);                   // 'export'
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    try_Expression();
  }

  function parse_Import()
  {
    eventHandler.startNonterminal("Import", e0);
    consume(73);                    // 'import'
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    eventHandler.endNonterminal("Import", e0);
  }

  function try_Import()
  {
    consumeT(73);                   // 'import'
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    try_Expression();
  }

  function parse_Include()
  {
    eventHandler.startNonterminal("Include", e0);
    consume(74);                    // 'include'
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    eventHandler.endNonterminal("Include", e0);
  }

  function try_Include()
  {
    consumeT(74);                   // 'include'
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    try_Expression();
  }

  function parse_Global()
  {
    eventHandler.startNonterminal("Global", e0);
    consume(69);                    // 'global'
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    eventHandler.endNonterminal("Global", e0);
  }

  function try_Global()
  {
    consumeT(69);                   // 'global'
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    try_Expression();
  }

  function parse_Local()
  {
    eventHandler.startNonterminal("Local", e0);
    consume(75);                    // 'local'
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    eventHandler.endNonterminal("Local", e0);
  }

  function try_Local()
  {
    consumeT(75);                   // 'local'
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    try_Expression();
  }

  function parse_Throw()
  {
    eventHandler.startNonterminal("Throw", e0);
    consume(79);                    // 'throw'
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    eventHandler.endNonterminal("Throw", e0);
  }

  function try_Throw()
  {
    consumeT(79);                   // 'throw'
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    try_Expression();
  }

  function parse_TypeOf()
  {
    eventHandler.startNonterminal("TypeOf", e0);
    consume(81);                    // 'typeof'
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    eventHandler.endNonterminal("TypeOf", e0);
  }

  function try_TypeOf()
  {
    consumeT(81);                   // 'typeof'
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    try_Expression();
  }

  function parse_EmptyStatement()
  {
    eventHandler.startNonterminal("EmptyStatement", e0);
    consume(40);                    // ';'
    eventHandler.endNonterminal("EmptyStatement", e0);
  }

  function try_EmptyStatement()
  {
    consumeT(40);                   // ';'
  }

  function parse_Type()
  {
    eventHandler.startNonterminal("Type", e0);
    switch (l1)
    {
    case 70:                        // 'i32'
      consume(70);                  // 'i32'
      break;
    case 71:                        // 'i64'
      consume(71);                  // 'i64'
      break;
    case 65:                        // 'f32'
      consume(65);                  // 'f32'
      break;
    default:
      consume(66);                  // 'f64'
    }
    eventHandler.endNonterminal("Type", e0);
  }

  function try_Type()
  {
    switch (l1)
    {
    case 70:                        // 'i32'
      consumeT(70);                 // 'i32'
      break;
    case 71:                        // 'i64'
      consumeT(71);                 // 'i64'
      break;
    case 65:                        // 'f32'
      consumeT(65);                 // 'f32'
      break;
    default:
      consumeT(66);                 // 'f64'
    }
  }

  function parse_Arguments()
  {
    eventHandler.startNonterminal("Arguments", e0);
    parse_Expression();
    for (;;)
    {
      lookahead1W(20);              // WhiteSpace^token | ')' | ',' | ']'
      if (l1 != 31)                 // ','
      {
        break;
      }
      consume(31);                  // ','
      lookahead1W(29);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
      whitespace();
      parse_Expression();
    }
    eventHandler.endNonterminal("Arguments", e0);
  }

  function try_Arguments()
  {
    try_Expression();
    for (;;)
    {
      lookahead1W(20);              // WhiteSpace^token | ')' | ',' | ']'
      if (l1 != 31)                 // ','
      {
        break;
      }
      consumeT(31);                 // ','
      lookahead1W(29);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
      try_Expression();
    }
  }

  function parse_Member()
  {
    eventHandler.startNonterminal("Member", e0);
    switch (l1)
    {
    case 3:                         // Identifier
      lookahead2W(45);              // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' |
                                    // '.' | '/' | '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' |
                                    // '>' | '>=' | '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' |
                                    // 'case' | 'catch' | 'continue' | 'default' | 'do' | 'else' | 'export' | 'f32' |
                                    // 'f64' | 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' |
                                    // 'include' | 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' |
                                    // 'while' | '{' | '|' | '|=' | '||' | '}' | '~'
      switch (lk)
      {
      case 2947:                    // Identifier '('
        lookahead3W(33);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        break;
      case 4483:                    // Identifier '.'
        lookahead3W(0);             // Identifier | WhiteSpace^token
        break;
      }
      break;
    default:
      lk = l1;
    }
    if (lk == 52099                 // Identifier '(' Identifier
     || lk == 53635                 // Identifier '.' Identifier
     || lk == 68483                 // Identifier '(' Null
     || lk == 84867                 // Identifier '(' True
     || lk == 101251                // Identifier '(' False
     || lk == 117635                // Identifier '(' Character
     || lk == 134019                // Identifier '(' String
     || lk == 150403                // Identifier '(' Integer
     || lk == 166787                // Identifier '(' Complex
     || lk == 183171                // Identifier '(' Real
     || lk == 199555                // Identifier '(' Comment
     || lk == 248707                // Identifier '(' '!'
     || lk == 379779                // Identifier '(' '('
     || lk == 461699                // Identifier '(' '+'
     || lk == 478083                // Identifier '(' '++'
     || lk == 527235                // Identifier '(' '-'
     || lk == 543619                // Identifier '(' '--'
     || lk == 658307                // Identifier '(' ';'
     || lk == 871299                // Identifier '(' '['
     || lk == 936835                // Identifier '(' 'break'
     || lk == 985987                // Identifier '(' 'continue'
     || lk == 1018755               // Identifier '(' 'do'
     || lk == 1051523               // Identifier '(' 'export'
     || lk == 1067907               // Identifier '(' 'f32'
     || lk == 1084291               // Identifier '(' 'f64'
     || lk == 1100675               // Identifier '(' 'for'
     || lk == 1117059               // Identifier '(' 'foreach'
     || lk == 1133443               // Identifier '(' 'global'
     || lk == 1149827               // Identifier '(' 'i32'
     || lk == 1166211               // Identifier '(' 'i64'
     || lk == 1182595               // Identifier '(' 'if'
     || lk == 1198979               // Identifier '(' 'import'
     || lk == 1215363               // Identifier '(' 'include'
     || lk == 1231747               // Identifier '(' 'local'
     || lk == 1248131               // Identifier '(' 'return'
     || lk == 1264515               // Identifier '(' 'switch'
     || lk == 1280899               // Identifier '(' 'test'
     || lk == 1297283               // Identifier '(' 'throw'
     || lk == 1313667               // Identifier '(' 'try'
     || lk == 1330051               // Identifier '(' 'typeof'
     || lk == 1346435               // Identifier '(' 'while'
     || lk == 1362819               // Identifier '(' '{'
     || lk == 1444739)              // Identifier '(' '~'
    {
      lk = memoized(11, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2; var l3A = l3;
        var b3A = b3; var e3A = e3;
        try
        {
          consumeT(3);              // Identifier
          for (;;)
          {
            lookahead1W(15);        // WhiteSpace^token | '(' | '.'
            if (l1 != 35)           // '.'
            {
              break;
            }
            consumeT(35);           // '.'
            lookahead1W(0);         // Identifier | WhiteSpace^token
            consumeT(3);            // Identifier
          }
          consumeT(23);             // '('
          lookahead1W(33);          // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
          if (l1 != 24)             // ')'
          {
            try_Arguments();
          }
          consumeT(24);             // ')'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
        b3 = b3A; e3 = e3A; end = e3A; }}}
        memoize(11, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
    case 396163:                    // Identifier '(' ')'
      consume(3);                   // Identifier
      for (;;)
      {
        lookahead1W(15);            // WhiteSpace^token | '(' | '.'
        if (l1 != 35)               // '.'
        {
          break;
        }
        consume(35);                // '.'
        lookahead1W(0);             // Identifier | WhiteSpace^token
        consume(3);                 // Identifier
      }
      consume(23);                  // '('
      lookahead1W(33);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
      if (l1 != 24)                 // ')'
      {
        whitespace();
        parse_Arguments();
      }
      consume(24);                  // ')'
      break;
    default:
      consume(3);                   // Identifier
      for (;;)
      {
        lookahead1W(45);            // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' |
                                    // '.' | '/' | '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' |
                                    // '>' | '>=' | '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' |
                                    // 'case' | 'catch' | 'continue' | 'default' | 'do' | 'else' | 'export' | 'f32' |
                                    // 'f64' | 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' |
                                    // 'include' | 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' |
                                    // 'while' | '{' | '|' | '|=' | '||' | '}' | '~'
        if (l1 != 35)               // '.'
        {
          break;
        }
        consume(35);                // '.'
        lookahead1W(0);             // Identifier | WhiteSpace^token
        consume(3);                 // Identifier
      }
      for (;;)
      {
        lookahead1W(44);            // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' |
                                    // '/' | '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' |
                                    // '>=' | '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' |
                                    // 'catch' | 'continue' | 'default' | 'do' | 'else' | 'export' | 'f32' | 'f64' |
                                    // 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' |
                                    // 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' |
                                    // '{' | '|' | '|=' | '||' | '}' | '~'
        switch (l1)
        {
        case 53:                    // '['
          lookahead2W(34);          // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | ']' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
          switch (lk)
          {
          case 437:                 // '[' Identifier
            lookahead3W(31);        // WhiteSpace^token | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | '*' | '**' |
                                    // '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' | '/=' | ':=' |
                                    // ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '?' |
                                    // '?=' | '[' | ']' | '^' | '^=' | '{' | '|' | '|=' | '||'
            break;
          case 5173:                // '[' ';'
            lookahead3W(37);        // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' |
                                    // ';' | '[' | ']' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' |
                                    // 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' |
                                    // 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' |
                                    // '{' | '~'
            break;
          case 6837:                // '[' '['
            lookahead3W(34);        // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | ']' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
            break;
          case 6965:                // '[' ']'
            lookahead3W(44);        // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' |
                                    // '/' | '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' |
                                    // '>=' | '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' |
                                    // 'catch' | 'continue' | 'default' | 'do' | 'else' | 'export' | 'f32' | 'f64' |
                                    // 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' |
                                    // 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' |
                                    // '{' | '|' | '|=' | '||' | '}' | '~'
            break;
          case 10677:               // '[' '{'
            lookahead3W(38);        // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '}' |
                                    // '~'
            break;
          case 1589:                // '[' Comment
          case 7349:                // '[' 'break'
          case 7733:                // '[' 'continue'
            lookahead3W(21);        // WhiteSpace^token | ',' | ';' | ']'
            break;
          case 8373:                // '[' 'f32'
          case 8501:                // '[' 'f64'
          case 9013:                // '[' 'i32'
          case 9141:                // '[' 'i64'
            lookahead3W(0);         // Identifier | WhiteSpace^token
            break;
          case 1973:                // '[' '!'
          case 3637:                // '[' '+'
          case 3765:                // '[' '++'
          case 4149:                // '[' '-'
          case 4277:                // '[' '--'
          case 11317:               // '[' '~'
            lookahead3W(22);        // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
            break;
          case 8629:                // '[' 'for'
          case 8757:                // '[' 'foreach'
          case 9269:                // '[' 'if'
          case 9909:                // '[' 'switch'
          case 10037:               // '[' 'test'
          case 10549:               // '[' 'while'
            lookahead3W(3);         // WhiteSpace^token | '('
            break;
          case 565:                 // '[' Null
          case 693:                 // '[' True
          case 821:                 // '[' False
          case 949:                 // '[' Character
          case 1077:                // '[' String
          case 1205:                // '[' Integer
          case 1333:                // '[' Complex
          case 1461:                // '[' Real
            lookahead3W(27);        // WhiteSpace^token | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '*' | '**' | '*=' |
                                    // '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' | ':=' | ';' | '<' |
                                    // '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '?' | '?=' | ']' |
                                    // '^' | '^=' | '|' | '|=' | '||'
            break;
          case 2997:                // '[' '('
          case 7989:                // '[' 'do'
          case 8245:                // '[' 'export'
          case 8885:                // '[' 'global'
          case 9397:                // '[' 'import'
          case 9525:                // '[' 'include'
          case 9653:                // '[' 'local'
          case 9781:                // '[' 'return'
          case 10165:               // '[' 'throw'
          case 10293:               // '[' 'try'
          case 10421:               // '[' 'typeof'
            lookahead3W(29);        // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
            break;
          }
          break;
        default:
          lk = l1;
        }
        if (lk != 1                 // END
         && lk != 3                 // Identifier
         && lk != 4                 // Null
         && lk != 5                 // True
         && lk != 6                 // False
         && lk != 7                 // Character
         && lk != 8                 // String
         && lk != 9                 // Integer
         && lk != 10                // Complex
         && lk != 11                // Real
         && lk != 12                // Comment
         && lk != 15                // '!'
         && lk != 16                // '!='
         && lk != 18                // '%'
         && lk != 19                // '%='
         && lk != 20                // '&'
         && lk != 21                // '&&'
         && lk != 22                // '&='
         && lk != 23                // '('
         && lk != 24                // ')'
         && lk != 25                // '*'
         && lk != 26                // '**'
         && lk != 27                // '*='
         && lk != 28                // '+'
         && lk != 29                // '++'
         && lk != 30                // '+='
         && lk != 31                // ','
         && lk != 32                // '-'
         && lk != 33                // '--'
         && lk != 34                // '-='
         && lk != 36                // '/'
         && lk != 37                // '/='
         && lk != 38                // ':'
         && lk != 39                // ':='
         && lk != 40                // ';'
         && lk != 41                // '<'
         && lk != 42                // '<<'
         && lk != 43                // '<<='
         && lk != 44                // '<='
         && lk != 45                // '='
         && lk != 46                // '=='
         && lk != 47                // '>'
         && lk != 48                // '>='
         && lk != 49                // '>>'
         && lk != 50                // '>>='
         && lk != 51                // '?'
         && lk != 52                // '?='
         && lk != 54                // ']'
         && lk != 55                // '^'
         && lk != 56                // '^='
         && lk != 57                // 'break'
         && lk != 58                // 'case'
         && lk != 59                // 'catch'
         && lk != 60                // 'continue'
         && lk != 61                // 'default'
         && lk != 62                // 'do'
         && lk != 63                // 'else'
         && lk != 64                // 'export'
         && lk != 65                // 'f32'
         && lk != 66                // 'f64'
         && lk != 67                // 'for'
         && lk != 68                // 'foreach'
         && lk != 69                // 'global'
         && lk != 70                // 'i32'
         && lk != 71                // 'i64'
         && lk != 72                // 'if'
         && lk != 73                // 'import'
         && lk != 74                // 'include'
         && lk != 75                // 'local'
         && lk != 76                // 'return'
         && lk != 77                // 'switch'
         && lk != 78                // 'test'
         && lk != 79                // 'throw'
         && lk != 80                // 'try'
         && lk != 81                // 'typeof'
         && lk != 82                // 'while'
         && lk != 83                // '{'
         && lk != 84                // '|'
         && lk != 85                // '|='
         && lk != 86                // '||'
         && lk != 87                // '}'
         && lk != 88                // '~'
         && lk != 54325             // '[' ';' Identifier
         && lk != 70709             // '[' ';' Null
         && lk != 87093             // '[' ';' True
         && lk != 103477            // '[' ';' False
         && lk != 119861            // '[' ';' Character
         && lk != 136245            // '[' ';' String
         && lk != 152629            // '[' ';' Integer
         && lk != 169013            // '[' ';' Complex
         && lk != 185397            // '[' ';' Real
         && lk != 201781            // '[' ';' Comment
         && lk != 250933            // '[' ';' '!'
         && lk != 382005            // '[' ';' '('
         && lk != 400181            // '[' ']' ')'
         && lk != 463925            // '[' ';' '+'
         && lk != 480309            // '[' ';' '++'
         && lk != 514869            // '[' ']' ','
         && lk != 529461            // '[' ';' '-'
         && lk != 545845            // '[' ';' '--'
         && lk != 629557            // '[' ']' ':'
         && lk != 655797            // '[' Identifier ';'
         && lk != 655925            // '[' Null ';'
         && lk != 656053            // '[' True ';'
         && lk != 656181            // '[' False ';'
         && lk != 656309            // '[' Character ';'
         && lk != 656437            // '[' String ';'
         && lk != 656565            // '[' Integer ';'
         && lk != 656693            // '[' Complex ';'
         && lk != 656821            // '[' Real ';'
         && lk != 656949            // '[' Comment ';'
         && lk != 660533            // '[' ';' ';'
         && lk != 662709            // '[' 'break' ';'
         && lk != 663093            // '[' 'continue' ';'
         && lk != 873525            // '[' ';' '['
         && lk != 891701            // '[' ']' ']'
         && lk != 939061            // '[' ';' 'break'
         && lk != 973621            // '[' ']' 'catch'
         && lk != 988213            // '[' ';' 'continue'
         && lk != 1020981           // '[' ';' 'do'
         && lk != 1039157           // '[' ']' 'else'
         && lk != 1053749           // '[' ';' 'export'
         && lk != 1070133           // '[' ';' 'f32'
         && lk != 1086517           // '[' ';' 'f64'
         && lk != 1102901           // '[' ';' 'for'
         && lk != 1119285           // '[' ';' 'foreach'
         && lk != 1135669           // '[' ';' 'global'
         && lk != 1152053           // '[' ';' 'i32'
         && lk != 1168437           // '[' ';' 'i64'
         && lk != 1184821           // '[' ';' 'if'
         && lk != 1201205           // '[' ';' 'import'
         && lk != 1217589           // '[' ';' 'include'
         && lk != 1233973           // '[' ';' 'local'
         && lk != 1250357           // '[' ';' 'return'
         && lk != 1266741           // '[' ';' 'switch'
         && lk != 1283125           // '[' ';' 'test'
         && lk != 1299509           // '[' ';' 'throw'
         && lk != 1315893           // '[' ';' 'try'
         && lk != 1332277           // '[' ';' 'typeof'
         && lk != 1348661           // '[' ';' 'while'
         && lk != 1365045           // '[' ';' '{'
         && lk != 1446965)          // '[' ';' '~'
        {
          lk = memoized(12, e0);
          if (lk == 0)
          {
            var b0B = b0; var e0B = e0; var l1B = l1;
            var b1B = b1; var e1B = e1; var l2B = l2;
            var b2B = b2; var e2B = e2; var l3B = l3;
            var b3B = b3; var e3B = e3;
            try
            {
              consumeT(53);         // '['
              lookahead1W(34);      // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | ']' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
              if (l1 != 54)         // ']'
              {
                try_Arguments();
              }
              consumeT(54);         // ']'
              lk = -1;
            }
            catch (p1B)
            {
              lk = -2;
            }
            b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
            b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
            b2 = b2B; e2 = e2B; l3 = l3B; if (l3 == 0) {end = e2B;} else {
            b3 = b3B; e3 = e3B; end = e3B; }}}
            memoize(12, e0, lk);
          }
        }
        if (lk != -1
         && lk != 400181            // '[' ']' ')'
         && lk != 514869            // '[' ']' ','
         && lk != 629557            // '[' ']' ':'
         && lk != 891701            // '[' ']' ']'
         && lk != 973621            // '[' ']' 'catch'
         && lk != 1039157)          // '[' ']' 'else'
        {
          break;
        }
        consume(53);                // '['
        lookahead1W(34);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | ']' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        if (l1 != 54)               // ']'
        {
          whitespace();
          parse_Arguments();
        }
        consume(54);                // ']'
      }
    }
    eventHandler.endNonterminal("Member", e0);
  }

  function try_Member()
  {
    switch (l1)
    {
    case 3:                         // Identifier
      lookahead2W(45);              // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' |
                                    // '.' | '/' | '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' |
                                    // '>' | '>=' | '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' |
                                    // 'case' | 'catch' | 'continue' | 'default' | 'do' | 'else' | 'export' | 'f32' |
                                    // 'f64' | 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' |
                                    // 'include' | 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' |
                                    // 'while' | '{' | '|' | '|=' | '||' | '}' | '~'
      switch (lk)
      {
      case 2947:                    // Identifier '('
        lookahead3W(33);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        break;
      case 4483:                    // Identifier '.'
        lookahead3W(0);             // Identifier | WhiteSpace^token
        break;
      }
      break;
    default:
      lk = l1;
    }
    if (lk == 52099                 // Identifier '(' Identifier
     || lk == 53635                 // Identifier '.' Identifier
     || lk == 68483                 // Identifier '(' Null
     || lk == 84867                 // Identifier '(' True
     || lk == 101251                // Identifier '(' False
     || lk == 117635                // Identifier '(' Character
     || lk == 134019                // Identifier '(' String
     || lk == 150403                // Identifier '(' Integer
     || lk == 166787                // Identifier '(' Complex
     || lk == 183171                // Identifier '(' Real
     || lk == 199555                // Identifier '(' Comment
     || lk == 248707                // Identifier '(' '!'
     || lk == 379779                // Identifier '(' '('
     || lk == 461699                // Identifier '(' '+'
     || lk == 478083                // Identifier '(' '++'
     || lk == 527235                // Identifier '(' '-'
     || lk == 543619                // Identifier '(' '--'
     || lk == 658307                // Identifier '(' ';'
     || lk == 871299                // Identifier '(' '['
     || lk == 936835                // Identifier '(' 'break'
     || lk == 985987                // Identifier '(' 'continue'
     || lk == 1018755               // Identifier '(' 'do'
     || lk == 1051523               // Identifier '(' 'export'
     || lk == 1067907               // Identifier '(' 'f32'
     || lk == 1084291               // Identifier '(' 'f64'
     || lk == 1100675               // Identifier '(' 'for'
     || lk == 1117059               // Identifier '(' 'foreach'
     || lk == 1133443               // Identifier '(' 'global'
     || lk == 1149827               // Identifier '(' 'i32'
     || lk == 1166211               // Identifier '(' 'i64'
     || lk == 1182595               // Identifier '(' 'if'
     || lk == 1198979               // Identifier '(' 'import'
     || lk == 1215363               // Identifier '(' 'include'
     || lk == 1231747               // Identifier '(' 'local'
     || lk == 1248131               // Identifier '(' 'return'
     || lk == 1264515               // Identifier '(' 'switch'
     || lk == 1280899               // Identifier '(' 'test'
     || lk == 1297283               // Identifier '(' 'throw'
     || lk == 1313667               // Identifier '(' 'try'
     || lk == 1330051               // Identifier '(' 'typeof'
     || lk == 1346435               // Identifier '(' 'while'
     || lk == 1362819               // Identifier '(' '{'
     || lk == 1444739)              // Identifier '(' '~'
    {
      lk = memoized(11, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2; var l3A = l3;
        var b3A = b3; var e3A = e3;
        try
        {
          consumeT(3);              // Identifier
          for (;;)
          {
            lookahead1W(15);        // WhiteSpace^token | '(' | '.'
            if (l1 != 35)           // '.'
            {
              break;
            }
            consumeT(35);           // '.'
            lookahead1W(0);         // Identifier | WhiteSpace^token
            consumeT(3);            // Identifier
          }
          consumeT(23);             // '('
          lookahead1W(33);          // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
          if (l1 != 24)             // ')'
          {
            try_Arguments();
          }
          consumeT(24);             // ')'
          memoize(11, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
          b3 = b3A; e3 = e3A; end = e3A; }}}
          memoize(11, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
    case 396163:                    // Identifier '(' ')'
      consumeT(3);                  // Identifier
      for (;;)
      {
        lookahead1W(15);            // WhiteSpace^token | '(' | '.'
        if (l1 != 35)               // '.'
        {
          break;
        }
        consumeT(35);               // '.'
        lookahead1W(0);             // Identifier | WhiteSpace^token
        consumeT(3);                // Identifier
      }
      consumeT(23);                 // '('
      lookahead1W(33);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
      if (l1 != 24)                 // ')'
      {
        try_Arguments();
      }
      consumeT(24);                 // ')'
      break;
    case -3:
      break;
    default:
      consumeT(3);                  // Identifier
      for (;;)
      {
        lookahead1W(45);            // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' |
                                    // '.' | '/' | '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' |
                                    // '>' | '>=' | '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' |
                                    // 'case' | 'catch' | 'continue' | 'default' | 'do' | 'else' | 'export' | 'f32' |
                                    // 'f64' | 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' |
                                    // 'include' | 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' |
                                    // 'while' | '{' | '|' | '|=' | '||' | '}' | '~'
        if (l1 != 35)               // '.'
        {
          break;
        }
        consumeT(35);               // '.'
        lookahead1W(0);             // Identifier | WhiteSpace^token
        consumeT(3);                // Identifier
      }
      for (;;)
      {
        lookahead1W(44);            // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' |
                                    // '/' | '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' |
                                    // '>=' | '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' |
                                    // 'catch' | 'continue' | 'default' | 'do' | 'else' | 'export' | 'f32' | 'f64' |
                                    // 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' |
                                    // 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' |
                                    // '{' | '|' | '|=' | '||' | '}' | '~'
        switch (l1)
        {
        case 53:                    // '['
          lookahead2W(34);          // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | ']' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
          switch (lk)
          {
          case 437:                 // '[' Identifier
            lookahead3W(31);        // WhiteSpace^token | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | '*' | '**' |
                                    // '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' | '/=' | ':=' |
                                    // ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '?' |
                                    // '?=' | '[' | ']' | '^' | '^=' | '{' | '|' | '|=' | '||'
            break;
          case 5173:                // '[' ';'
            lookahead3W(37);        // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' |
                                    // ';' | '[' | ']' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' |
                                    // 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' |
                                    // 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' |
                                    // '{' | '~'
            break;
          case 6837:                // '[' '['
            lookahead3W(34);        // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | ']' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
            break;
          case 6965:                // '[' ']'
            lookahead3W(44);        // END | Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' |
                                    // '(' | ')' | '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' |
                                    // '/' | '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' |
                                    // '>=' | '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' |
                                    // 'catch' | 'continue' | 'default' | 'do' | 'else' | 'export' | 'f32' | 'f64' |
                                    // 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' |
                                    // 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' |
                                    // '{' | '|' | '|=' | '||' | '}' | '~'
            break;
          case 10677:               // '[' '{'
            lookahead3W(38);        // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '}' |
                                    // '~'
            break;
          case 1589:                // '[' Comment
          case 7349:                // '[' 'break'
          case 7733:                // '[' 'continue'
            lookahead3W(21);        // WhiteSpace^token | ',' | ';' | ']'
            break;
          case 8373:                // '[' 'f32'
          case 8501:                // '[' 'f64'
          case 9013:                // '[' 'i32'
          case 9141:                // '[' 'i64'
            lookahead3W(0);         // Identifier | WhiteSpace^token
            break;
          case 1973:                // '[' '!'
          case 3637:                // '[' '+'
          case 3765:                // '[' '++'
          case 4149:                // '[' '-'
          case 4277:                // '[' '--'
          case 11317:               // '[' '~'
            lookahead3W(22);        // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | WhiteSpace^token | '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
            break;
          case 8629:                // '[' 'for'
          case 8757:                // '[' 'foreach'
          case 9269:                // '[' 'if'
          case 9909:                // '[' 'switch'
          case 10037:               // '[' 'test'
          case 10549:               // '[' 'while'
            lookahead3W(3);         // WhiteSpace^token | '('
            break;
          case 565:                 // '[' Null
          case 693:                 // '[' True
          case 821:                 // '[' False
          case 949:                 // '[' Character
          case 1077:                // '[' String
          case 1205:                // '[' Integer
          case 1333:                // '[' Complex
          case 1461:                // '[' Real
            lookahead3W(27);        // WhiteSpace^token | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '*' | '**' | '*=' |
                                    // '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' | ':=' | ';' | '<' |
                                    // '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '?' | '?=' | ']' |
                                    // '^' | '^=' | '|' | '|=' | '||'
            break;
          case 2997:                // '[' '('
          case 7989:                // '[' 'do'
          case 8245:                // '[' 'export'
          case 8885:                // '[' 'global'
          case 9397:                // '[' 'import'
          case 9525:                // '[' 'include'
          case 9653:                // '[' 'local'
          case 9781:                // '[' 'return'
          case 10165:               // '[' 'throw'
          case 10293:               // '[' 'try'
          case 10421:               // '[' 'typeof'
            lookahead3W(29);        // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
            break;
          }
          break;
        default:
          lk = l1;
        }
        if (lk != 1                 // END
         && lk != 3                 // Identifier
         && lk != 4                 // Null
         && lk != 5                 // True
         && lk != 6                 // False
         && lk != 7                 // Character
         && lk != 8                 // String
         && lk != 9                 // Integer
         && lk != 10                // Complex
         && lk != 11                // Real
         && lk != 12                // Comment
         && lk != 15                // '!'
         && lk != 16                // '!='
         && lk != 18                // '%'
         && lk != 19                // '%='
         && lk != 20                // '&'
         && lk != 21                // '&&'
         && lk != 22                // '&='
         && lk != 23                // '('
         && lk != 24                // ')'
         && lk != 25                // '*'
         && lk != 26                // '**'
         && lk != 27                // '*='
         && lk != 28                // '+'
         && lk != 29                // '++'
         && lk != 30                // '+='
         && lk != 31                // ','
         && lk != 32                // '-'
         && lk != 33                // '--'
         && lk != 34                // '-='
         && lk != 36                // '/'
         && lk != 37                // '/='
         && lk != 38                // ':'
         && lk != 39                // ':='
         && lk != 40                // ';'
         && lk != 41                // '<'
         && lk != 42                // '<<'
         && lk != 43                // '<<='
         && lk != 44                // '<='
         && lk != 45                // '='
         && lk != 46                // '=='
         && lk != 47                // '>'
         && lk != 48                // '>='
         && lk != 49                // '>>'
         && lk != 50                // '>>='
         && lk != 51                // '?'
         && lk != 52                // '?='
         && lk != 54                // ']'
         && lk != 55                // '^'
         && lk != 56                // '^='
         && lk != 57                // 'break'
         && lk != 58                // 'case'
         && lk != 59                // 'catch'
         && lk != 60                // 'continue'
         && lk != 61                // 'default'
         && lk != 62                // 'do'
         && lk != 63                // 'else'
         && lk != 64                // 'export'
         && lk != 65                // 'f32'
         && lk != 66                // 'f64'
         && lk != 67                // 'for'
         && lk != 68                // 'foreach'
         && lk != 69                // 'global'
         && lk != 70                // 'i32'
         && lk != 71                // 'i64'
         && lk != 72                // 'if'
         && lk != 73                // 'import'
         && lk != 74                // 'include'
         && lk != 75                // 'local'
         && lk != 76                // 'return'
         && lk != 77                // 'switch'
         && lk != 78                // 'test'
         && lk != 79                // 'throw'
         && lk != 80                // 'try'
         && lk != 81                // 'typeof'
         && lk != 82                // 'while'
         && lk != 83                // '{'
         && lk != 84                // '|'
         && lk != 85                // '|='
         && lk != 86                // '||'
         && lk != 87                // '}'
         && lk != 88                // '~'
         && lk != 54325             // '[' ';' Identifier
         && lk != 70709             // '[' ';' Null
         && lk != 87093             // '[' ';' True
         && lk != 103477            // '[' ';' False
         && lk != 119861            // '[' ';' Character
         && lk != 136245            // '[' ';' String
         && lk != 152629            // '[' ';' Integer
         && lk != 169013            // '[' ';' Complex
         && lk != 185397            // '[' ';' Real
         && lk != 201781            // '[' ';' Comment
         && lk != 250933            // '[' ';' '!'
         && lk != 382005            // '[' ';' '('
         && lk != 400181            // '[' ']' ')'
         && lk != 463925            // '[' ';' '+'
         && lk != 480309            // '[' ';' '++'
         && lk != 514869            // '[' ']' ','
         && lk != 529461            // '[' ';' '-'
         && lk != 545845            // '[' ';' '--'
         && lk != 629557            // '[' ']' ':'
         && lk != 655797            // '[' Identifier ';'
         && lk != 655925            // '[' Null ';'
         && lk != 656053            // '[' True ';'
         && lk != 656181            // '[' False ';'
         && lk != 656309            // '[' Character ';'
         && lk != 656437            // '[' String ';'
         && lk != 656565            // '[' Integer ';'
         && lk != 656693            // '[' Complex ';'
         && lk != 656821            // '[' Real ';'
         && lk != 656949            // '[' Comment ';'
         && lk != 660533            // '[' ';' ';'
         && lk != 662709            // '[' 'break' ';'
         && lk != 663093            // '[' 'continue' ';'
         && lk != 873525            // '[' ';' '['
         && lk != 891701            // '[' ']' ']'
         && lk != 939061            // '[' ';' 'break'
         && lk != 973621            // '[' ']' 'catch'
         && lk != 988213            // '[' ';' 'continue'
         && lk != 1020981           // '[' ';' 'do'
         && lk != 1039157           // '[' ']' 'else'
         && lk != 1053749           // '[' ';' 'export'
         && lk != 1070133           // '[' ';' 'f32'
         && lk != 1086517           // '[' ';' 'f64'
         && lk != 1102901           // '[' ';' 'for'
         && lk != 1119285           // '[' ';' 'foreach'
         && lk != 1135669           // '[' ';' 'global'
         && lk != 1152053           // '[' ';' 'i32'
         && lk != 1168437           // '[' ';' 'i64'
         && lk != 1184821           // '[' ';' 'if'
         && lk != 1201205           // '[' ';' 'import'
         && lk != 1217589           // '[' ';' 'include'
         && lk != 1233973           // '[' ';' 'local'
         && lk != 1250357           // '[' ';' 'return'
         && lk != 1266741           // '[' ';' 'switch'
         && lk != 1283125           // '[' ';' 'test'
         && lk != 1299509           // '[' ';' 'throw'
         && lk != 1315893           // '[' ';' 'try'
         && lk != 1332277           // '[' ';' 'typeof'
         && lk != 1348661           // '[' ';' 'while'
         && lk != 1365045           // '[' ';' '{'
         && lk != 1446965)          // '[' ';' '~'
        {
          lk = memoized(12, e0);
          if (lk == 0)
          {
            var b0B = b0; var e0B = e0; var l1B = l1;
            var b1B = b1; var e1B = e1; var l2B = l2;
            var b2B = b2; var e2B = e2; var l3B = l3;
            var b3B = b3; var e3B = e3;
            try
            {
              consumeT(53);         // '['
              lookahead1W(34);      // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | ']' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
              if (l1 != 54)         // ']'
              {
                try_Arguments();
              }
              consumeT(54);         // ']'
              memoize(12, e0B, -1);
              continue;
            }
            catch (p1B)
            {
              b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
              b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
              b2 = b2B; e2 = e2B; l3 = l3B; if (l3 == 0) {end = e2B;} else {
              b3 = b3B; e3 = e3B; end = e3B; }}}
              memoize(12, e0B, -2);
              break;
            }
          }
        }
        if (lk != -1
         && lk != 400181            // '[' ']' ')'
         && lk != 514869            // '[' ']' ','
         && lk != 629557            // '[' ']' ':'
         && lk != 891701            // '[' ']' ']'
         && lk != 973621            // '[' ']' 'catch'
         && lk != 1039157)          // '[' ']' 'else'
        {
          break;
        }
        consumeT(53);               // '['
        lookahead1W(34);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | ']' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
        if (l1 != 54)               // ']'
        {
          try_Arguments();
        }
        consumeT(54);               // ']'
      }
    }
  }

  function parse_Array()
  {
    eventHandler.startNonterminal("Array", e0);
    consume(83);                    // '{'
    lookahead1W(38);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '}' |
                                    // '~'
    if (l1 != 31                    // ','
     && l1 != 87)                   // '}'
    {
      whitespace();
      parse_Element();
    }
    for (;;)
    {
      lookahead1W(17);              // WhiteSpace^token | ',' | '}'
      if (l1 != 31)                 // ','
      {
        break;
      }
      consume(31);                  // ','
      lookahead1W(29);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
      whitespace();
      parse_Element();
    }
    consume(87);                    // '}'
    eventHandler.endNonterminal("Array", e0);
  }

  function try_Array()
  {
    consumeT(83);                   // '{'
    lookahead1W(38);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' |
                                    // ';' | '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '}' |
                                    // '~'
    if (l1 != 31                    // ','
     && l1 != 87)                   // '}'
    {
      try_Element();
    }
    for (;;)
    {
      lookahead1W(17);              // WhiteSpace^token | ',' | '}'
      if (l1 != 31)                 // ','
      {
        break;
      }
      consumeT(31);                 // ','
      lookahead1W(29);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
      try_Element();
    }
    consumeT(87);                   // '}'
  }

  function parse_Matrix()
  {
    eventHandler.startNonterminal("Matrix", e0);
    consume(53);                    // '['
    lookahead1W(34);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | ']' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    switch (l1)
    {
    case 40:                        // ';'
      lookahead2W(37);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' |
                                    // ';' | '[' | ']' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' |
                                    // 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' |
                                    // 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' |
                                    // '{' | '~'
      switch (lk)
      {
      case 5160:                    // ';' ';'
        lookahead3W(37);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' |
                                    // ';' | '[' | ']' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' |
                                    // 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' |
                                    // 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' |
                                    // '{' | '~'
        break;
      }
      break;
    default:
      lk = l1;
    }
    if (lk == 660520)               // ';' ';' ';'
    {
      lk = memoized(13, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2; var l3A = l3;
        var b3A = b3; var e3A = e3;
        try
        {
          try_Row();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
        b3 = b3A; e3 = e3A; end = e3A; }}}
        memoize(13, e0, lk);
      }
    }
    if (lk != -2
     && lk != 54                    // ']'
     && lk != 424                   // ';' Identifier
     && lk != 552                   // ';' Null
     && lk != 680                   // ';' True
     && lk != 808                   // ';' False
     && lk != 936                   // ';' Character
     && lk != 1064                  // ';' String
     && lk != 1192                  // ';' Integer
     && lk != 1320                  // ';' Complex
     && lk != 1448                  // ';' Real
     && lk != 1576                  // ';' Comment
     && lk != 1960                  // ';' '!'
     && lk != 2984                  // ';' '('
     && lk != 3624                  // ';' '+'
     && lk != 3752                  // ';' '++'
     && lk != 4136                  // ';' '-'
     && lk != 4264                  // ';' '--'
     && lk != 6824                  // ';' '['
     && lk != 7336                  // ';' 'break'
     && lk != 7720                  // ';' 'continue'
     && lk != 7976                  // ';' 'do'
     && lk != 8232                  // ';' 'export'
     && lk != 8360                  // ';' 'f32'
     && lk != 8488                  // ';' 'f64'
     && lk != 8616                  // ';' 'for'
     && lk != 8744                  // ';' 'foreach'
     && lk != 8872                  // ';' 'global'
     && lk != 9000                  // ';' 'i32'
     && lk != 9128                  // ';' 'i64'
     && lk != 9256                  // ';' 'if'
     && lk != 9384                  // ';' 'import'
     && lk != 9512                  // ';' 'include'
     && lk != 9640                  // ';' 'local'
     && lk != 9768                  // ';' 'return'
     && lk != 9896                  // ';' 'switch'
     && lk != 10024                 // ';' 'test'
     && lk != 10152                 // ';' 'throw'
     && lk != 10280                 // ';' 'try'
     && lk != 10408                 // ';' 'typeof'
     && lk != 10536                 // ';' 'while'
     && lk != 10664                 // ';' '{'
     && lk != 11304                 // ';' '~'
     && lk != 513064                // ';' ';' ','
     && lk != 889896)               // ';' ';' ']'
    {
      whitespace();
      parse_Row();
    }
    for (;;)
    {
      if (l1 != 40)                 // ';'
      {
        break;
      }
      consume(40);                  // ';'
      lookahead1W(29);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
      whitespace();
      parse_Row();
    }
    consume(54);                    // ']'
    eventHandler.endNonterminal("Matrix", e0);
  }

  function try_Matrix()
  {
    consumeT(53);                   // '['
    lookahead1W(34);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | ']' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    switch (l1)
    {
    case 40:                        // ';'
      lookahead2W(37);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' |
                                    // ';' | '[' | ']' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' |
                                    // 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' |
                                    // 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' |
                                    // '{' | '~'
      switch (lk)
      {
      case 5160:                    // ';' ';'
        lookahead3W(37);            // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' |
                                    // ';' | '[' | ']' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' |
                                    // 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' |
                                    // 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' |
                                    // '{' | '~'
        break;
      }
      break;
    default:
      lk = l1;
    }
    if (lk == 660520)               // ';' ';' ';'
    {
      lk = memoized(13, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2; var l3A = l3;
        var b3A = b3; var e3A = e3;
        try
        {
          try_Row();
          memoize(13, e0A, -1);
        }
        catch (p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
          b3 = b3A; e3 = e3A; end = e3A; }}}
          memoize(13, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk != -2
     && lk != 54                    // ']'
     && lk != 424                   // ';' Identifier
     && lk != 552                   // ';' Null
     && lk != 680                   // ';' True
     && lk != 808                   // ';' False
     && lk != 936                   // ';' Character
     && lk != 1064                  // ';' String
     && lk != 1192                  // ';' Integer
     && lk != 1320                  // ';' Complex
     && lk != 1448                  // ';' Real
     && lk != 1576                  // ';' Comment
     && lk != 1960                  // ';' '!'
     && lk != 2984                  // ';' '('
     && lk != 3624                  // ';' '+'
     && lk != 3752                  // ';' '++'
     && lk != 4136                  // ';' '-'
     && lk != 4264                  // ';' '--'
     && lk != 6824                  // ';' '['
     && lk != 7336                  // ';' 'break'
     && lk != 7720                  // ';' 'continue'
     && lk != 7976                  // ';' 'do'
     && lk != 8232                  // ';' 'export'
     && lk != 8360                  // ';' 'f32'
     && lk != 8488                  // ';' 'f64'
     && lk != 8616                  // ';' 'for'
     && lk != 8744                  // ';' 'foreach'
     && lk != 8872                  // ';' 'global'
     && lk != 9000                  // ';' 'i32'
     && lk != 9128                  // ';' 'i64'
     && lk != 9256                  // ';' 'if'
     && lk != 9384                  // ';' 'import'
     && lk != 9512                  // ';' 'include'
     && lk != 9640                  // ';' 'local'
     && lk != 9768                  // ';' 'return'
     && lk != 9896                  // ';' 'switch'
     && lk != 10024                 // ';' 'test'
     && lk != 10152                 // ';' 'throw'
     && lk != 10280                 // ';' 'try'
     && lk != 10408                 // ';' 'typeof'
     && lk != 10536                 // ';' 'while'
     && lk != 10664                 // ';' '{'
     && lk != 11304                 // ';' '~'
     && lk != 513064                // ';' ';' ','
     && lk != 889896)               // ';' ';' ']'
    {
      try_Row();
    }
    for (;;)
    {
      if (l1 != 40)                 // ';'
      {
        break;
      }
      consumeT(40);                 // ';'
      lookahead1W(29);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
      try_Row();
    }
    consumeT(54);                   // ']'
  }

  function parse_Element()
  {
    eventHandler.startNonterminal("Element", e0);
    switch (l1)
    {
    case 3:                         // Identifier
      lookahead2W(30);              // WhiteSpace^token | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | '*' | '**' |
                                    // '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' | '/=' | ':' |
                                    // ':=' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '?' |
                                    // '?=' | '[' | '^' | '^=' | '{' | '|' | '|=' | '||' | '}'
      break;
    case 8:                         // String
      lookahead2W(26);              // WhiteSpace^token | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '*' | '**' | '*=' |
                                    // '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' | ':' | ':=' | '<' |
                                    // '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '?' | '?=' | '^' |
                                    // '^=' | '|' | '|=' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 4867                  // Identifier ':'
     || lk == 4872)                 // String ':'
    {
      whitespace();
      parse_Key();
      lookahead1W(7);               // WhiteSpace^token | ':'
      consume(38);                  // ':'
    }
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    eventHandler.endNonterminal("Element", e0);
  }

  function try_Element()
  {
    switch (l1)
    {
    case 3:                         // Identifier
      lookahead2W(30);              // WhiteSpace^token | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | '*' | '**' |
                                    // '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' | '/=' | ':' |
                                    // ':=' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '?' |
                                    // '?=' | '[' | '^' | '^=' | '{' | '|' | '|=' | '||' | '}'
      break;
    case 8:                         // String
      lookahead2W(26);              // WhiteSpace^token | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '*' | '**' | '*=' |
                                    // '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' | ':' | ':=' | '<' |
                                    // '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '?' | '?=' | '^' |
                                    // '^=' | '|' | '|=' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 4867                  // Identifier ':'
     || lk == 4872)                 // String ':'
    {
      try_Key();
      lookahead1W(7);               // WhiteSpace^token | ':'
      consumeT(38);                 // ':'
    }
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    try_Expression();
  }

  function parse_Key()
  {
    eventHandler.startNonterminal("Key", e0);
    switch (l1)
    {
    case 3:                         // Identifier
      consume(3);                   // Identifier
      break;
    default:
      consume(8);                   // String
    }
    eventHandler.endNonterminal("Key", e0);
  }

  function try_Key()
  {
    switch (l1)
    {
    case 3:                         // Identifier
      consumeT(3);                  // Identifier
      break;
    default:
      consumeT(8);                  // String
    }
  }

  function parse_Row()
  {
    eventHandler.startNonterminal("Row", e0);
    parse_Column();
    for (;;)
    {
      lookahead1W(21);              // WhiteSpace^token | ',' | ';' | ']'
      if (l1 != 31)                 // ','
      {
        break;
      }
      consume(31);                  // ','
      lookahead1W(29);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
      whitespace();
      parse_Column();
    }
    eventHandler.endNonterminal("Row", e0);
  }

  function try_Row()
  {
    try_Column();
    for (;;)
    {
      lookahead1W(21);              // WhiteSpace^token | ',' | ';' | ']'
      if (l1 != 31)                 // ','
      {
        break;
      }
      consumeT(31);                 // ','
      lookahead1W(29);              // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
      try_Column();
    }
  }

  function parse_Column()
  {
    eventHandler.startNonterminal("Column", e0);
    parse_Expression();
    eventHandler.endNonterminal("Column", e0);
  }

  function try_Column()
  {
    try_Expression();
  }

  function parse_ParenthesizedExpression()
  {
    eventHandler.startNonterminal("ParenthesizedExpression", e0);
    consume(23);                    // '('
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    lookahead1W(4);                 // WhiteSpace^token | ')'
    consume(24);                    // ')'
    eventHandler.endNonterminal("ParenthesizedExpression", e0);
  }

  function try_ParenthesizedExpression()
  {
    consumeT(23);                   // '('
    lookahead1W(29);                // Identifier | Null | True | False | Character | String | Integer | Complex |
                                    // Real | Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' |
                                    // '[' | 'break' | 'continue' | 'do' | 'export' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'typeof' | 'while' | '{' | '~'
    try_Expression();
    lookahead1W(4);                 // WhiteSpace^token | ')'
    consumeT(24);                   // ')'
  }

  function parse_Value()
  {
    eventHandler.startNonterminal("Value", e0);
    switch (l1)
    {
    case 9:                         // Integer
      consume(9);                   // Integer
      break;
    case 11:                        // Real
      consume(11);                  // Real
      break;
    case 10:                        // Complex
      consume(10);                  // Complex
      break;
    case 7:                         // Character
      consume(7);                   // Character
      break;
    case 8:                         // String
      consume(8);                   // String
      break;
    case 83:                        // '{'
      parse_Array();
      break;
    case 53:                        // '['
      parse_Matrix();
      break;
    case 4:                         // Null
      consume(4);                   // Null
      break;
    case 5:                         // True
      consume(5);                   // True
      break;
    default:
      consume(6);                   // False
    }
    eventHandler.endNonterminal("Value", e0);
  }

  function try_Value()
  {
    switch (l1)
    {
    case 9:                         // Integer
      consumeT(9);                  // Integer
      break;
    case 11:                        // Real
      consumeT(11);                 // Real
      break;
    case 10:                        // Complex
      consumeT(10);                 // Complex
      break;
    case 7:                         // Character
      consumeT(7);                  // Character
      break;
    case 8:                         // String
      consumeT(8);                  // String
      break;
    case 83:                        // '{'
      try_Array();
      break;
    case 53:                        // '['
      try_Matrix();
      break;
    case 4:                         // Null
      consumeT(4);                  // Null
      break;
    case 5:                         // True
      consumeT(5);                  // True
      break;
    default:
      consumeT(6);                  // False
    }
  }

  function consume(t)
  {
    if (l1 == t)
    {
      whitespace();
      eventHandler.terminal(MaiaScript.TOKEN[l1], b1, e1);
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = l3; if (l2 != 0) {
      b2 = b3; e2 = e3; l3 = 0; }}
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function consumeT(t)
  {
    if (l1 == t)
    {
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = l3; if (l2 != 0) {
      b2 = b3; e2 = e3; l3 = 0; }}
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function whitespace()
  {
    if (e0 != b1)
    {
      eventHandler.whitespace(e0, b1);
      e0 = b1;
    }
  }

  function matchW(tokenSetId)
  {
    var code;
    for (;;)
    {
      code = match(tokenSetId);
      if (code != 14)               // WhiteSpace^token
      {
        break;
      }
    }
    return code;
  }

  function lookahead1W(tokenSetId)
  {
    if (l1 == 0)
    {
      l1 = matchW(tokenSetId);
      b1 = begin;
      e1 = end;
    }
  }

  function lookahead2W(tokenSetId)
  {
    if (l2 == 0)
    {
      l2 = matchW(tokenSetId);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 7) | l1;
  }

  function lookahead3W(tokenSetId)
  {
    if (l3 == 0)
    {
      l3 = matchW(tokenSetId);
      b3 = begin;
      e3 = end;
    }
    lk |= l3 << 14;
  }

  function error(b, e, s, l, t)
  {
    if (e >= ex)
    {
      bx = b;
      ex = e;
      sx = s;
      lx = l;
      tx = t;
    }
    throw new thisParser.ParseException(bx, ex, sx, lx, tx);
  }

  var lk, b0, e0;
  var l1, b1, e1;
  var l2, b2, e2;
  var l3, b3, e3;
  var bx, ex, sx, lx, tx;
  var eventHandler;
  var memo;

  function memoize(i, e, v)
  {
    memo[(e << 4) + i] = v;
  }

  function memoized(i, e)
  {
    var v = memo[(e << 4) + i];
    return typeof v != "undefined" ? v : 0;
  }

  var input;
  var size;

  var begin;
  var end;

  function match(tokenSetId)
  {
    begin = end;
    var current = end;
    var result = MaiaScript.INITIAL[tokenSetId];
    var state = 0;

    for (var code = result & 511; code != 0; )
    {
      var charclass;
      var c0 = current < size ? input.charCodeAt(current) : 0;
      ++current;
      if (c0 < 0x80)
      {
        charclass = MaiaScript.MAP0[c0];
      }
      else if (c0 < 0xd800)
      {
        var c1 = c0 >> 5;
        charclass = MaiaScript.MAP1[(c0 & 31) + MaiaScript.MAP1[(c1 & 31) + MaiaScript.MAP1[c1 >> 5]]];
      }
      else
      {
        if (c0 < 0xdc00)
        {
          var c1 = current < size ? input.charCodeAt(current) : 0;
          if (c1 >= 0xdc00 && c1 < 0xe000)
          {
            ++current;
            c0 = ((c0 & 0x3ff) << 10) + (c1 & 0x3ff) + 0x10000;
          }
        }

        var lo = 0, hi = 1;
        for (var m = 1; ; m = (hi + lo) >> 1)
        {
          if (MaiaScript.MAP2[m] > c0) hi = m - 1;
          else if (MaiaScript.MAP2[2 + m] < c0) lo = m + 1;
          else {charclass = MaiaScript.MAP2[4 + m]; break;}
          if (lo > hi) {charclass = 0; break;}
        }
      }

      state = code;
      var i0 = (charclass << 9) + code - 1;
      code = MaiaScript.TRANSITION[(i0 & 15) + MaiaScript.TRANSITION[i0 >> 4]];

      if (code > 511)
      {
        result = code;
        code &= 511;
        end = current;
      }
    }

    result >>= 9;
    if (result == 0)
    {
      end = current - 1;
      var c1 = end < size ? input.charCodeAt(end) : 0;
      if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      return error(begin, end, state, -1, -1);
    }

    if (end > size) end = size;
    return (result & 127) - 1;
  }

}

MaiaScript.XmlSerializer = function(log, indent)
{
  var input = null;
  var delayedTag = null;
  var hasChildElement = false;
  var depth = 0;

  this.reset = function(string)
  {
    log("<?xml version=\"1.0\" encoding=\"UTF-8\"?" + ">");
    input = string;
    delayedTag = null;
    hasChildElement = false;
    depth = 0;
  };

  this.startNonterminal = function(tag, begin)
  {
    if (delayedTag != null)
    {
      log("<");
      log(delayedTag);
      log(">");
    }
    delayedTag = tag;
    if (indent)
    {
      log("\n");
      for (var i = 0; i < depth; ++i)
      {
        log("  ");
      }
    }
    hasChildElement = false;
    ++depth;
  };

  this.endNonterminal = function(tag, end)
  {
    --depth;
    if (delayedTag != null)
    {
      delayedTag = null;
      log("<");
      log(tag);
      log("/>");
    }
    else
    {
      if (indent)
      {
        if (hasChildElement)
        {
          log("\n");
          for (var i = 0; i < depth; ++i)
          {
            log("  ");
          }
        }
      }
      log("</");
      log(tag);
      log(">");
    }
    hasChildElement = true;
  };

  this.terminal = function(tag, begin, end)
  {
    if (tag.charAt(0) == '\'') tag = "TOKEN";
    this.startNonterminal(tag, begin);
    characters(begin, end);
    this.endNonterminal(tag, end);
  };

  this.whitespace = function(begin, end)
  {
    characters(begin, end);
  };

  function characters(begin, end)
  {
    if (begin < end)
    {
      if (delayedTag != null)
      {
        log("<");
        log(delayedTag);
        log(">");
        delayedTag = null;
      }
      log(input.substring(begin, end)
               .replace(/&/g, "&amp;")
               .replace(/</g, "&lt;")
               .replace(/>/g, "&gt;"));
    }
  }
};

MaiaScript.getTokenSet = function(tokenSetId)
{
  var set = [];
  var s = tokenSetId < 0 ? - tokenSetId : MaiaScript.INITIAL[tokenSetId] & 511;
  for (var i = 0; i < 89; i += 32)
  {
    var j = i;
    var i0 = (i >> 5) * 308 + s - 1;
    var f = MaiaScript.EXPECTED[(i0 & 3) + MaiaScript.EXPECTED[i0 >> 2]];
    for ( ; f != 0; f >>>= 1, ++j)
    {
      if ((f & 1) != 0)
      {
        set.push(MaiaScript.TOKEN[j]);
      }
    }
  }
  return set;
};

MaiaScript.TopDownTreeBuilder = function()
{
  var input = null;
  var stack = null;

  this.reset = function(i)
  {
    input = i;
    stack = [];
  };

  this.startNonterminal = function(name, begin)
  {
    var nonterminal = new MaiaScript.Nonterminal(name, begin, begin, []);
    if (stack.length > 0) addChild(nonterminal);
    stack.push(nonterminal);
  };

  this.endNonterminal = function(name, end)
  {
    stack[stack.length - 1].end = end;
    if (stack.length > 1) stack.pop();
  };

  this.terminal = function(name, begin, end)
  {
    addChild(new MaiaScript.Terminal(name, begin, end));
  };

  this.whitespace = function(begin, end)
  {
  };

  function addChild(s)
  {
    var current = stack[stack.length - 1];
    current.children.push(s);
  }

  this.serialize = function(e)
  {
    e.reset(input);
    stack[0].send(e);
  };
};

MaiaScript.Terminal = function(name, begin, end)
{
  this.begin = begin;
  this.end = end;

  this.send = function(e)
  {
    e.terminal(name, begin, end);
  };
};

MaiaScript.Nonterminal = function(name, begin, end, children)
{
  this.begin = begin;
  this.end = end;

  this.send = function(e)
  {
    e.startNonterminal(name, begin);
    var pos = begin;
    children.forEach
    (
      function(c)
      {
        if (pos < c.begin) e.whitespace(pos, c.begin);
        c.send(e);
        pos = c.end;
      }
    );
    if (pos < end) e.whitespace(pos, end);
    e.endNonterminal(name, end);
  };
};

MaiaScript.MAP0 =
[
  /*   0 */ 71, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 5, 6,
  /*  36 */ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 20, 26, 26, 27, 28, 29, 30, 31, 32,
  /*  64 */ 33, 34, 34, 35, 34, 36, 37, 7, 7, 7, 7, 7, 38, 7, 7, 7, 39, 7, 7, 7, 7, 40, 7, 7, 7, 7, 7, 41, 42, 43, 44,
  /*  95 */ 7, 33, 45, 46, 47, 48, 49, 50, 51, 52, 53, 7, 54, 55, 56, 57, 58, 59, 7, 60, 61, 62, 63, 7, 64, 65, 66, 7,
  /* 123 */ 67, 68, 69, 70, 33
];

MaiaScript.MAP1 =
[
  /*   0 */ 54, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
  /*  27 */ 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
  /*  54 */ 90, 122, 216, 154, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
  /*  76 */ 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 71, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1,
  /* 102 */ 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
  /* 136 */ 17, 18, 19, 20, 21, 22, 23, 24, 25, 20, 26, 26, 27, 28, 29, 30, 31, 32, 33, 45, 46, 47, 48, 49, 50, 51, 52,
  /* 163 */ 53, 7, 54, 55, 56, 57, 58, 59, 7, 60, 61, 62, 63, 7, 64, 65, 66, 7, 67, 68, 69, 70, 33, 33, 33, 33, 33, 33,
  /* 191 */ 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34,
  /* 218 */ 34, 35, 34, 36, 37, 7, 7, 7, 7, 7, 38, 7, 7, 7, 39, 7, 7, 7, 7, 40, 7, 7, 7, 7, 7, 41, 42, 43, 44, 7
];

MaiaScript.MAP2 =
[
  /* 0 */ 57344, 65536, 65533, 1114111, 33, 33
];

MaiaScript.INITIAL =
[
  /*  0 */ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
  /* 29 */ 30, 31, 32, 1054, 33, 34, 35, 1060, 37, 38, 39, 1064, 41, 42, 43, 1068, 1069
];

MaiaScript.TRANSITION =
[
  /*    0 */ 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704,
  /*   18 */ 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704,
  /*   36 */ 5048, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2646, 4257, 2704, 2704,
  /*   54 */ 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2304, 2304, 2306, 2704, 5048, 3039, 2704, 2704,
  /*   72 */ 2921, 2928, 2704, 2704, 2925, 2703, 2704, 2704, 2704, 2704, 2646, 4257, 2704, 2704, 2704, 2704, 2704, 2704,
  /*   90 */ 2704, 2704, 2704, 2704, 2704, 2704, 2304, 2304, 2306, 2704, 2704, 2704, 2704, 2704, 2921, 2928, 2704, 2704,
  /*  108 */ 2925, 2703, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704,
  /*  126 */ 2704, 2704, 2704, 4693, 2322, 2704, 5048, 3039, 2704, 2704, 2921, 2928, 2704, 2704, 2925, 2703, 2704, 2704,
  /*  144 */ 2704, 2704, 2646, 4257, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2335,
  /*  162 */ 4248, 2704, 2365, 3039, 2704, 2704, 3007, 2928, 2704, 2704, 2925, 2703, 2704, 2704, 2704, 2704, 3865, 2387,
  /*  180 */ 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2407, 3038, 2426, 2704, 5048, 3039,
  /*  198 */ 2704, 2704, 2921, 2928, 2704, 2704, 2925, 2703, 2704, 2704, 2704, 2704, 2646, 4257, 2704, 2704, 2704, 2704,
  /*  216 */ 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 3343, 3996, 3287, 2473, 5320, 2391, 2471, 4424, 6042, 2456,
  /*  234 */ 4425, 4425, 6046, 2469, 2472, 6688, 2472, 6691, 3599, 4257, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704,
  /*  252 */ 2704, 2704, 2704, 2704, 2704, 4836, 4564, 2704, 5048, 3039, 2704, 2704, 2921, 2928, 2704, 2704, 2925, 2703,
  /*  270 */ 2704, 2704, 2704, 2704, 2646, 4257, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704,
  /*  288 */ 2704, 5078, 4950, 2704, 5048, 2489, 2704, 2704, 2921, 2928, 2704, 2704, 2925, 2703, 2704, 2704, 2704, 2704,
  /*  306 */ 2646, 4257, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2502, 2518, 2704,
  /*  324 */ 2344, 3039, 2704, 2704, 5006, 2928, 2704, 2704, 2555, 2703, 2704, 2581, 2704, 2704, 2734, 4257, 2704, 2704,
  /*  342 */ 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2601, 2613, 2625, 2704, 5048, 3039, 2704, 2704,
  /*  360 */ 2921, 2928, 2704, 2704, 2925, 2703, 2704, 2704, 2704, 2704, 2646, 4257, 2704, 2704, 2704, 2704, 2704, 2704,
  /*  378 */ 2704, 2704, 2704, 2704, 2704, 2704, 2641, 2662, 2674, 2704, 5048, 3039, 2704, 2704, 2921, 2928, 2704, 2704,
  /*  396 */ 2925, 2703, 2704, 2704, 2704, 2704, 2646, 4257, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704,
  /*  414 */ 2704, 2704, 2704, 5628, 5170, 2704, 5048, 2690, 2704, 2703, 2921, 2410, 2704, 2704, 2721, 2750, 2704, 2768,
  /*  432 */ 2704, 2729, 6581, 4257, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 6459, 2804,
  /*  450 */ 2791, 2978, 5280, 5290, 2978, 2704, 2921, 2928, 2704, 2704, 2820, 2703, 2704, 2531, 2704, 2842, 2826, 4257,
  /*  468 */ 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2863, 2879, 2704, 5048, 3039,
  /*  486 */ 2704, 2704, 2921, 2928, 2704, 2704, 2925, 2703, 2704, 2704, 2704, 2704, 2646, 4257, 2704, 2704, 2704, 2704,
  /*  504 */ 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 6680, 2892, 2908, 2705, 2944, 4913, 2752, 2704, 2921, 2928,
  /*  522 */ 2704, 2704, 2820, 2703, 2704, 2531, 2704, 2842, 2826, 4257, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704,
  /*  540 */ 2704, 2704, 2704, 2704, 3344, 2960, 5054, 2704, 5716, 3039, 2704, 2704, 4926, 2928, 2704, 2704, 2925, 2703,
  /*  558 */ 2704, 4290, 2704, 2704, 5500, 4257, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704,
  /*  576 */ 2976, 5920, 2994, 2704, 5048, 3446, 2704, 2438, 2921, 2928, 2704, 2704, 3035, 3055, 2704, 2704, 2704, 2704,
  /*  594 */ 2646, 4257, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 5404, 3073, 2473,
  /*  612 */ 3102, 2391, 4711, 4424, 4540, 3118, 4425, 4425, 4866, 2469, 5867, 3157, 4187, 3181, 4233, 3202, 2704, 2704,
  /*  630 */ 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 5418, 3222, 2473, 3102, 2391, 4711, 4424,
  /*  648 */ 4540, 3118, 4425, 4425, 5200, 2469, 4331, 3258, 4187, 3282, 4233, 4257, 2704, 2704, 2704, 2704, 2704, 2704,
  /*  666 */ 2704, 2704, 2704, 2704, 2704, 2704, 2704, 5418, 3222, 2473, 3102, 2391, 4711, 5572, 4540, 3303, 4425, 4425,
  /*  684 */ 5200, 2469, 4331, 3258, 4187, 3282, 4233, 4257, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704,
  /*  702 */ 2704, 2704, 2704, 5418, 3222, 3332, 3360, 2391, 3376, 4424, 4540, 3118, 4425, 4425, 5200, 2469, 4331, 3258,
  /*  720 */ 4187, 3282, 4233, 4257, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 5418,
  /*  738 */ 3222, 2473, 3102, 2391, 4711, 4606, 4540, 3392, 4425, 4425, 5200, 2469, 4331, 3258, 4187, 3282, 4233, 4257,
  /*  756 */ 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 5418, 3222, 2473, 3102, 2391,
  /*  774 */ 4711, 4424, 4540, 3118, 4425, 4425, 5200, 2469, 4331, 3258, 3411, 3282, 3427, 3687, 2704, 2704, 2704, 2704,
  /*  792 */ 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 5418, 3222, 3462, 3490, 2391, 3506, 4424, 4540, 3118,
  /*  810 */ 4425, 4425, 5200, 2469, 4331, 3258, 4187, 3282, 4233, 4257, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704,
  /*  828 */ 2704, 2704, 2704, 2704, 2704, 5418, 3222, 2473, 3102, 2391, 4711, 4424, 6387, 3118, 4425, 4425, 5108, 2469,
  /*  846 */ 4331, 3258, 4187, 3282, 4233, 4257, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704,
  /*  864 */ 5770, 2539, 6016, 2704, 5048, 3039, 2704, 2704, 2921, 2928, 2704, 2704, 2925, 2703, 2704, 2704, 2704, 2704,
  /*  882 */ 2646, 4257, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2775, 3534, 3522, 2704,
  /*  900 */ 5048, 3039, 2704, 2704, 2921, 2928, 2704, 2704, 2925, 2703, 2704, 2704, 2704, 2704, 2646, 4257, 2704, 2704,
  /*  918 */ 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 6099, 5972, 2704, 5048, 3797, 2704, 2704,
  /*  936 */ 2921, 2928, 2704, 2704, 2925, 2703, 2704, 2704, 2704, 2704, 2646, 4257, 2704, 2704, 2704, 2704, 2704, 2704,
  /*  954 */ 2704, 2704, 2704, 2704, 2704, 2704, 2371, 6217, 6175, 3618, 3550, 3574, 2440, 3615, 2921, 4153, 2704, 2704,
  /*  972 */ 2925, 2703, 2704, 2704, 2704, 2704, 2646, 4257, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704,
  /*  990 */ 2704, 2704, 2704, 5779, 6891, 2704, 5048, 6466, 2704, 2704, 2921, 2928, 2704, 2704, 2925, 2703, 2704, 2704,
  /* 1008 */ 2704, 2704, 2646, 4257, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2349, 2565,
  /* 1026 */ 5146, 2704, 5048, 3039, 2704, 2704, 2921, 2928, 2704, 2704, 2925, 2703, 2704, 2704, 2704, 2704, 2646, 4257,
  /* 1044 */ 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 5048, 3039,
  /* 1062 */ 2704, 2704, 2921, 2928, 2704, 2704, 2925, 2703, 2704, 2704, 2704, 2704, 2646, 4257, 2704, 2704, 2704, 2704,
  /* 1080 */ 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 3343, 3996, 3287, 2473, 5320, 2391, 2471, 4424, 6042, 3118,
  /* 1098 */ 4425, 4425, 5560, 2469, 4331, 3634, 4187, 4420, 3672, 4257, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704,
  /* 1116 */ 2704, 2704, 2704, 2704, 3343, 3996, 3287, 2473, 5320, 2391, 2471, 4424, 6042, 3118, 4425, 4425, 5560, 2469,
  /* 1134 */ 4331, 3634, 4187, 4420, 3657, 3442, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704,
  /* 1152 */ 3343, 3996, 3287, 2473, 5320, 2391, 2471, 4424, 6042, 3118, 4425, 4425, 4980, 2469, 4331, 3707, 4187, 4420,
  /* 1170 */ 3672, 4257, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 3343, 3996, 3287, 2473,
  /* 1188 */ 6445, 2391, 2471, 4424, 6042, 3730, 4425, 4425, 5560, 2469, 4331, 3634, 4187, 4420, 3672, 4257, 2704, 2704,
  /* 1206 */ 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 3343, 3996, 3287, 2473, 6567, 2391, 2471, 4424,
  /* 1224 */ 6042, 3759, 4425, 4425, 6046, 2469, 2472, 6688, 2472, 6691, 3599, 4257, 2704, 2704, 2704, 2704, 2704, 2704,
  /* 1242 */ 2704, 2704, 2704, 2704, 2704, 2704, 3343, 3996, 3287, 2473, 5320, 2391, 2471, 4424, 6042, 2456, 4425, 4425,
  /* 1260 */ 4500, 2469, 2472, 3813, 2472, 6691, 3599, 4257, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704,
  /* 1278 */ 2704, 2704, 3343, 3996, 3287, 2473, 6721, 2391, 2471, 4424, 5848, 2456, 4425, 4425, 4594, 2469, 2472, 6688,
  /* 1296 */ 2472, 6691, 3940, 4257, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 5432,
  /* 1314 */ 5444, 2704, 5048, 3039, 2704, 2704, 2921, 2928, 2704, 2704, 2925, 2703, 2704, 2704, 2704, 2704, 2646, 4257,
  /* 1332 */ 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 3836, 3039,
  /* 1350 */ 2704, 2704, 3587, 2928, 2704, 2704, 2925, 2703, 2704, 2704, 2704, 2704, 2847, 3860, 2704, 2704, 2704, 2704,
  /* 1368 */ 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 3881, 3895, 2704, 5048, 3039, 2704, 2704, 2921, 2928,
  /* 1386 */ 2704, 2704, 2925, 2703, 2704, 2704, 2704, 2704, 2646, 4257, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704,
  /* 1404 */ 2704, 2704, 2704, 2704, 2704, 3019, 5726, 2704, 5048, 3039, 2704, 2704, 2921, 2928, 2704, 2704, 2925, 2703,
  /* 1422 */ 2704, 2704, 2704, 2704, 2646, 4257, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704,
  /* 1440 */ 3343, 3996, 3287, 3928, 3956, 2585, 4012, 4424, 6042, 3118, 4425, 4042, 5560, 4069, 4094, 4110, 4187, 4420,
  /* 1458 */ 3672, 4257, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 4148, 4755, 4169, 2473,
  /* 1476 */ 5320, 2391, 2471, 4424, 3141, 3118, 4425, 5213, 5560, 3405, 4331, 3634, 4187, 4420, 4203, 4257, 2704, 2704,
  /* 1494 */ 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 4277, 5604, 4314, 2473, 5320, 2391, 2471, 3714,
  /* 1512 */ 6042, 3118, 4347, 4369, 5560, 2469, 4389, 3634, 4405, 4441, 3657, 3442, 2704, 2704, 2704, 2704, 2704, 2704,
  /* 1530 */ 2704, 2704, 2704, 2704, 2704, 2704, 4465, 5896, 4486, 2473, 5320, 2391, 2471, 4424, 6042, 3118, 4425, 4425,
  /* 1548 */ 5560, 2469, 4331, 3634, 6740, 4529, 3672, 4257, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704,
  /* 1566 */ 2704, 2704, 4556, 6075, 4580, 4627, 6363, 2391, 4655, 4709, 6042, 4727, 4425, 4124, 4771, 3743, 4787, 4803,
  /* 1584 */ 5531, 4420, 4218, 4257, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 4828, 5348,
  /* 1602 */ 4852, 4053, 5823, 2391, 4899, 4182, 3141, 3730, 6193, 4425, 5560, 2469, 4331, 3634, 4373, 5546, 4203, 4257,
  /* 1620 */ 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 4942, 6260, 4966, 2473, 5320, 2391,
  /* 1638 */ 2471, 4424, 6042, 2456, 4425, 4425, 6046, 2469, 2472, 6688, 2472, 6691, 3599, 4257, 2704, 2704, 2704, 2704,
  /* 1656 */ 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 3343, 3996, 3287, 3242, 5034, 2391, 4812, 4424, 6042, 2456,
  /* 1674 */ 4425, 4425, 6046, 2469, 5575, 6688, 5487, 3970, 6623, 4257, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704,
  /* 1692 */ 2704, 2704, 2704, 2704, 5070, 5362, 5094, 2473, 5320, 2391, 2471, 4424, 5137, 2456, 5474, 4425, 6046, 2469,
  /* 1710 */ 4742, 5837, 2472, 6691, 3599, 4257, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704,
  /* 1728 */ 3343, 3996, 3287, 2473, 5320, 2391, 2471, 4424, 6042, 2456, 4425, 4425, 6046, 2469, 4611, 3844, 2472, 6691,
  /* 1746 */ 3599, 4257, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 5162, 6537, 5186, 5238,
  /* 1764 */ 5266, 2391, 5306, 3086, 6042, 5460, 4425, 5222, 5516, 3316, 2472, 6688, 5591, 4026, 3599, 4257, 2704, 2704,
  /* 1782 */ 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 3343, 3996, 3287, 6611, 6349, 2391, 6307, 4424,
  /* 1800 */ 6042, 2456, 4425, 4425, 6046, 2469, 2472, 6688, 2472, 6691, 3599, 4257, 2704, 2704, 2704, 2704, 2704, 2704,
  /* 1818 */ 2704, 2704, 2704, 2704, 2704, 2704, 5620, 5376, 5644, 6770, 5688, 2391, 5674, 4327, 3141, 5742, 4425, 4425,
  /* 1836 */ 6046, 2469, 2472, 6688, 4993, 4669, 4639, 4257, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704,
  /* 1854 */ 2704, 2704, 3343, 3996, 3287, 5758, 5702, 3206, 5795, 3820, 6042, 2456, 5864, 6129, 6046, 3772, 6151, 6688,
  /* 1872 */ 5883, 6691, 3599, 4257, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 3343, 3996,
  /* 1890 */ 3287, 2473, 5320, 2391, 2471, 3235, 5912, 2456, 5936, 4425, 4500, 2469, 2472, 3813, 2472, 6691, 3599, 4257,
  /* 1908 */ 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 5964, 6652, 5988, 3165, 6335, 3691,
  /* 1926 */ 5948, 3641, 6004, 2456, 6032, 4425, 6046, 2469, 3983, 3558, 6062, 6691, 4639, 4257, 2704, 2704, 2704, 2704,
  /* 1944 */ 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 6091, 6867, 6115, 2473, 5320, 2391, 2471, 6145, 6167, 2456,
  /* 1962 */ 5121, 6191, 4883, 2469, 2472, 6688, 2472, 6691, 3599, 4257, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704,
  /* 1980 */ 2704, 2704, 2704, 2704, 6209, 5390, 6233, 2473, 5320, 2391, 2471, 6276, 3141, 2456, 5658, 6292, 6046, 6403,
  /* 1998 */ 2472, 6688, 2472, 6377, 5250, 4257, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704,
  /* 2016 */ 3343, 3996, 3287, 3785, 6431, 2391, 2471, 4424, 6482, 6510, 4449, 4353, 4594, 3131, 6247, 4298, 6524, 6735,
  /* 2034 */ 6782, 4257, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 6553, 5334, 6597, 4078,
  /* 2052 */ 5320, 2391, 4513, 4424, 6042, 2456, 4425, 4425, 6046, 2469, 3186, 6688, 6639, 6691, 3599, 4257, 2704, 2704,
  /* 2070 */ 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 3343, 3996, 3287, 6668, 5809, 2391, 6707, 4424,
  /* 2088 */ 4681, 2456, 4425, 4425, 6046, 2469, 2472, 6688, 2472, 6691, 3599, 4257, 2704, 2704, 2704, 2704, 2704, 2704,
  /* 2106 */ 2704, 2704, 2704, 2704, 2704, 2704, 3343, 3996, 3287, 3266, 6321, 2391, 6415, 4424, 4879, 6756, 4132, 4425,
  /* 2124 */ 6046, 2469, 2472, 6688, 2472, 6691, 3599, 4257, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704,
  /* 2142 */ 2704, 2704, 3057, 6798, 6810, 4261, 5048, 3039, 2704, 2704, 2921, 2928, 2704, 2704, 2925, 2703, 2704, 2704,
  /* 2160 */ 2704, 2704, 2646, 4257, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 3474,
  /* 2178 */ 5018, 2704, 5048, 4470, 2704, 2704, 2921, 2928, 2704, 2704, 2925, 2703, 2704, 2704, 2704, 2704, 2646, 4257,
  /* 2196 */ 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 6826, 6838, 2704, 5048, 3039,
  /* 2214 */ 2704, 2704, 3908, 2928, 2704, 2704, 3912, 2703, 2704, 2704, 2704, 2704, 2646, 4257, 2704, 2704, 2704, 2704,
  /* 2232 */ 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 6494, 6854, 2704, 5048, 3039, 2704, 2704, 2921, 2928,
  /* 2250 */ 2704, 2704, 2925, 2703, 2704, 2704, 2704, 2704, 2646, 4257, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704,
  /* 2268 */ 2704, 2704, 2704, 2704, 2704, 2704, 6883, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704,
  /* 2286 */ 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704,
  /* 2304 */ 7726, 7726, 7726, 7726, 7726, 7726, 7726, 7726, 7726, 7726, 7726, 7726, 7726, 7726, 7726, 7726, 0, 0, 8192,
  /* 2323 */ 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8273, 8273, 8273, 8273, 8273, 0, 0, 0, 0, 0, 0, 69, 69, 0, 0, 0,
  /* 2346 */ 0, 0, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 0, 4608, 139, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 2379 */ 0, 0, 23552, 0, 0, 0, 0, 0, 4608, 4608, 4608, 4608, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6749, 0, 2095,
  /* 2406 */ 2095, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 0, 0, 6749, 6749, 6749, 6749, 6749, 6749, 6749,
  /* 2433 */ 6749, 6749, 6749, 6749, 6749, 6749, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15872, 17920, 0, 0, 0, 0,
  /* 2460 */ 2095, 2095, 2095, 2095, 2095, 2095, 2095, 0, 0, 158, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095,
  /* 2479 */ 2095, 2095, 2095, 2095, 2095, 2095, 0, 0, 0, 0, 0, 0, 11264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6749, 0, 0, 0, 0,
  /* 2506 */ 0, 0, 70, 70, 0, 0, 0, 0, 0, 70, 0, 0, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 0, 0, 0, 0, 0,
  /* 2536 */ 0, 71, 276, 0, 0, 0, 0, 0, 0, 0, 0, 65, 65, 20033, 65, 65, 0, 20033, 65, 0, 0, 135, 0, 0, 0, 0, 4096, 0,
  /* 2564 */ 4096, 0, 0, 0, 0, 0, 0, 0, 0, 26690, 26690, 26690, 26690, 26690, 0, 26690, 26690, 0, 0, 0, 4096, 0, 0, 0,
  /* 2588 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 6749, 0, 2095, 2163, 0, 0, 0, 12288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12288, 0,
  /* 2618 */ 0, 12288, 12288, 0, 0, 0, 0, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288,
  /* 2636 */ 12288, 12288, 0, 0, 0, 0, 0, 0, 0, 12800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 0, 0, 0, 69, 12800, 0, 0, 0,
  /* 2666 */ 12800, 0, 0, 0, 12800, 0, 0, 0, 12800, 0, 0, 0, 0, 0, 0, 12800, 0, 0, 0, 12800, 12800, 0, 0, 0, 0, 0, 0,
  /* 2693 */ 13824, 0, 0, 0, 0, 0, 0, 0, 0, 6749, 158, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17408, 0, 0, 135,
  /* 2724 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 246, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 4235, 0, 0, 69, 209, 0, 0, 0, 0, 0, 0,
  /* 2757 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 141, 17549, 0, 0, 0, 0, 246, 0, 246, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20992, 0, 0, 0,
  /* 2788 */ 0, 0, 0, 14927, 14927, 14927, 14927, 14927, 14927, 14927, 14927, 14959, 14959, 14959, 14959, 14959, 0, 0,
  /* 2806 */ 0, 0, 0, 0, 71, 14927, 14933, 14933, 14933, 14933, 14933, 14927, 14933, 14933, 0, 0, 135, 0, 0, 0, 0, 0, 0,
  /* 2829 */ 0, 0, 0, 71, 0, 0, 0, 0, 69, 0, 0, 0, 69, 0, 0, 293, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 304, 202, 0,
  /* 2861 */ 0, 304, 0, 16384, 0, 0, 16384, 16384, 0, 0, 0, 16384, 16384, 16384, 0, 0, 16384, 16384, 0, 0, 0, 0, 16384,
  /* 2884 */ 16384, 0, 16384, 16384, 16384, 16384, 16384, 16384, 0, 0, 0, 0, 0, 0, 72, 16976, 16982, 16982, 16982,
  /* 2903 */ 16982, 16982, 16976, 16982, 16982, 16976, 16976, 16976, 16976, 16976, 16976, 16976, 16976, 17008, 17008,
  /* 2918 */ 17008, 17008, 17008, 0, 0, 0, 0, 0, 0, 135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 158, 0, 0, 0, 0, 0, 0,
  /* 2948 */ 69, 139, 141, 141, 0, 0, 0, 0, 0, 0, 141, 17549, 0, 0, 18432, 18432, 0, 0, 0, 0, 0, 0, 0, 0, 18432, 0,
  /* 2974 */ 18432, 18432, 0, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15360, 0, 94, 94, 94, 94, 94, 94, 94, 94,
  /* 3002 */ 19057, 19057, 19057, 19057, 19057, 0, 0, 0, 0, 0, 0, 135, 0, 0, 69, 0, 139, 0, 0, 0, 0, 0, 0, 0, 0, 28763,
  /* 3028 */ 28763, 28763, 28763, 28763, 0, 28763, 28763, 0, 0, 7168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6749, 0, 0,
  /* 3054 */ 0, 6656, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43008, 0, 5193, 5193, 5193, 5193, 5193, 5193, 5193,
  /* 3080 */ 5193, 5193, 5193, 5193, 5193, 5193, 0, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2166, 2095, 2095,
  /* 3098 */ 2095, 2095, 2236, 2095, 0, 0, 0, 0, 69, 139, 142, 143, 5194, 5194, 2095, 2095, 2095, 2095, 142, 143, 0, 0,
  /* 3120 */ 0, 5268, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 0, 0, 158, 2095, 2095, 2095, 2095, 2095, 2095, 2095,
  /* 3139 */ 2095, 2306, 2095, 2095, 2095, 2095, 2095, 2095, 135, 0, 0, 69, 0, 139, 0, 0, 0, 0, 272, 273, 274, 244, 245,
  /* 3162 */ 0, 6391, 6421, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2180, 2095, 0, 0, 0, 0, 290,
  /* 3182 */ 292, 294, 6421, 6439, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 47, 2095, 0, 0, 0,
  /* 3202 */ 306, 307, 69, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6749, 0, 2095, 2208, 5194, 5194, 5194, 5194, 5194,
  /* 3227 */ 5194, 5194, 5194, 5194, 5194, 5194, 5194, 5194, 0, 2095, 2095, 2095, 2095, 2095, 2231, 2095, 2095, 2095,
  /* 3245 */ 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2179, 2182, 0, 0, 0, 0, 273, 273, 0, 244, 245, 0, 6391, 6421,
  /* 3266 */ 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2181, 2095, 0, 0, 0, 0, 290, 0, 294, 6421,
  /* 3286 */ 6439, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 0, 2095, 2095, 0, 0, 0,
  /* 3306 */ 5268, 33839, 2095, 2095, 36399, 2095, 2095, 2095, 0, 0, 158, 2095, 2095, 2095, 2095, 2095, 2095, 2304,
  /* 3324 */ 2095, 2095, 2095, 2095, 2095, 2095, 2310, 2095, 2095, 2095, 2095, 2168, 2095, 2168, 2095, 2095, 2095, 2095,
  /* 3342 */ 2095, 2095, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18432, 0, 0, 0, 0, 69, 139, 142, 143, 5194, 5194,
  /* 3370 */ 2197, 2200, 2095, 2095, 142, 143, 2095, 2095, 2197, 2095, 2200, 2095, 2095, 2095, 2095, 2095, 2095, 2095,
  /* 3388 */ 2095, 2095, 142, 143, 0, 0, 0, 5268, 2095, 34351, 2095, 2095, 36911, 2095, 2095, 0, 0, 158, 2095, 2095,
  /* 3408 */ 2095, 2095, 2302, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 289, 199,
  /* 3426 */ 291, 69, 139, 139, 302, 294, 294, 6439, 2095, 2095, 2095, 2095, 69, 0, 0, 2095, 69, 69, 69, 300, 0, 0, 0,
  /* 3449 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 6749, 6749, 0, 0, 2095, 2095, 2095, 2169, 2095, 2169, 2095, 2095, 2095, 2095,
  /* 3472 */ 2095, 2095, 0, 0, 0, 0, 0, 0, 0, 0, 43612, 43612, 43612, 43612, 43612, 0, 43612, 43612, 0, 0, 0, 0, 69,
  /* 3495 */ 139, 142, 143, 5194, 5194, 2198, 2201, 2095, 2095, 142, 143, 2095, 2095, 2198, 2095, 2201, 2095, 2095,
  /* 3513 */ 2095, 2095, 2095, 2095, 2095, 2095, 2095, 142, 143, 20992, 20992, 20992, 20992, 20992, 20992, 20992, 20992,
  /* 3530 */ 20992, 20992, 20992, 20992, 20992, 0, 0, 0, 0, 20992, 0, 0, 0, 0, 0, 20992, 0, 20992, 0, 20992, 20480,
  /* 3551 */ 27136, 0, 0, 69, 139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2095, 2095, 2095, 2327, 2095, 2095, 2330, 2095, 8704,
  /* 3575 */ 10240, 11776, 14336, 15872, 17920, 19456, 23040, 24064, 25088, 29184, 44032, 6749, 0, 0, 0, 0, 0, 0, 135,
  /* 3594 */ 0, 0, 69, 0, 202, 0, 0, 0, 0, 0, 0, 0, 2095, 2095, 2095, 2095, 69, 0, 0, 2095, 69, 19456, 0, 0, 0, 0, 0, 0,
  /* 3622 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 9216, 0, 0, 273, 273, 0, 244, 0, 0, 0, 0, 2095, 2095, 2095, 2095, 2095, 2095,
  /* 3648 */ 2095, 2095, 2095, 184, 2095, 2095, 2095, 2095, 2095, 300, 139, 301, 0, 0, 0, 0, 2095, 2095, 2095, 2095, 69,
  /* 3669 */ 0, 139, 2095, 69, 139, 139, 0, 0, 0, 0, 2095, 2095, 2095, 2095, 69, 0, 0, 2095, 69, 69, 308, 69, 0, 0, 0,
  /* 3694 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 6749, 0, 2207, 2095, 273, 273, 0, 244, 275, 0, 248, 0, 2095, 2095, 2095, 2095,
  /* 3719 */ 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2234, 2235, 2095, 2095, 0, 5120, 0, 5268, 2095, 2095, 2095, 2095,
  /* 3738 */ 2095, 2095, 2095, 0, 0, 158, 2095, 2095, 2095, 2301, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2309,
  /* 3757 */ 2095, 30255, 5120, 5265, 0, 0, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 0, 0, 158, 2095, 2095, 2300, 2095,
  /* 3777 */ 2095, 2303, 2095, 2095, 2095, 2095, 2095, 2308, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2175, 2095, 2095,
  /* 3795 */ 2095, 2095, 0, 0, 0, 0, 0, 0, 0, 22172, 0, 0, 0, 0, 6749, 0, 0, 0, 0, 0, 0, 0, 275, 0, 248, 0, 2095, 2095,
  /* 3823 */ 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2233, 2095, 2095, 2095, 2095, 0, 0, 0, 0, 138, 140, 0, 0,
  /* 3844 */ 0, 0, 0, 0, 0, 0, 0, 0, 2095, 29743, 2095, 2095, 2095, 2095, 2095, 2095, 138, 138, 138, 138, 0, 0, 0, 0, 0,
  /* 3869 */ 0, 0, 0, 0, 0, 0, 0, 4677, 139, 0, 0, 4677, 0, 0, 0, 0, 28160, 28160, 0, 0, 0, 0, 0, 28160, 0, 0, 0, 28160,
  /* 3897 */ 0, 0, 28160, 0, 0, 28160, 0, 0, 0, 28160, 28160, 0, 0, 0, 0, 0, 0, 195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 3927 */ 0, 2163, 2095, 2095, 2170, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 0, 0, 0, 0, 0, 0, 0, 2095, 2095,
  /* 3949 */ 2095, 2095, 69, 0, 0, 2095, 305, 0, 0, 136, 0, 69, 139, 0, 0, 0, 0, 2199, 2095, 2095, 2095, 0, 0, 0, 0, 0,
  /* 3975 */ 2095, 2095, 2095, 2095, 2095, 2095, 2095, 39983, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2239, 2095,
  /* 3992 */ 2095, 2316, 2095, 2095, 0, 0, 0, 0, 0, 0, 2095, 2095, 0, 0, 0, 0, 0, 2095, 0, 0, 2095, 2095, 2199, 2095,
  /* 4016 */ 2095, 2095, 2095, 2095, 2095, 2095, 2222, 2095, 2224, 2095, 0, 0, 0, 0, 0, 2095, 2095, 2095, 35887, 2095,
  /* 4036 */ 2095, 2095, 2095, 2095, 2347, 2095, 2095, 2276, 2095, 2095, 2095, 2279, 2095, 2095, 2095, 2095, 2236, 2095,
  /* 4054 */ 2095, 2095, 2095, 2095, 47, 2095, 2095, 2095, 2095, 2095, 2095, 0, 0, 0, 0, 158, 2298, 2095, 2095, 2095,
  /* 4074 */ 2095, 2095, 2095, 2305, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2177, 2095, 2095, 0, 0, 0, 0,
  /* 4094 */ 2311, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2228, 2095, 2095, 2095, 2095, 0, 271, 271, 273, 273, 0,
  /* 4113 */ 244, 0, 0, 0, 0, 2095, 2095, 2095, 2095, 2328, 2329, 2095, 2095, 47, 2095, 2095, 2095, 2095, 2281, 2095,
  /* 4133 */ 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 41519, 2095, 2095, 2095, 2095, 2095, 2096, 0, 0, 0,
  /* 4152 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22528, 26112, 158, 0, 0, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
  /* 4176 */ 2143, 2143, 2143, 2143, 2143, 2143, 0, 2095, 2095, 2095, 2230, 2095, 2095, 2095, 2095, 2095, 2095, 2095,
  /* 4194 */ 2095, 2095, 2095, 2095, 2095, 2095, 199, 199, 290, 69, 139, 139, 0, 0, 0, 0, 2095, 2095, 2095, 2095, 69,
  /* 4215 */ 139, 0, 2095, 69, 139, 139, 0, 0, 0, 0, 2095, 2095, 38447, 2095, 69, 0, 0, 31279, 69, 139, 139, 0, 294,
  /* 4238 */ 294, 6439, 2095, 2095, 2095, 2095, 69, 0, 0, 2095, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 0,
  /* 4262 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 135, 0, 0, 0, 2097, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0,
  /* 4296 */ 204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2331, 2144, 2144, 2144, 2144,
  /* 4318 */ 2144, 2144, 2155, 2157, 2144, 2144, 2144, 2157, 2157, 0, 2095, 2095, 2229, 2095, 2095, 2095, 2095, 2095,
  /* 4336 */ 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 0, 271, 271, 2095, 2095, 2095, 2095, 2264, 2265, 2095,
  /* 4354 */ 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2283, 2095, 2095, 2095, 2095, 2095, 2095,
  /* 4372 */ 2277, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 47, 199, 199, 290, 2095,
  /* 4390 */ 2312, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 0, 271, 271, 2095, 2095, 2333,
  /* 4408 */ 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 199, 199, 290, 0, 0, 0, 0, 2095, 2095, 2095,
  /* 4428 */ 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 290, 0, 0, 0, 0, 2095, 2095,
  /* 4448 */ 2345, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2256, 2095, 2095, 2095, 2095, 2095, 2098,
  /* 4466 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44544, 6749, 0, 0, 0, 2145, 2145, 2145, 2145, 2145, 2145,
  /* 4492 */ 2156, 2156, 2145, 2145, 2145, 2156, 2156, 0, 2095, 2095, 135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 2095, 2095,
  /* 4515 */ 2095, 2095, 2095, 2095, 2095, 2216, 2095, 2095, 2095, 2095, 2095, 2095, 0, 0, 290, 0, 0, 0, 0, 2095, 2095,
  /* 4536 */ 2095, 2095, 2095, 2346, 2095, 2095, 2095, 2095, 2095, 2095, 135, 0, 0, 69, 0, 200, 142, 142, 143, 6349,
  /* 4556 */ 2099, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9810, 9810, 9810, 9810, 9810, 0, 0, 0, 2146, 2146, 2146,
  /* 4583 */ 2146, 2146, 2146, 2146, 2158, 2146, 2146, 2146, 2158, 2158, 0, 2095, 2095, 135, 0, 0, 0, 0, 0, 0, 243, 0,
  /* 4605 */ 0, 0, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 47, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095,
  /* 4624 */ 0, 0, 0, 2095, 2165, 2095, 2095, 2095, 2095, 2095, 2095, 2176, 2095, 2178, 2095, 0, 0, 0, 0, 0, 0, 0, 2095,
  /* 4647 */ 2095, 2095, 2095, 69, 139, 0, 2095, 69, 2165, 2095, 2095, 2095, 2095, 2095, 2215, 2095, 2217, 2095, 2095,
  /* 4666 */ 2223, 2095, 2095, 0, 0, 0, 0, 0, 2344, 2095, 2095, 2095, 2095, 2095, 39471, 2095, 2095, 2095, 2095, 2095,
  /* 4686 */ 2095, 135, 0, 0, 199, 0, 203, 0, 0, 0, 0, 0, 0, 0, 8192, 81, 81, 81, 81, 81, 8192, 81, 81, 0, 2226, 2095,
  /* 4712 */ 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 142, 143, 0, 0, 0, 5268,
  /* 4731 */ 2095, 2095, 2095, 2095, 2095, 2095, 2095, 0, 0, 158, 2258, 2095, 2095, 2095, 2095, 2095, 2313, 2095, 2095,
  /* 4750 */ 2095, 2095, 2095, 2095, 2095, 0, 0, 0, 0, 0, 0, 2096, 2096, 0, 0, 0, 0, 0, 2143, 0, 0, 2285, 2095, 135,
  /* 4774 */ 30208, 0, 240, 69, 0, 242, 0, 244, 0, 248, 2095, 2095, 3119, 2095, 2095, 32815, 2095, 2095, 2095, 2095,
  /* 4794 */ 2095, 2095, 2095, 2095, 2095, 2095, 42496, 271, 271, 273, 273, 0, 244, 275, 0, 248, 0, 3631, 2095, 2095,
  /* 4814 */ 2095, 2095, 2095, 2095, 2095, 2095, 2218, 2221, 2095, 2095, 2095, 2095, 0, 0, 2100, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 4837 */ 0, 0, 0, 0, 0, 0, 0, 9810, 9810, 9810, 9810, 9810, 0, 9810, 9810, 2147, 2147, 2147, 2147, 2147, 2147, 2147,
  /* 4859 */ 2147, 2147, 2147, 2147, 2147, 2147, 0, 2095, 2095, 135, 0, 0, 239, 69, 200, 241, 0, 244, 245, 6391, 2095,
  /* 4880 */ 2095, 2095, 47, 2095, 2095, 135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2297, 2095, 2095, 2095, 2095, 2095, 2095,
  /* 4903 */ 37423, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 0, 0, 0, 0, 0, 17408, 0, 0, 0, 0, 0, 0, 6749,
  /* 4926 */ 0, 0, 0, 0, 0, 0, 135, 0, 0, 0, 0, 0, 0, 204, 144, 0, 2101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 4958 */ 10835, 10835, 10835, 10835, 10835, 0, 0, 0, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148,
  /* 4976 */ 2148, 2148, 2148, 0, 2095, 2095, 135, 0, 0, 240, 69, 0, 242, 0, 244, 0, 248, 2095, 2095, 2095, 2095, 2095,
  /* 4998 */ 2095, 2095, 2095, 2336, 2095, 2095, 47, 2095, 0, 0, 0, 0, 0, 0, 135, 0, 0, 69, 4096, 139, 0, 0, 0, 0, 0, 0,
  /* 5024 */ 0, 0, 43612, 43612, 43612, 43612, 43612, 0, 0, 0, 0, 0, 0, 137, 69, 139, 0, 0, 0, 0, 2095, 2095, 2095,
  /* 5047 */ 2179, 0, 0, 0, 0, 69, 139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18432, 0, 18432, 0, 0, 0, 2102, 0, 0, 0, 0, 0, 0,
  /* 5077 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 10835, 10835, 10835, 10835, 10835, 0, 10835, 10835, 2149, 2149, 2149, 2149,
  /* 5098 */ 2149, 2149, 2149, 2149, 2149, 2149, 2149, 2149, 2149, 0, 2095, 2095, 135, 0, 0, 240, 69, 0, 242, 0, 244,
  /* 5119 */ 245, 6391, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2268, 2095, 2095, 2095, 2095, 2272, 2095, 2272,
  /* 5137 */ 2238, 2095, 2095, 2095, 2095, 2242, 135, 0, 197, 0, 0, 0, 0, 0, 0, 0, 0, 26690, 26690, 26690, 26690, 26690,
  /* 5159 */ 0, 0, 0, 2103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13396, 13396, 13396, 13396, 13396, 0, 0, 0,
  /* 5186 */ 2150, 2150, 2150, 2150, 2150, 2150, 2150, 2150, 2150, 2150, 2150, 2150, 2150, 0, 2095, 2095, 135, 0, 0,
  /* 5205 */ 240, 69, 200, 242, 0, 244, 245, 6391, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2235, 2095, 2095,
  /* 5224 */ 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2282, 2095, 47, 2095, 2095, 2095, 2095, 2095, 2095, 2166, 2095,
  /* 5242 */ 2172, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 0, 0, 0, 0, 0, 0, 0, 2095, 2095, 2095, 31791, 69, 139, 0,
  /* 5264 */ 2095, 69, 0, 0, 0, 0, 69, 139, 0, 0, 5267, 5267, 2095, 2095, 2095, 2095, 0, 0, 0, 0, 69, 139, 0, 0, 0, 0,
  /* 5290 */ 0, 0, 0, 0, 15360, 0, 0, 0, 0, 0, 0, 0, 6749, 0, 0, 0, 2095, 2166, 2095, 2211, 2095, 2095, 2095, 2095,
  /* 5314 */ 2095, 2095, 2095, 2095, 2095, 2225, 0, 0, 0, 0, 69, 139, 0, 0, 0, 0, 2095, 2095, 2095, 2095, 0, 0, 0, 0, 0,
  /* 5339 */ 0, 2108, 2108, 0, 0, 0, 0, 0, 2154, 0, 0, 0, 0, 0, 0, 2123, 2123, 0, 0, 0, 0, 0, 2147, 0, 0, 0, 0, 0, 0,
  /* 5368 */ 2124, 2124, 0, 0, 0, 0, 0, 2149, 0, 0, 0, 0, 0, 0, 2125, 2125, 0, 0, 0, 0, 0, 2125, 0, 0, 0, 0, 0, 0, 2126,
  /* 5397 */ 2126, 0, 0, 0, 0, 0, 2153, 0, 0, 0, 0, 0, 0, 5193, 5193, 0, 0, 0, 0, 0, 5193, 0, 0, 0, 0, 0, 0, 5194, 5194,
  /* 5426 */ 0, 0, 0, 0, 0, 5194, 0, 0, 0, 0, 0, 0, 27648, 27648, 0, 0, 0, 0, 27648, 27648, 27648, 27648, 27648, 27648,
  /* 5450 */ 27648, 27648, 27648, 27648, 27648, 27648, 27648, 0, 0, 0, 0, 5267, 5120, 0, 2095, 2095, 2254, 2095, 2095,
  /* 5469 */ 2255, 2095, 0, 0, 158, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2267, 2095, 2095, 2095, 2095, 2271, 2095,
  /* 5488 */ 2095, 2095, 2095, 2095, 2095, 2095, 30767, 2095, 2095, 2095, 2095, 2095, 0, 0, 0, 0, 0, 0, 204, 0, 0, 0, 0,
  /* 5511 */ 69, 0, 0, 0, 69, 2095, 2227, 135, 0, 238, 0, 0, 0, 0, 0, 0, 0, 0, 2095, 2607, 2095, 2095, 2095, 2095, 2095,
  /* 5536 */ 42543, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 199, 199, 290, 0, 0, 0, 0, 2095, 2095, 2095, 2095, 2095,
  /* 5556 */ 2095, 2095, 2095, 42031, 2095, 2095, 135, 0, 0, 240, 69, 0, 242, 0, 244, 0, 0, 2095, 2095, 2095, 2095,
  /* 5577 */ 2095, 2095, 47, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 0, 0, 0, 38959, 2095, 2095, 2095, 2095,
  /* 5596 */ 2095, 2095, 2095, 2095, 2239, 2095, 2095, 2095, 0, 0, 0, 0, 0, 0, 2097, 2097, 0, 0, 0, 0, 0, 2144, 0, 0,
  /* 5620 */ 2104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13396, 13396, 13396, 13396, 13396, 0, 13396, 13396,
  /* 5644 */ 2125, 2125, 2125, 2125, 2125, 2125, 2125, 2125, 2125, 2125, 2125, 2125, 2125, 0, 2095, 2095, 2095, 2095,
  /* 5662 */ 2095, 2095, 2266, 2095, 2095, 2095, 2095, 2095, 2095, 2228, 2095, 2274, 2095, 2095, 2095, 2095, 2213, 2095,
  /* 5680 */ 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 0, 0, 0, 0, 69, 139, 0, 0, 0, 0, 2095, 2173, 2095, 2095, 0,
  /* 5703 */ 0, 0, 0, 69, 139, 0, 0, 0, 0, 2171, 2095, 2095, 2095, 0, 0, 0, 0, 69, 139, 0, 0, 144, 144, 0, 0, 0, 0, 0,
  /* 5731 */ 0, 0, 0, 28763, 28763, 28763, 28763, 28763, 0, 0, 0, 0, 0, 0, 0, 2095, 2095, 2095, 2095, 2095, 2095, 2095,
  /* 5753 */ 0, 0, 158, 2095, 2259, 2164, 47, 2095, 2171, 2095, 2095, 2174, 2095, 2095, 2095, 2095, 2095, 0, 0, 0, 0, 0,
  /* 5775 */ 0, 0, 19968, 65, 0, 0, 0, 0, 0, 0, 0, 0, 24666, 24666, 24666, 24666, 24666, 0, 24666, 24666, 32303, 2095,
  /* 5797 */ 2210, 2095, 2095, 2214, 2095, 2095, 2095, 2095, 2208, 32303, 2208, 2095, 0, 0, 0, 0, 69, 139, 0, 0, 148, 0,
  /* 5819 */ 2095, 2095, 2095, 2095, 0, 0, 0, 0, 69, 139, 0, 0, 5120, 5120, 2095, 47, 2095, 2095, 0, 0, 0, 0, 0, 5632,
  /* 5843 */ 0, 0, 2095, 2095, 2326, 2095, 2095, 2095, 2095, 2095, 2095, 135, 0, 0, 198, 0, 201, 0, 0, 0, 0, 2095, 2095,
  /* 5866 */ 2262, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 0, 270, 271, 2095,
  /* 5884 */ 2095, 2095, 2095, 2334, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 0, 0, 0, 0, 0, 0, 2098, 2098, 0, 0,
  /* 5906 */ 0, 0, 0, 2145, 0, 0, 2095, 2095, 2095, 2095, 2241, 2095, 135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19031, 19031,
  /* 5930 */ 19031, 19031, 19031, 94, 19031, 19031, 2260, 2095, 2095, 2263, 2095, 2095, 2095, 2095, 2095, 2095, 2095,
  /* 5947 */ 2270, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2219, 2095, 2095, 2095, 2095, 2095, 0, 0, 2105, 0, 0,
  /* 5967 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21592, 21592, 21592, 21592, 21592, 0, 0, 0, 2151, 2151, 2151, 2151,
  /* 5992 */ 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 0, 2095, 2162, 2095, 2095, 2240, 2095, 2095, 2095,
  /* 6010 */ 135, 0, 0, 69, 0, 139, 0, 0, 0, 0, 0, 0, 0, 19968, 65, 20033, 20033, 20033, 20033, 0, 0, 0, 2095, 35029,
  /* 6034 */ 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2269, 2095, 2095, 2095, 2095, 2095, 2095, 135, 0, 0, 0, 0, 0, 0,
  /* 6055 */ 0, 0, 0, 0, 2095, 2095, 2095, 2095, 2332, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095,
  /* 6075 */ 0, 0, 0, 0, 0, 0, 2099, 2099, 0, 0, 0, 0, 0, 2146, 0, 0, 2106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 6107 */ 21592, 21592, 21592, 21592, 21592, 0, 21592, 21592, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152,
  /* 6124 */ 2152, 2152, 2152, 2152, 0, 2095, 2095, 2095, 2095, 2095, 2095, 2280, 2095, 2095, 2095, 2095, 2095, 2095,
  /* 6142 */ 2095, 2095, 2284, 0, 2095, 2227, 2095, 2095, 2227, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095,
  /* 6160 */ 2095, 2095, 2095, 2317, 0, 0, 0, 2095, 2239, 2095, 2095, 2095, 2095, 135, 196, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 6183 */ 23641, 23641, 23641, 23641, 23641, 0, 0, 0, 2275, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095,
  /* 6201 */ 2095, 2095, 2095, 2095, 2095, 2095, 2273, 2095, 2107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23641,
  /* 6226 */ 23641, 23641, 23641, 23641, 0, 23641, 23641, 2153, 2153, 2153, 2153, 2153, 2153, 2153, 2153, 2153, 2153,
  /* 6243 */ 2153, 2153, 2153, 0, 2095, 2095, 2095, 2095, 2095, 2095, 2314, 2095, 2095, 2315, 2095, 2095, 2095, 0, 0, 0,
  /* 6263 */ 0, 0, 0, 2101, 2101, 0, 0, 0, 0, 0, 2148, 0, 0, 0, 2095, 2228, 2095, 2095, 2095, 2095, 2095, 2095, 2095,
  /* 6286 */ 2095, 2095, 2095, 2095, 2095, 2237, 2095, 2095, 2095, 2095, 2278, 2095, 2095, 2095, 2095, 2095, 2095, 2095,
  /* 6304 */ 2095, 2228, 47, 2095, 2095, 2095, 2095, 2212, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 0, 0,
  /* 6323 */ 0, 0, 69, 139, 0, 0, 0, 0, 2095, 2095, 2095, 2181, 0, 0, 0, 0, 69, 139, 0, 0, 0, 0, 2095, 2095, 2095, 2203,
  /* 6349 */ 0, 0, 0, 0, 69, 139, 0, 0, 0, 0, 2095, 2167, 2095, 2095, 0, 0, 0, 0, 69, 139, 0, 0, 0, 0, 2095, 2095, 2095,
  /* 6376 */ 2178, 0, 0, 0, 0, 0, 2095, 33327, 2095, 2095, 37935, 2095, 2095, 2095, 2095, 2095, 2095, 135, 0, 0, 0, 0,
  /* 6398 */ 0, 142, 142, 143, 6349, 158, 2095, 2299, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2307, 40495, 2095, 2095,
  /* 6417 */ 2095, 2095, 2095, 2095, 2095, 2095, 2220, 2095, 2095, 2095, 2095, 2095, 0, 0, 0, 0, 0, 0, 69, 139, 0, 0,
  /* 6439 */ 5266, 5266, 2095, 2095, 2202, 2095, 0, 0, 0, 0, 69, 139, 0, 0, 5120, 5120, 2095, 2095, 2095, 2095, 0, 0, 0,
  /* 6462 */ 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25757, 0, 0, 6749, 0, 0, 0, 2095, 2095, 2095, 2227, 2095, 2095,
  /* 6488 */ 135, 0, 0, 198, 0, 201, 0, 0, 0, 0, 0, 0, 0, 45568, 0, 0, 0, 0, 0, 45568, 0, 0, 0, 0, 0, 0, 2095, 2095,
  /* 6516 */ 2095, 2095, 2095, 2095, 2256, 0, 0, 158, 2095, 2095, 2095, 2095, 2095, 2095, 2335, 2095, 2095, 2095, 2095,
  /* 6535 */ 2095, 2095, 0, 0, 0, 0, 0, 0, 2103, 2103, 0, 0, 0, 0, 0, 2150, 0, 0, 2108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 6565 */ 0, 68, 0, 0, 0, 0, 69, 139, 0, 0, 5265, 5265, 2095, 2095, 2095, 2095, 0, 0, 0, 0, 0, 246, 246, 0, 0, 0, 0,
  /* 6592 */ 69, 0, 0, 0, 69, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 0, 2095,
  /* 6612 */ 2095, 2095, 2095, 2095, 2167, 2095, 2095, 2095, 2095, 2095, 2095, 0, 0, 0, 0, 0, 0, 0, 2095, 35375, 2095,
  /* 6633 */ 2095, 69, 0, 0, 2095, 69, 2095, 2095, 2095, 41007, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 0,
  /* 6653 */ 0, 0, 0, 0, 0, 2105, 2105, 0, 0, 0, 0, 0, 2151, 0, 0, 2095, 2095, 2167, 2095, 2095, 2095, 2095, 2095, 2095,
  /* 6677 */ 2095, 2095, 2095, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2095, 2095, 2095, 2095, 2095, 2095,
  /* 6702 */ 2095, 2095, 2095, 2095, 2095, 2095, 2209, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095,
  /* 6720 */ 2209, 0, 0, 0, 0, 69, 139, 0, 0, 5266, 5266, 2095, 2095, 2095, 2095, 0, 0, 0, 0, 0, 2095, 2095, 2095, 2095,
  /* 6744 */ 2095, 2095, 2095, 2095, 2095, 2095, 2227, 2095, 2095, 199, 199, 290, 0, 0, 0, 0, 2095, 2095, 2095, 2095,
  /* 6764 */ 2095, 2095, 47, 0, 0, 158, 2095, 2095, 2095, 2095, 2095, 2173, 2095, 2095, 2095, 2095, 2095, 2095, 0, 0, 0,
  /* 6785 */ 0, 0, 0, 0, 2351, 2095, 2095, 2095, 69, 0, 0, 2095, 305, 0, 0, 43008, 43008, 0, 0, 43008, 43008, 0, 0, 0,
  /* 6809 */ 0, 43008, 43008, 43008, 43008, 43008, 43008, 43008, 43008, 43008, 43008, 43008, 43008, 43008, 0, 0, 0, 0,
  /* 6827 */ 45056, 0, 0, 0, 0, 0, 0, 0, 45056, 45056, 0, 0, 0, 45056, 0, 0, 45056, 45056, 45056, 45056, 45056, 45056,
  /* 6849 */ 45056, 45056, 0, 0, 0, 45568, 45568, 45568, 45568, 45568, 45568, 45568, 45568, 45568, 45568, 45568, 45568,
  /* 6866 */ 45568, 0, 0, 0, 0, 0, 0, 2106, 2106, 0, 0, 0, 0, 0, 2152, 0, 0, 0, 0, 0, 1536, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 6896 */ 0, 0, 0, 24666, 24666, 24666, 24666, 24666, 0, 0, 0
];

MaiaScript.EXPECTED =
[
  /*   0 */ 231, 235, 237, 238, 242, 246, 250, 254, 258, 262, 266, 269, 316, 316, 316, 283, 308, 346, 295, 326, 303,
  /*  21 */ 307, 308, 314, 275, 316, 273, 332, 315, 316, 316, 316, 316, 279, 438, 321, 499, 275, 356, 330, 316, 316,
  /*  42 */ 271, 316, 316, 316, 316, 316, 279, 299, 441, 324, 315, 316, 316, 316, 316, 316, 316, 298, 440, 321, 277,
  /*  63 */ 316, 316, 316, 316, 344, 442, 338, 316, 316, 439, 336, 317, 342, 350, 308, 395, 365, 401, 353, 369, 373,
  /*  84 */ 377, 381, 385, 389, 393, 308, 308, 308, 394, 399, 308, 308, 394, 308, 423, 405, 524, 416, 308, 531, 421,
  /* 105 */ 411, 308, 308, 308, 308, 469, 308, 308, 308, 308, 417, 427, 308, 308, 308, 431, 290, 308, 308, 308, 469,
  /* 126 */ 308, 308, 308, 525, 308, 308, 469, 288, 308, 308, 308, 308, 308, 525, 308, 308, 286, 308, 308, 308, 482,
  /* 147 */ 308, 537, 308, 480, 537, 481, 308, 308, 308, 308, 435, 446, 492, 450, 454, 458, 461, 465, 468, 308, 308,
  /* 168 */ 308, 308, 412, 308, 361, 308, 308, 308, 291, 308, 408, 473, 478, 359, 308, 308, 308, 308, 308, 308, 479,
  /* 189 */ 308, 308, 486, 490, 308, 496, 503, 508, 479, 308, 308, 308, 308, 308, 479, 308, 308, 309, 512, 474, 517,
  /* 210 */ 308, 308, 308, 522, 308, 308, 309, 512, 504, 518, 308, 308, 308, 310, 513, 529, 308, 308, 535, 308, 308,
  /* 231 */ 16392, 24576, 147456, 8404992, 16793600, 536887296, 16384, 16384, 16384, 16384, 8404992, 16793600,
  /* 243 */ -2147467264, 16384, 8404992, -2130690048, -2147467264, 8409080, 813748216, 2138914816, -25346048, -25346048,
  /* 253 */ -25346048, 2147303424, 813752312, -16957440, -16957440, 830529528, 813752312, 813752312, 813752316,
  /* 262 */ -1333731336, -1333731336, 813752312, -1316954120, -16916488, -16916488, -16916488, -139272, 16384, 8, 8, 40,
  /* 274 */ 8, 8, 8, 72, 8, 8, 8, 8192, 0, 8192, 131072, 536870912, 0, 0, 536870912, 134217728, 0x80000000, 0, 0, 0,
  /* 294 */ 6291456, 3584, 3584, 72, 8, 0, 256, 256, 128, 65536, 524288, 6291456, 201326592, 1610612736, 0, 0, 0, 0, 1,
  /* 313 */ 16, 4096, 4096, 8, 8, 8, 8, 256, 1024, 1024, 3072, 3072, 72, 24, 40, 536871936, 3072, 0, 4096, 8, 8,
  /* 334 */ 1610613760, 3072, 1024, 1024, 3072, 8, 8, 8, 128, 128, 8, 256, 256, 128, 1024, 3072, 256, 256, 256, 256, 0,
  /* 355 */ 8, 8, 24, 40, 0, 1, 0, 0, 6, 192, 128, 256, 8192, 1048576, 4194304, 4194560, 2097152, 2097155, 27262647,
  /* 374 */ 27262647, 27262711, 31457207, 29359807, 1377829123, 29359871, 33554367, 1377829123, 1382023427, 1377829123,
  /* 384 */ 1377829123, 1382023427, 1377829123, 1981808899, -27262653, 1405091767, 1405091831, 1405091839, -9, -1, 0, 0,
  /* 396 */ 0, 2, 64, 128, 1048576, 67108864, 0, 0, 8, 16384, 458752, 16777216, 0, 1, 30, 32, 0, 0, 0, 262144,
  /* 416 */ 1073741824, 0, 0, 0, 2048, 469762048, 0x80000000, 0, 6, 32, 7168, 262144, 0, 33554432, 268435456, 0,
  /* 432 */ 67108864, 536870912, 201326592, 0, 262144, 524288, 0, 256, 128, 128, 128, 128, 1024, 3072, 0, 8388608,
  /* 448 */ 524288, 524288, 7340032, 15728640, 15728640, 7340032, 7864320, 17825791, 16252928, 7864320, 17825791,
  /* 459 */ 17825791, 26214399, 17825791, 26214399, 26214399, 26214399, 33554431, 33554431, 33554431, 33554431, 0, 0, 0,
  /* 472 */ 67108864, 1984, 2048, 4096, 8192, 16384, 245760, 262144, 0, 0, 0, 268435456, 0, 0, 2, 4, 0, 64, 128, 0, 0,
  /* 493 */ 0, 524486, 17301702, 1, 24, 32, 512, 512, 512, 512, 1024, 2048, 4096, 8192, 32768, 16384, 32768, 65536,
  /* 511 */ 131072, 16, 32, 512, 1024, 4096, 32768, 131072, 262144, 0, 0, 0, 262144, 0, 0, 33554432, 268435456, 0, 8192,
  /* 530 */ 131072, 0, 0, 335544320, 1610612736, 16, 1024, 0, 0, 536870912, 0
];

MaiaScript.TOKEN =
[
  "(0)",
  "END",
  "EOF",
  "Identifier",
  "'null'",
  "'true'",
  "'false'",
  "Character",
  "String",
  "Integer",
  "Complex",
  "Real",
  "Comment",
  "Script",
  "WhiteSpace",
  "'!'",
  "'!='",
  "'#='",
  "'%'",
  "'%='",
  "'&'",
  "'&&'",
  "'&='",
  "'('",
  "')'",
  "'*'",
  "'**'",
  "'*='",
  "'+'",
  "'++'",
  "'+='",
  "','",
  "'-'",
  "'--'",
  "'-='",
  "'.'",
  "'/'",
  "'/='",
  "':'",
  "':='",
  "';'",
  "'<'",
  "'<<'",
  "'<<='",
  "'<='",
  "'='",
  "'=='",
  "'>'",
  "'>='",
  "'>>'",
  "'>>='",
  "'?'",
  "'?='",
  "'['",
  "']'",
  "'^'",
  "'^='",
  "'break'",
  "'case'",
  "'catch'",
  "'continue'",
  "'default'",
  "'do'",
  "'else'",
  "'export'",
  "'f32'",
  "'f64'",
  "'for'",
  "'foreach'",
  "'global'",
  "'i32'",
  "'i64'",
  "'if'",
  "'import'",
  "'include'",
  "'local'",
  "'return'",
  "'switch'",
  "'test'",
  "'throw'",
  "'try'",
  "'typeof'",
  "'while'",
  "'{'",
  "'|'",
  "'|='",
  "'||'",
  "'}'",
  "'~'"
];

// End
